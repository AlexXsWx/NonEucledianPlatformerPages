!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=56)}([function(t,e,n){function r(t){if(t)return function(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}(t)}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var i=0;i<r.length;i++)if((n=r[i])===e||n.fn===e){r.splice(i,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n)for(var r=0,i=(n=n.slice(0)).length;r<i;++r)n[r].apply(this,e);return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){var r,i=n(42),o=n(18),s=n(44),a=n(45),u=n(46);"undefined"!=typeof ArrayBuffer&&(r=n(47));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),h="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=c||h;e.protocol=3;var l=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},p=i(l),d={type:"error",data:"parser error"},g=n(48);function y(t,e,n){for(var r=new Array(t.length),i=a(t.length,n),o=function(t,n,i){e(n,function(e,n){r[t]=n,i(e,r)})},s=0;s<t.length;s++)o(s,t[s],i)}e.encodePacket=function(t,n,r,i){"function"==typeof n&&(i=n,n=!1),"function"==typeof r&&(i=r,r=null);var o=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&o instanceof ArrayBuffer)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var i=t.data,o=new Uint8Array(i),s=new Uint8Array(1+i.byteLength);s[0]=l[t.type];for(var a=0;a<o.length;a++)s[a+1]=o[a];return r(s.buffer)}(t,n,i);if(void 0!==g&&o instanceof g)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);if(f)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var i=new FileReader;return i.onload=function(){e.encodePacket({type:t.type,data:i.result},n,!0,r)},i.readAsArrayBuffer(t.data)}(t,n,r);var i=new Uint8Array(1);i[0]=l[t.type];var o=new g([i.buffer,t.data]);return r(o)}(t,n,i);if(o&&o.base64)return function(t,n){var r="b"+e.packets[t.type]+t.data.data;return n(r)}(t,i);var s=l[t.type];return void 0!==t.data&&(s+=r?u.encode(String(t.data),{strict:!1}):String(t.data)),i(""+s)},e.encodeBase64Packet=function(t,n){var r,i="b"+e.packets[t.type];if(void 0!==g&&t.data instanceof g){var o=new FileReader;return o.onload=function(){var t=o.result.split(",")[1];n(i+t)},o.readAsDataURL(t.data)}try{r=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var s=new Uint8Array(t.data),a=new Array(s.length),u=0;u<s.length;u++)a[u]=s[u];r=String.fromCharCode.apply(null,a)}return i+=btoa(r),n(i)},e.decodePacket=function(t,n,r){if(void 0===t)return d;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(r&&!1===(t=function(t){try{t=u.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return d;var i=t.charAt(0);return Number(i)==i&&p[i]?t.length>1?{type:p[i],data:t.substring(1)}:{type:p[i]}:d}i=new Uint8Array(t)[0];var o=s(t,1);return g&&"blob"===n&&(o=new g([o])),{type:p[i],data:o}},e.decodeBase64Packet=function(t,e){var n=p[t.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:t.substr(1)}};var i=r.decode(t.substr(1));return"blob"===e&&g&&(i=new g([i])),{type:n,data:i}},e.encodePayload=function(t,n,r){"function"==typeof n&&(r=n,n=null);var i=o(t);if(n&&i)return g&&!f?e.encodePayloadAsBlob(t,r):e.encodePayloadAsArrayBuffer(t,r);if(!t.length)return r("0:");y(t,function(t,r){e.encodePacket(t,!!i&&n,!1,function(t){r(null,function(t){return t.length+":"+t}(t))})},function(t,e){return r(e.join(""))})},e.decodePayload=function(t,n,r){if("string"!=typeof t)return e.decodePayloadAsBinary(t,n,r);var i;if("function"==typeof n&&(r=n,n=null),""===t)return r(d,0,1);for(var o,s,a="",u=0,c=t.length;u<c;u++){var h=t.charAt(u);if(":"===h){if(""===a||a!=(o=Number(a)))return r(d,0,1);if(a!=(s=t.substr(u+1,o)).length)return r(d,0,1);if(s.length){if(i=e.decodePacket(s,n,!1),d.type===i.type&&d.data===i.data)return r(d,0,1);if(!1===r(i,u+o,c))return}u+=o,a=""}else a+=h}return""!==a?r(d,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){if(!t.length)return n(new ArrayBuffer(0));y(t,function(t,n){e.encodePacket(t,!0,!0,function(t){return n(null,t)})},function(t,e){var r=e.reduce(function(t,e){var n;return t+(n="string"==typeof e?e.length:e.byteLength).toString().length+n+2},0),i=new Uint8Array(r),o=0;return e.forEach(function(t){var e="string"==typeof t,n=t;if(e){for(var r=new Uint8Array(t.length),s=0;s<t.length;s++)r[s]=t.charCodeAt(s);n=r.buffer}i[o++]=e?0:1;var a=n.byteLength.toString();for(s=0;s<a.length;s++)i[o++]=parseInt(a[s]);i[o++]=255;for(r=new Uint8Array(n),s=0;s<r.length;s++)i[o++]=r[s]}),n(i.buffer)})},e.encodePayloadAsBlob=function(t,n){y(t,function(t,n){e.encodePacket(t,!0,!0,function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var r=new Uint8Array(t.length),i=0;i<t.length;i++)r[i]=t.charCodeAt(i);t=r.buffer,e[0]=0}var o=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),s=new Uint8Array(o.length+1);for(i=0;i<o.length;i++)s[i]=parseInt(o[i]);if(s[o.length]=255,g){var a=new g([e.buffer,s.buffer,t]);n(null,a)}})},function(t,e){return n(new g(e))})},e.decodePayloadAsBinary=function(t,n,r){"function"==typeof n&&(r=n,n=null);for(var i=t,o=[];i.byteLength>0;){for(var a=new Uint8Array(i),u=0===a[0],c="",h=1;255!==a[h];h++){if(c.length>310)return r(d,0,1);c+=a[h]}i=s(i,2+c.length),c=parseInt(c);var f=s(i,0,c);if(u)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(t){var l=new Uint8Array(f);f="";for(h=0;h<l.length;h++)f+=String.fromCharCode(l[h])}o.push(f),i=s(i,c)}var p=o.length;o.forEach(function(t,i){r(e.decodePacket(t,n,!0),i,p)})}},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(29)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(6))},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),r=0,i=n.length;r<i;r++){var o=n[r].split("=");e[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return e}},function(t,e){t.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,i=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(i=r))}),e.splice(i,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(49)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(6))},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var u,c=[],h=!1,f=-1;function l(){h&&u&&(h=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!h){var t=a(l);h=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,h=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function g(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||h||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=g,i.addListener=g,i.once=g,i.off=g,i.removeListener=g,i.removeAllListeners=g,i.emit=g,i.prependListener=g,i.prependOnceListener=g,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e,n){var r=n(31)("socket.io-parser"),i=n(0),o=n(34),s=n(12),a=n(13);function u(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=u,e.Decoder=f;var c=e.ERROR+'"encode error"';function h(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var i=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===i)return c;n+=i}return r("encoded %j as %s",t,n),n}function f(){this.reconstructor=null}function l(t){this.reconPack=t,this.buffers=[]}function p(t){return{type:e.ERROR,data:"parser error: "+t}}u.prototype.encode=function(t,n){(r("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){o.removeBlobs(t,function(t){var n=o.deconstructPacket(t),r=h(n.packet),i=n.buffers;i.unshift(r),e(i)})}(t,n):n([h(t)])},i(f.prototype),f.prototype.add=function(t){var n;if("string"==typeof t)n=function(t){var n=0,i={type:Number(t.charAt(0))};if(null==e.types[i.type])return p("unknown packet type "+i.type);if(e.BINARY_EVENT===i.type||e.BINARY_ACK===i.type){for(var o="";"-"!==t.charAt(++n)&&(o+=t.charAt(n),n!=t.length););if(o!=Number(o)||"-"!==t.charAt(n))throw new Error("Illegal attachments");i.attachments=Number(o)}if("/"===t.charAt(n+1))for(i.nsp="";++n;){var a=t.charAt(n);if(","===a)break;if(i.nsp+=a,n===t.length)break}else i.nsp="/";var u=t.charAt(n+1);if(""!==u&&Number(u)==u){for(i.id="";++n;){var a=t.charAt(n);if(null==a||Number(a)!=a){--n;break}if(i.id+=t.charAt(n),n===t.length)break}i.id=Number(i.id)}if(t.charAt(++n)){var c=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(n)),h=!1!==c&&(i.type===e.ERROR||s(c));if(!h)return p("invalid payload");i.data=c}return r("decoded %s as %j",t,i),i}(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new l(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!a(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",n))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},l.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=o.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},l.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(35),i=n(36),o=n(37);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=l(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),i=(t=a(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|p(e.length);return 0===(t=a(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):l(t,e);if("Buffer"===e.type&&o(e.data))return l(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(h(e),t=a(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function l(t,e){var n=e.length<0?0:0|p(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return I(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return q(t).length;default:if(r)return I(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:m(t,e,n,r,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,r,i){var o,s=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var h=-1;for(o=n;o<a;o++)if(c(t,o)===c(e,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===u)return h*s}else-1!==h&&(o-=o-h),h=-1}else for(n+u>a&&(n=a-u),o=n;o>=0;o--){for(var f=!0,l=0;l<u;l++)if(c(t,o+l)!==c(e,l)){f=!1;break}if(f)return o}return-1}function v(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function b(t,e,n,r){return j(I(e,t.length-n),t,n,r)}function w(t,e,n,r){return j(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function C(t,e,n,r){return w(t,e,n,r)}function M(t,e,n,r){return j(q(e),t,n,r)}function E(t,e,n,r){return j(function(t,e){for(var n,r,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function A(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function R(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,s,a,u,c=t[i],h=null,f=c>239?4:c>223?3:c>191?2:1;if(i+f<=n)switch(f){case 1:c<128&&(h=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(h=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&c)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(h=u)}null===h?(h=65533,f=1):h>65535&&(h-=65536,r.push(h>>>10&1023|55296),h=56320|1023&h),r.push(h),i+=f}return function(t){var e=t.length;if(e<=x)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=x));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return h(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var s=t[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?R(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return P(this,e,n);case"utf8":case"utf-8":return R(this,e,n);case"ascii":return F(this,e,n);case"latin1":case"binary":return T(this,e,n);case"base64":return A(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,i){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0),a=Math.min(o,s),c=this.slice(r,i),h=t.slice(e,n),f=0;f<a;++f)if(c[f]!==h[f]){o=c[f],s=h[f];break}return o<s?-1:s<o?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return y(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return y(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return v(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return C(this,t,e,n);case"base64":return M(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var x=4096;function F(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function T(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function P(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=W(t[o]);return i}function k(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function _(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function S(t,e,n,r,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function B(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function L(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function U(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function O(t,e,n,r,o){return o||U(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function D(t,e,n,r,o){return o||U(t,0,n,8),i.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var i=e-t;n=new u(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||_(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||_(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},u.prototype.readUInt8=function(t,e){return e||_(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||_(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||_(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||_(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||_(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||_(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||_(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},u.prototype.readInt8=function(t,e){return e||_(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||_(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||_(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||_(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||_(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||_(t,4,this.length),i.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||_(t,4,this.length),i.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||_(t,8,this.length),i.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||_(t,8,this.length),i.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||S(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||S(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||S(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||S(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):B(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||S(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):B(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||S(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):L(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||S(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);S(this,t,e,n,i-1,-i)}var o=0,s=1,a=0;for(this[e]=255&t;++o<n&&(s*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);S(this,t,e,n,i-1,-i)}var o=n-1,s=1,a=0;for(this[e+o]=255&t;--o>=0&&(s*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/s>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||S(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||S(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):B(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||S(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):B(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||S(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):L(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||S(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return O(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return O(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return D(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return D(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var s=u.isBuffer(t)?t:I(new u(t,r).toString()),a=s.length;for(o=0;o<n-e;++o)this[o+e]=s[o%a]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function W(t){return t<16?"0"+t.toString(16):t.toString(16)}function I(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function q(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function j(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(14))},function(t,e,n){var r=n(40);t.exports=function(t){var e=t.xdomain,n=t.xscheme,i=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!n&&i)return new XDomainRequest}catch(t){}if(!e)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},function(t,e,n){var r=n(1),i=n(0);function o(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}t.exports=o,i(o.prototype),o.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},o.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},o.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},o.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},o.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},o.prototype.onData=function(t){var e=r.decodePacket(t,this.socket.binaryType);this.onPacket(e)},o.prototype.onPacket=function(t){this.emit("packet",t)},o.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,i=t.indexOf("["),o=t.indexOf("]");-1!=i&&-1!=o&&(t=t.substring(0,i)+t.substring(i,o).replace(/:/g,";")+t.substring(o,t.length));for(var s=n.exec(t||""),a={},u=14;u--;)a[r[u]]=s[u]||"";return-1!=i&&-1!=o&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(e){t.exports=function(t){return n&&e.isBuffer(t)||r&&(t instanceof ArrayBuffer||i(t))};var n="function"==typeof e&&"function"==typeof e.isBuffer,r="function"==typeof ArrayBuffer,i=function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer}}).call(this,n(8).Buffer)},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(38),i=n(21),o=n(0),s=n(7),a=n(22),u=n(23),c=n(2)("socket.io-client:manager"),h=n(20),f=n(55),l=Object.prototype.hasOwnProperty;function p(t,e){if(!(this instanceof p))return new p(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=e.parser||s;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}t.exports=p,p.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)l.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},p.prototype.updateSocketIds=function(){for(var t in this.nsps)l.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},p.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},o(p.prototype),p.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},p.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},p.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},p.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},p.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},p.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},p.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},p.prototype.open=p.prototype.connect=function(t,e){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,i=this;this.readyState="opening",this.skipReconnect=!1;var o=a(n,"open",function(){i.onopen(),t&&t()}),s=a(n,"error",function(e){if(c("connect_error"),i.cleanup(),i.readyState="closed",i.emitAll("connect_error",e),t){var n=new Error("Connection error");n.data=e,t(n)}else i.maybeReconnectOnOpen()});if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u);var h=setTimeout(function(){c("connect attempt timed out after %d",u),o.destroy(),n.close(),n.emit("error","timeout"),i.emitAll("connect_timeout",u)},u);this.subs.push({destroy:function(){clearTimeout(h)}})}return this.subs.push(o),this.subs.push(s),this},p.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(a(t,"data",u(this,"ondata"))),this.subs.push(a(t,"ping",u(this,"onping"))),this.subs.push(a(t,"pong",u(this,"onpong"))),this.subs.push(a(t,"error",u(this,"onerror"))),this.subs.push(a(t,"close",u(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",u(this,"ondecoded")))},p.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},p.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},p.prototype.ondata=function(t){this.decoder.add(t)},p.prototype.ondecoded=function(t){this.emit("packet",t)},p.prototype.onerror=function(t){c("error",t),this.emitAll("error",t)},p.prototype.socket=function(t,e){var n=this.nsps[t];if(!n){n=new i(this,t,e),this.nsps[t]=n;var r=this;n.on("connecting",o),n.on("connect",function(){n.id=r.generateId(t)}),this.autoConnect&&o()}function o(){~h(r.connecting,n)||r.connecting.push(n)}return n},p.prototype.destroy=function(t){var e=h(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},p.prototype.packet=function(t){c("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(n){for(var r=0;r<n.length;r++)e.engine.write(n[r],t.options);e.encoding=!1,e.processPacketQueue()}))},p.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},p.prototype.cleanup=function(){c("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},p.prototype.close=p.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},p.prototype.onclose=function(t){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},p.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();c("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout(function(){t.skipReconnect||(c("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(c("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(c("reconnect success"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(n)}})}},p.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,n){var r=n(9),i=n(41),o=n(51),s=n(52);e.polling=function(t){var e=!1,n=!1,s=!1!==t.jsonp;if("undefined"!=typeof location){var a="https:"===location.protocol,u=location.port;u||(u=a?443:80),e=t.hostname!==location.hostname||u!==t.port,n=t.secure!==a}if(t.xdomain=e,t.xscheme=n,"open"in new r(t)&&!t.forceJSONP)return new i(t);if(!s)throw new Error("JSONP disabled");return new o(t)},e.websocket=s},function(t,e,n){var r=n(10),i=n(3),o=n(1),s=n(4),a=n(19),u=n(5)("engine.io-client:polling");t.exports=h;var c=null!=new(n(9))({xdomain:!1}).responseType;function h(t){var e=t&&t.forceBase64;c&&!e||(this.supportsBinary=!1),r.call(this,t)}s(h,r),h.prototype.name="polling",h.prototype.doOpen=function(){this.poll()},h.prototype.pause=function(t){var e=this;function n(){u("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||n()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||n()}))}else n()},h.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},h.prototype.onData=function(t){var e=this;u("polling got data %s",t);o.decodePayload(t,this.socket.binaryType,function(t,n,r){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},h.prototype.doClose=function(){var t=this;function e(){u("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),e()):(u("transport not open - deferring close"),this.once("open",e))},h.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")};o.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,n)})},h.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(t[this.timestampParam]=a()),this.supportsBinary||t.sid||(t.b64=1),t=i.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(n=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t}},function(t,e,n){(function(e){var r=n(43),i=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),s="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);t.exports=function t(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var i=0,a=n.length;i<a;i++)if(t(n[i]))return!0;return!1}if("function"==typeof e&&e.isBuffer&&e.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||o&&n instanceof Blob||s&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return t(n.toJSON(),!0);for(var u in n)if(Object.prototype.hasOwnProperty.call(n,u)&&t(n[u]))return!0;return!1}}).call(this,n(8).Buffer)},function(t,e,n){"use strict";var r,i="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),o=64,s={},a=0,u=0;function c(t){var e="";do{e=i[t%o]+e,t=Math.floor(t/o)}while(t>0);return e}function h(){var t=c(+new Date);return t!==r?(a=0,r=t):t+"."+c(a++)}for(;u<o;u++)s[i[u]]=u;h.encode=c,h.decode=function(t){var e=0;for(u=0;u<t.length;u++)e=e*o+s[t.charAt(u)];return e},t.exports=h},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1}},function(t,e,n){var r=n(7),i=n(0),o=n(54),s=n(22),a=n(23),u=n(2)("socket.io-client:socket"),c=n(3),h=n(18);t.exports=p;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},l=i.prototype.emit;function p(t,e,n){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}i(p.prototype),p.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[s(t,"open",a(this,"onopen")),s(t,"packet",a(this,"onpacket")),s(t,"close",a(this,"onclose"))]}},p.prototype.open=p.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},p.prototype.send=function(){var t=o(arguments);return t.unshift("message"),this.emit.apply(this,t),this},p.prototype.emit=function(t){if(f.hasOwnProperty(t))return l.apply(this,arguments),this;var e=o(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:h(e))?r.BINARY_EVENT:r.EVENT,data:e,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},p.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},p.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",t),this.packet({type:r.CONNECT,query:t})}else this.packet({type:r.CONNECT})},p.prototype.onclose=function(t){u("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},p.prototype.onpacket=function(t){var e=t.nsp===this.nsp,n=t.type===r.ERROR&&"/"===t.nsp;if(e||n)switch(t.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(t);break;case r.ACK:case r.BINARY_ACK:this.onack(t);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",t.data)}},p.prototype.onevent=function(t){var e=t.data||[];u("emitting event %j",e),null!=t.id&&(u("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?l.apply(this,e):this.receiveBuffer.push(e)},p.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var i=o(arguments);u("sending ack %j",i),e.packet({type:h(i)?r.BINARY_ACK:r.ACK,id:t,data:i})}}},p.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(u("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):u("bad ack %s",t.id)},p.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},p.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)l.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},p.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},p.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},p.prototype.close=p.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},p.prototype.compress=function(t){return this.flags.compress=t,this},p.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){t.exports=function(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}},function(t,e){var n=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return e.apply(t,r.concat(n.call(arguments)))}}},function(t,e,n){var r=n(28),i=n(7),o=n(15),s=n(2)("socket.io-client");t.exports=e=u;var a=e.managers={};function u(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,i=r(t),u=i.source,c=i.id,h=i.path,f=a[c]&&h in a[c].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||f?(s("ignoring socket cache for %s",u),n=o(u,e)):(a[c]||(s("new io instance for %s",u),a[c]=o(u,e)),n=a[c]),i.query&&!e.query&&(e.query=i.query),n.socket(i.path,e)}e.protocol=i.protocol,e.connect=u,e.Manager=n(15),e.Socket=n(21)},,,,function(t,e,n){var r=n(11),i=n(2)("socket.io-client:url");t.exports=function(t,e){var n=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(i("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),i("parse %s",t),n=r(t));n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443"));n.path=n.path||"/";var o=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+o+":"+n.port,n.href=n.protocol+"://"+o+(e&&e.port===n.port?"":":"+n.port),n}},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function s(...t){if(!s.enabled)return;const e=s,i=Number(new Date),o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;a++;const o=r.formatters[i];if("function"==typeof o){const r=t[a];n=o.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return s.namespace=t,s.enabled=r.enabled(t),s.useColors=r.useColors(),s.color=e(t),s.destroy=i,s.extend=o,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function o(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function s(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){const t=[...r.names.map(s),...r.skips.map(s).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(30),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e){var n=1e3,r=60*n,i=60*r,o=24*i,s=7*o,a=365.25*o;function u(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}t.exports=function(t,e){e=e||{};var c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var u=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return u*a;case"weeks":case"week":case"w":return u*s;case"days":case"day":case"d":return u*o;case"hours":case"hour":case"hrs":case"hr":case"h":return u*i;case"minutes":case"minute":case"mins":case"min":case"m":return u*r;case"seconds":case"second":case"secs":case"sec":case"s":return u*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return u;default:return}}(t);if("number"===c&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=o)return u(t,e,o,"day");if(e>=i)return u(t,e,i,"hour");if(e>=r)return u(t,e,r,"minute");if(e>=n)return u(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=o)return Math.round(t/o)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){(function(r){function i(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG),t}(e=t.exports=n(32)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var i=0,o=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(i++,"%c"===t&&(o=i))}),t.splice(o,0,r)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=i,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(i())}).call(this,n(6))},function(t,e,n){function r(t){var n;function r(){if(r.enabled){var t=r,i=+new Date,o=i-(n||i);t.diff=o,t.prev=n,t.curr=i,n=i;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var i=e.formatters[r];if("function"==typeof i){var o=s[u];n=i.call(t,o),s.splice(u,1),u--}return n}),e.formatArgs.call(t,s),(r.log||e.log||console.log.bind(console)).apply(t,s)}}return r.namespace=t,r.enabled=e.enabled(t),r.useColors=e.useColors(),r.color=function(t){var n,r=0;for(n in t)r=(r<<5)-r+t.charCodeAt(n),r|=0;return e.colors[Math.abs(r)%e.colors.length]}(t),r.destroy=i,"function"==typeof e.init&&e.init(r),e.instances.push(r),r}function i(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var r=("string"==typeof t?t:"").split(/[\s,]+/),i=r.length;for(n=0;n<i;n++)r[n]&&("-"===(t=r[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var o=e.instances[n];o.enabled=e.enabled(o.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(33),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){var n=1e3,r=60*n,i=60*r,o=24*i,s=365.25*o;function a(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}t.exports=function(t,e){e=e||{};var u,c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var a=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(t);if("number"===c&&!1===isNaN(t))return e.long?a(u=t,o,"day")||a(u,i,"hour")||a(u,r,"minute")||a(u,n,"second")||u+" ms":function(t){if(t>=o)return Math.round(t/o)+"d";if(t>=i)return Math.round(t/i)+"h";if(t>=r)return Math.round(t/r)+"m";if(t>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){var r=n(12),i=n(13),o=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);e.deconstructPacket=function(t){var e=[],n=t.data,o=t;return o.data=function t(e,n){if(!e)return e;if(i(e)){var o={_placeholder:!0,num:n.length};return n.push(e),o}if(r(e)){for(var s=new Array(e.length),a=0;a<e.length;a++)s[a]=t(e[a],n);return s}if("object"==typeof e&&!(e instanceof Date)){var s={};for(var u in e)s[u]=t(e[u],n);return s}return e}(n,e),o.attachments=e.length,{packet:o,buffers:e}},e.reconstructPacket=function(t,e){return t.data=function t(e,n){if(!e)return e;if(e&&e._placeholder)return n[e.num];if(r(e))for(var i=0;i<e.length;i++)e[i]=t(e[i],n);else if("object"==typeof e)for(var o in e)e[o]=t(e[o],n);return e}(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){var n=0,o=t;!function t(u,c,h){if(!u)return u;if(s&&u instanceof Blob||a&&u instanceof File){n++;var f=new FileReader;f.onload=function(){h?h[c]=this.result:o=this.result,--n||e(o)},f.readAsArrayBuffer(u)}else if(r(u))for(var l=0;l<u.length;l++)t(u[l],l,u);else if("object"==typeof u&&!i(u))for(var p in u)t(u[p],p,u)}(o),n||e(o)}},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=c(t),r=n[0],s=n[1],a=new o(function(t,e,n){return 3*(e+n)/4-n}(0,r,s)),u=0,h=s>0?r-4:r,f=0;f<h;f+=4)e=i[t.charCodeAt(f)]<<18|i[t.charCodeAt(f+1)]<<12|i[t.charCodeAt(f+2)]<<6|i[t.charCodeAt(f+3)],a[u++]=e>>16&255,a[u++]=e>>8&255,a[u++]=255&e;2===s&&(e=i[t.charCodeAt(f)]<<2|i[t.charCodeAt(f+1)]>>4,a[u++]=255&e);1===s&&(e=i[t.charCodeAt(f)]<<10|i[t.charCodeAt(f+1)]<<4|i[t.charCodeAt(f+2)]>>2,a[u++]=e>>8&255,a[u++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=0,a=n-i;s<a;s+=16383)o.push(h(t,s,s+16383>a?a:s+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)r[a]=s[a],i[s.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function h(t,e,n){for(var i,o,s=[],a=e;a<n;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,s,a=8*i-r-1,u=(1<<a)-1,c=u>>1,h=-7,f=n?i-1:0,l=n?-1:1,p=t[e+f];for(f+=l,o=p&(1<<-h)-1,p>>=-h,h+=a;h>0;o=256*o+t[e+f],f+=l,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=r;h>0;s=256*s+t[e+f],f+=l,h-=8);if(0===o)o=1-c;else{if(o===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,r),o-=c}return(p?-1:1)*s*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var s,a,u,c=8*o-i-1,h=(1<<c)-1,f=h>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,d=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+f>=1?l/u:l*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=h?(a=0,s=h):s+f>=1?(a=(e*u-1)*Math.pow(2,i),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,i),s=0));i>=8;t[n+p]=255&a,p+=d,a/=256,i-=8);for(s=s<<i|a,c+=i;c>0;t[n+p]=255&s,p+=d,s/=256,c-=8);t[n+p-d]|=128*g}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){t.exports=n(39),t.exports.parser=n(1)},function(t,e,n){var r=n(16),i=n(0),o=n(5)("engine.io-client:socket"),s=n(20),a=n(1),u=n(11),c=n(3);function h(t,e){if(!(this instanceof h))return new h(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=u(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=u(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.withCredentials=!1!==e.withCredentials,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}t.exports=h,h.priorWebsocketSuccess=!1,i(h.prototype),h.protocol=a.protocol,h.Socket=h,h.Transport=n(10),h.transports=n(16),h.parser=n(1),h.prototype.createTransport=function(t){o('creating transport "%s"',t);var e=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.query);e.EIO=a.protocol,e.transport=t;var n=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new r[t]({query:e,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,withCredentials:n.withCredentials||this.withCredentials,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0,isReactNative:this.isReactNative})},h.prototype.open=function(){var t;if(this.rememberUpgrade&&h.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout(function(){e.emit("error","No transports available")},0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},h.prototype.setTransport=function(t){o("setting transport %s",t.name);var e=this;this.transport&&(o("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",function(){e.onDrain()}).on("packet",function(t){e.onPacket(t)}).on("error",function(t){e.onError(t)}).on("close",function(){e.onClose("transport close")})},h.prototype.probe=function(t){o('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),n=!1,r=this;function i(){if(r.onlyBinaryUpgrades){var i=!this.supportsBinary&&r.transport.supportsBinary;n=n||i}n||(o('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",function(i){if(!n)if("pong"===i.type&&"probe"===i.data){if(o('probe transport "%s" pong',t),r.upgrading=!0,r.emit("upgrading",e),!e)return;h.priorWebsocketSuccess="websocket"===e.name,o('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(o("changing transport and sending upgrade packet"),l(),r.setTransport(e),e.send([{type:"upgrade"}]),r.emit("upgrade",e),e=null,r.upgrading=!1,r.flush())})}else{o('probe transport "%s" failed',t);var s=new Error("probe error");s.transport=e.name,r.emit("upgradeError",s)}}))}function s(){n||(n=!0,l(),e.close(),e=null)}function a(n){var i=new Error("probe error: "+n);i.transport=e.name,s(),o('probe transport "%s" failed because of error: %s',t,n),r.emit("upgradeError",i)}function u(){a("transport closed")}function c(){a("socket closed")}function f(t){e&&t.name!==e.name&&(o('"%s" works - aborting "%s"',t.name,e.name),s())}function l(){e.removeListener("open",i),e.removeListener("error",a),e.removeListener("close",u),r.removeListener("close",c),r.removeListener("upgrading",f)}h.priorWebsocketSuccess=!1,e.once("open",i),e.once("error",a),e.once("close",u),this.once("close",c),this.once("upgrading",f),e.open()},h.prototype.onOpen=function(){if(o("socket open"),this.readyState="open",h.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){o("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},h.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(o('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else o('packet received with socket readyState "%s"',this.readyState)},h.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},h.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){"closed"!==e.readyState&&e.onClose("ping timeout")},t||e.pingInterval+e.pingTimeout)},h.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){o("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)},t.pingInterval)},h.prototype.ping=function(){var t=this;this.sendPacket("ping",function(){t.emit("ping")})},h.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},h.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(o("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},h.prototype.write=h.prototype.send=function(t,e,n){return this.sendPacket("message",t,e,n),this},h.prototype.sendPacket=function(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var i={type:t,data:e,options:n};this.emit("packetCreate",i),this.writeBuffer.push(i),r&&this.once("flush",r),this.flush()}},h.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():e()}):this.upgrading?r():e()}function e(){t.onClose("forced close"),o("socket closing - telling transport to close"),t.transport.close()}function n(){t.removeListener("upgrade",n),t.removeListener("upgradeError",n),e()}function r(){t.once("upgrade",n),t.once("upgradeError",n)}return this},h.prototype.onError=function(t){o("socket error %j",t),h.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},h.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){o('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},h.prototype.filterUpgrades=function(t){for(var e=[],n=0,r=t.length;n<r;n++)~s(this.transports,t[n])&&e.push(t[n]);return e}},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,n){var r=n(9),i=n(17),o=n(0),s=n(4),a=n(5)("engine.io-client:polling-xhr");function u(){}function c(t){if(i.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,n=location.port;n||(n=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||n!==t.port,this.xs=t.secure!==e}}function h(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(t.exports=c,t.exports.Request=h,s(c,i),c.prototype.supportsBinary=!0,c.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.withCredentials=this.withCredentials,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new h(t)},c.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:n}),i=this;r.on("success",e),r.on("error",function(t){i.onError("xhr post error",t)}),this.sendXhr=r},c.prototype.doPoll=function(){a("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t)}),t.on("error",function(t){e.onError("xhr poll error",t)}),this.pollXhr=t},o(h.prototype),h.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new r(t),n=this;try{a("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var i in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(i)&&e.setRequestHeader(i,this.extraHeaders[i])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.withCredentials),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){n.onLoad()},e.onerror=function(){n.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");(n.supportsBinary&&"application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?n.onLoad():setTimeout(function(){n.onError("number"==typeof e.status?e.status:0)},0))},a("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout(function(){n.onError(t)},0)}"undefined"!=typeof document&&(this.index=h.requestsCount++,h.requests[this.index]=this)},h.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},h.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},h.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},h.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete h.requests[this.index],this.xhr=null}},h.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t=("application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},h.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},h.prototype.abort=function(){this.cleanup()},h.requestsCount=0,h.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",l);else if("function"==typeof addEventListener){var f="onpagehide"in self?"pagehide":"unload";addEventListener(f,l,!1)}function l(){for(var t in h.requests)h.requests.hasOwnProperty(t)&&h.requests[t].abort()}},function(t,e){t.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&e.push(r);return e}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){t.exports=function(t,e,n){var r=t.byteLength;if(e=e||0,n=n||r,t.slice)return t.slice(e,n);if(e<0&&(e+=r),n<0&&(n+=r),n>r&&(n=r),e>=r||e>=n||0===r)return new ArrayBuffer(0);for(var i=new Uint8Array(t),o=new Uint8Array(n-e),s=e,a=0;s<n;s++,a++)o[a]=i[s];return o.buffer}},function(t,e){function n(){}t.exports=function(t,e,r){var i=!1;return r=r||n,o.count=t,0===t?e():o;function o(t,n){if(o.count<=0)throw new Error("after called too many times");--o.count,t?(i=!0,e(t),e=r):0!==o.count||i||e(null,n)}}},function(t,e){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var n,r,i,o=String.fromCharCode;function s(t){for(var e,n,r=[],i=0,o=t.length;i<o;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<o?56320==(64512&(n=t.charCodeAt(i++)))?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),i--):r.push(e);return r}function a(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function u(t,e){return o(t>>e&63|128)}function c(t,e){if(0==(4294967168&t))return o(t);var n="";return 0==(4294965248&t)?n=o(t>>6&31|192):0==(4294901760&t)?(a(t,e)||(t=65533),n=o(t>>12&15|224),n+=u(t,6)):0==(4292870144&t)&&(n=o(t>>18&7|240),n+=u(t,12),n+=u(t,6)),n+=o(63&t|128)}function h(){if(i>=r)throw Error("Invalid byte index");var t=255&n[i];if(i++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function f(t){var e,o;if(i>r)throw Error("Invalid byte index");if(i==r)return!1;if(e=255&n[i],i++,0==(128&e))return e;if(192==(224&e)){if((o=(31&e)<<6|h())>=128)return o;throw Error("Invalid continuation byte")}if(224==(240&e)){if((o=(15&e)<<12|h()<<6|h())>=2048)return a(o,t)?o:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(o=(7&e)<<18|h()<<12|h()<<6|h())>=65536&&o<=1114111)return o;throw Error("Invalid UTF-8 detected")}t.exports={version:"2.1.2",encode:function(t,e){for(var n=!1!==(e=e||{}).strict,r=s(t),i=r.length,o=-1,a="";++o<i;)a+=c(r[o],n);return a},decode:function(t,e){var a=!1!==(e=e||{}).strict;n=s(t),r=n.length,i=0;for(var u,c=[];!1!==(u=f(a));)c.push(u);return function(t){for(var e,n=t.length,r=-1,i="";++r<n;)(e=t[r])>65535&&(i+=o((e-=65536)>>>10&1023|55296),e=56320|1023&e),i+=o(e);return i}(c)}}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<t.length;r++)n[t.charCodeAt(r)]=r;e.encode=function(e){var n,r=new Uint8Array(e),i=r.length,o="";for(n=0;n<i;n+=3)o+=t[r[n]>>2],o+=t[(3&r[n])<<4|r[n+1]>>4],o+=t[(15&r[n+1])<<2|r[n+2]>>6],o+=t[63&r[n+2]];return i%3==2?o=o.substring(0,o.length-1)+"=":i%3==1&&(o=o.substring(0,o.length-2)+"=="),o},e.decode=function(t){var e,r,i,o,s,a=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var h=new ArrayBuffer(a),f=new Uint8Array(h);for(e=0;e<u;e+=4)r=n[t.charCodeAt(e)],i=n[t.charCodeAt(e+1)],o=n[t.charCodeAt(e+2)],s=n[t.charCodeAt(e+3)],f[c++]=r<<2|i>>4,f[c++]=(15&i)<<4|o>>2,f[c++]=(3&o)<<6|63&s;return h}}()},function(t,e){var n=void 0!==n?n:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),i=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),o=n&&n.prototype.append&&n.prototype.getBlob;function s(t){return t.map(function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var n=new Uint8Array(t.byteLength);n.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=n.buffer}return e}return t})}function a(t,e){e=e||{};var r=new n;return s(t).forEach(function(t){r.append(t)}),e.type?r.getBlob(e.type):r.getBlob()}function u(t,e){return new Blob(s(t),e||{})}"undefined"!=typeof Blob&&(a.prototype=Blob.prototype,u.prototype=Blob.prototype),t.exports=r?i?Blob:u:o?a:void 0},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function s(...t){if(!s.enabled)return;const e=s,i=Number(new Date),o=i-(n||i);e.diff=o,e.prev=n,e.curr=i,n=i,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,i)=>{if("%%"===n)return n;a++;const o=r.formatters[i];if("function"==typeof o){const r=t[a];n=o.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return s.namespace=t,s.enabled=r.enabled(t),s.useColors=r.useColors(),s.color=e(t),s.destroy=i,s.extend=o,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function i(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function o(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function s(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){const t=[...r.names.map(s),...r.skips.map(s).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),i=n.length;for(e=0;e<i;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(50),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e){var n=1e3,r=60*n,i=60*r,o=24*i,s=7*o,a=365.25*o;function u(t,e,n,r){var i=e>=1.5*n;return Math.round(t/n)+" "+r+(i?"s":"")}t.exports=function(t,e){e=e||{};var c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var u=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return u*a;case"weeks":case"week":case"w":return u*s;case"days":case"day":case"d":return u*o;case"hours":case"hour":case"hrs":case"hr":case"h":return u*i;case"minutes":case"minute":case"mins":case"min":case"m":return u*r;case"seconds":case"second":case"secs":case"sec":case"s":return u*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return u;default:return}}(t);if("number"===c&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=o)return u(t,e,o,"day");if(e>=i)return u(t,e,i,"hour");if(e>=r)return u(t,e,r,"minute");if(e>=n)return u(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=o)return Math.round(t/o)+"d";if(e>=i)return Math.round(t/i)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){(function(e){var r=n(17),i=n(4);t.exports=h;var o,s=/\n/g,a=/\\n/g;function u(){}function c(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:{}}function h(t){if(r.call(this,t),this.query=this.query||{},!o){var e=c();o=e.___eio=e.___eio||[]}this.index=o.length;var n=this;o.push(function(t){n.onData(t)}),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",function(){n.script&&(n.script.onerror=u)},!1)}i(h,r),h.prototype.supportsBinary=!1,h.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},h.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)},100)},h.prototype.doWrite=function(t,e){var n=this;if(!this.form){var r,i=document.createElement("form"),o=document.createElement("textarea"),u=this.iframeId="eio_iframe_"+this.index;i.className="socketio",i.style.position="absolute",i.style.top="-1000px",i.style.left="-1000px",i.target=u,i.method="POST",i.setAttribute("accept-charset","utf-8"),o.name="d",i.appendChild(o),document.body.appendChild(i),this.form=i,this.area=o}function c(){h(),e()}function h(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(t){n.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(t)}catch(t){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),h(),t=t.replace(a,"\\\n"),this.area.value=t.replace(s,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&c()}:this.iframe.onload=c}}).call(this,n(14))},function(t,e,n){(function(e){var r,i,o=n(10),s=n(1),a=n(3),u=n(4),c=n(19),h=n(5)("engine.io-client:websocket");if("undefined"!=typeof WebSocket?r=WebSocket:"undefined"!=typeof self&&(r=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{i=n(53)}catch(t){}var f=r||i;function l(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=r&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(f=i),o.call(this,t)}t.exports=l,u(l,o),l.prototype.name="websocket",l.prototype.supportsBinary=!0,l.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new f(t,e):new f(t):new f(t,e,n)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},l.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},l.prototype.write=function(t){var n=this;this.writable=!1;for(var r=t.length,i=0,o=r;i<o;i++)!function(t){s.encodePacket(t,n.supportsBinary,function(i){if(!n.usingBrowserWebSocket){var o={};if(t.options&&(o.compress=t.options.compress),n.perMessageDeflate)("string"==typeof i?e.byteLength(i):i.length)<n.perMessageDeflate.threshold&&(o.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(i):n.ws.send(i,o)}catch(t){h("websocket closed before onclose event")}--r||a()})}(t[i]);function a(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},l.prototype.onClose=function(){o.prototype.onClose.call(this)},l.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},l.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||(t.b64=1),(t=a.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t},l.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===l.prototype.name)}}).call(this,n(8).Buffer)},function(t,e){},function(t,e){t.exports=function(t,e){for(var n=[],r=(e=e||0)||0;r<t.length;r++)n[r-e]=t[r];return n}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}},function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"create",function(){return h}),n.d(r,"clone",function(){return f}),n.d(r,"copy",function(){return l}),n.d(r,"fromValues",function(){return p}),n.d(r,"set",function(){return d}),n.d(r,"identity",function(){return g}),n.d(r,"transpose",function(){return y}),n.d(r,"invert",function(){return m}),n.d(r,"adjoint",function(){return v}),n.d(r,"determinant",function(){return b}),n.d(r,"multiply",function(){return w}),n.d(r,"translate",function(){return C}),n.d(r,"scale",function(){return M}),n.d(r,"rotate",function(){return E}),n.d(r,"rotateX",function(){return A}),n.d(r,"rotateY",function(){return R}),n.d(r,"rotateZ",function(){return x}),n.d(r,"fromTranslation",function(){return F}),n.d(r,"fromScaling",function(){return T}),n.d(r,"fromRotation",function(){return P}),n.d(r,"fromXRotation",function(){return k}),n.d(r,"fromYRotation",function(){return _}),n.d(r,"fromZRotation",function(){return S}),n.d(r,"fromRotationTranslation",function(){return B}),n.d(r,"fromQuat2",function(){return L}),n.d(r,"getTranslation",function(){return U}),n.d(r,"getScaling",function(){return O}),n.d(r,"getRotation",function(){return D}),n.d(r,"fromRotationTranslationScale",function(){return N}),n.d(r,"fromRotationTranslationScaleOrigin",function(){return W}),n.d(r,"fromQuat",function(){return I}),n.d(r,"frustum",function(){return q}),n.d(r,"perspective",function(){return j}),n.d(r,"perspectiveFromFieldOfView",function(){return Y}),n.d(r,"ortho",function(){return G}),n.d(r,"lookAt",function(){return z}),n.d(r,"targetTo",function(){return V}),n.d(r,"str",function(){return H}),n.d(r,"frob",function(){return X}),n.d(r,"add",function(){return K}),n.d(r,"subtract",function(){return J}),n.d(r,"multiplyScalar",function(){return $}),n.d(r,"multiplyScalarAndAdd",function(){return Z}),n.d(r,"exactEquals",function(){return Q}),n.d(r,"equals",function(){return tt}),n.d(r,"mul",function(){return et}),n.d(r,"sub",function(){return nt});var i={};n.r(i),n.d(i,"create",function(){return rt}),n.d(i,"clone",function(){return it}),n.d(i,"length",function(){return ot}),n.d(i,"fromValues",function(){return st}),n.d(i,"copy",function(){return at}),n.d(i,"set",function(){return ut}),n.d(i,"add",function(){return ct}),n.d(i,"subtract",function(){return ht}),n.d(i,"multiply",function(){return ft}),n.d(i,"divide",function(){return lt}),n.d(i,"ceil",function(){return pt}),n.d(i,"floor",function(){return dt}),n.d(i,"min",function(){return gt}),n.d(i,"max",function(){return yt}),n.d(i,"round",function(){return mt}),n.d(i,"scale",function(){return vt}),n.d(i,"scaleAndAdd",function(){return bt}),n.d(i,"distance",function(){return wt}),n.d(i,"squaredDistance",function(){return Ct}),n.d(i,"squaredLength",function(){return Mt}),n.d(i,"negate",function(){return Et}),n.d(i,"inverse",function(){return At}),n.d(i,"normalize",function(){return Rt}),n.d(i,"dot",function(){return xt}),n.d(i,"cross",function(){return Ft}),n.d(i,"lerp",function(){return Tt}),n.d(i,"hermite",function(){return Pt}),n.d(i,"bezier",function(){return kt}),n.d(i,"random",function(){return _t}),n.d(i,"transformMat4",function(){return St}),n.d(i,"transformMat3",function(){return Bt}),n.d(i,"transformQuat",function(){return Lt}),n.d(i,"rotateX",function(){return Ut}),n.d(i,"rotateY",function(){return Ot}),n.d(i,"rotateZ",function(){return Dt}),n.d(i,"angle",function(){return Nt}),n.d(i,"zero",function(){return Wt}),n.d(i,"str",function(){return It}),n.d(i,"exactEquals",function(){return qt}),n.d(i,"equals",function(){return jt}),n.d(i,"sub",function(){return Gt}),n.d(i,"mul",function(){return zt}),n.d(i,"div",function(){return Vt}),n.d(i,"dist",function(){return Ht}),n.d(i,"sqrDist",function(){return Xt}),n.d(i,"len",function(){return Kt}),n.d(i,"sqrLen",function(){return Jt}),n.d(i,"forEach",function(){return $t});var o={};n.r(o),n.d(o,"create",function(){return te}),n.d(o,"identity",function(){return ee}),n.d(o,"setAxisAngle",function(){return ne}),n.d(o,"getAxisAngle",function(){return re}),n.d(o,"getAngle",function(){return ie}),n.d(o,"multiply",function(){return oe}),n.d(o,"rotateX",function(){return se}),n.d(o,"rotateY",function(){return ae}),n.d(o,"rotateZ",function(){return ue}),n.d(o,"calculateW",function(){return ce}),n.d(o,"exp",function(){return he}),n.d(o,"ln",function(){return fe}),n.d(o,"pow",function(){return le}),n.d(o,"slerp",function(){return pe}),n.d(o,"random",function(){return de}),n.d(o,"invert",function(){return ge}),n.d(o,"conjugate",function(){return ye}),n.d(o,"fromMat3",function(){return me}),n.d(o,"fromEuler",function(){return ve}),n.d(o,"str",function(){return be}),n.d(o,"clone",function(){return Fe}),n.d(o,"fromValues",function(){return Te}),n.d(o,"copy",function(){return Pe}),n.d(o,"set",function(){return ke}),n.d(o,"add",function(){return _e}),n.d(o,"mul",function(){return Se}),n.d(o,"scale",function(){return Be}),n.d(o,"dot",function(){return Le}),n.d(o,"lerp",function(){return Ue}),n.d(o,"length",function(){return Oe}),n.d(o,"len",function(){return De}),n.d(o,"squaredLength",function(){return Ne}),n.d(o,"sqrLen",function(){return We}),n.d(o,"normalize",function(){return Ie}),n.d(o,"exactEquals",function(){return qe}),n.d(o,"equals",function(){return je}),n.d(o,"rotationTo",function(){return Ye}),n.d(o,"sqlerp",function(){return Ge}),n.d(o,"setAxes",function(){return ze});var s={};n.r(s),n.d(s,"create",function(){return Ve}),n.d(s,"clone",function(){return He}),n.d(s,"fromValues",function(){return Xe}),n.d(s,"copy",function(){return Ke}),n.d(s,"set",function(){return Je}),n.d(s,"add",function(){return $e}),n.d(s,"subtract",function(){return Ze}),n.d(s,"multiply",function(){return Qe}),n.d(s,"divide",function(){return tn}),n.d(s,"ceil",function(){return en}),n.d(s,"floor",function(){return nn}),n.d(s,"min",function(){return rn}),n.d(s,"max",function(){return on}),n.d(s,"round",function(){return sn}),n.d(s,"scale",function(){return an}),n.d(s,"scaleAndAdd",function(){return un}),n.d(s,"distance",function(){return cn}),n.d(s,"squaredDistance",function(){return hn}),n.d(s,"length",function(){return fn}),n.d(s,"squaredLength",function(){return ln}),n.d(s,"negate",function(){return pn}),n.d(s,"inverse",function(){return dn}),n.d(s,"normalize",function(){return gn}),n.d(s,"dot",function(){return yn}),n.d(s,"cross",function(){return mn}),n.d(s,"lerp",function(){return vn}),n.d(s,"random",function(){return bn}),n.d(s,"transformMat2",function(){return wn}),n.d(s,"transformMat2d",function(){return Cn}),n.d(s,"transformMat3",function(){return Mn}),n.d(s,"transformMat4",function(){return En}),n.d(s,"rotate",function(){return An}),n.d(s,"angle",function(){return Rn}),n.d(s,"zero",function(){return xn}),n.d(s,"str",function(){return Fn}),n.d(s,"exactEquals",function(){return Tn}),n.d(s,"equals",function(){return Pn}),n.d(s,"len",function(){return kn}),n.d(s,"sub",function(){return _n}),n.d(s,"mul",function(){return Sn}),n.d(s,"div",function(){return Bn}),n.d(s,"dist",function(){return Ln}),n.d(s,"sqrDist",function(){return Un}),n.d(s,"sqrLen",function(){return On}),n.d(s,"forEach",function(){return Dn});var a=1e-6,u="undefined"!=typeof Float32Array?Float32Array:Array,c=Math.random;Math.PI;function h(){var t=new u(16);return u!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function f(t){var e=new u(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function l(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function p(t,e,n,r,i,o,s,a,c,h,f,l,p,d,g,y){var m=new u(16);return m[0]=t,m[1]=e,m[2]=n,m[3]=r,m[4]=i,m[5]=o,m[6]=s,m[7]=a,m[8]=c,m[9]=h,m[10]=f,m[11]=l,m[12]=p,m[13]=d,m[14]=g,m[15]=y,m}function d(t,e,n,r,i,o,s,a,u,c,h,f,l,p,d,g,y){return t[0]=e,t[1]=n,t[2]=r,t[3]=i,t[4]=o,t[5]=s,t[6]=a,t[7]=u,t[8]=c,t[9]=h,t[10]=f,t[11]=l,t[12]=p,t[13]=d,t[14]=g,t[15]=y,t}function g(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function y(t,e){if(t===e){var n=e[1],r=e[2],i=e[3],o=e[6],s=e[7],a=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=o,t[11]=e[14],t[12]=i,t[13]=s,t[14]=a}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function m(t,e){var n=e[0],r=e[1],i=e[2],o=e[3],s=e[4],a=e[5],u=e[6],c=e[7],h=e[8],f=e[9],l=e[10],p=e[11],d=e[12],g=e[13],y=e[14],m=e[15],v=n*a-r*s,b=n*u-i*s,w=n*c-o*s,C=r*u-i*a,M=r*c-o*a,E=i*c-o*u,A=h*g-f*d,R=h*y-l*d,x=h*m-p*d,F=f*y-l*g,T=f*m-p*g,P=l*m-p*y,k=v*P-b*T+w*F+C*x-M*R+E*A;return k?(k=1/k,t[0]=(a*P-u*T+c*F)*k,t[1]=(i*T-r*P-o*F)*k,t[2]=(g*E-y*M+m*C)*k,t[3]=(l*M-f*E-p*C)*k,t[4]=(u*x-s*P-c*R)*k,t[5]=(n*P-i*x+o*R)*k,t[6]=(y*w-d*E-m*b)*k,t[7]=(h*E-l*w+p*b)*k,t[8]=(s*T-a*x+c*A)*k,t[9]=(r*x-n*T-o*A)*k,t[10]=(d*M-g*w+m*v)*k,t[11]=(f*w-h*M-p*v)*k,t[12]=(a*R-s*F-u*A)*k,t[13]=(n*F-r*R+i*A)*k,t[14]=(g*b-d*C-y*v)*k,t[15]=(h*C-f*b+l*v)*k,t):null}function v(t,e){var n=e[0],r=e[1],i=e[2],o=e[3],s=e[4],a=e[5],u=e[6],c=e[7],h=e[8],f=e[9],l=e[10],p=e[11],d=e[12],g=e[13],y=e[14],m=e[15];return t[0]=a*(l*m-p*y)-f*(u*m-c*y)+g*(u*p-c*l),t[1]=-(r*(l*m-p*y)-f*(i*m-o*y)+g*(i*p-o*l)),t[2]=r*(u*m-c*y)-a*(i*m-o*y)+g*(i*c-o*u),t[3]=-(r*(u*p-c*l)-a*(i*p-o*l)+f*(i*c-o*u)),t[4]=-(s*(l*m-p*y)-h*(u*m-c*y)+d*(u*p-c*l)),t[5]=n*(l*m-p*y)-h*(i*m-o*y)+d*(i*p-o*l),t[6]=-(n*(u*m-c*y)-s*(i*m-o*y)+d*(i*c-o*u)),t[7]=n*(u*p-c*l)-s*(i*p-o*l)+h*(i*c-o*u),t[8]=s*(f*m-p*g)-h*(a*m-c*g)+d*(a*p-c*f),t[9]=-(n*(f*m-p*g)-h*(r*m-o*g)+d*(r*p-o*f)),t[10]=n*(a*m-c*g)-s*(r*m-o*g)+d*(r*c-o*a),t[11]=-(n*(a*p-c*f)-s*(r*p-o*f)+h*(r*c-o*a)),t[12]=-(s*(f*y-l*g)-h*(a*y-u*g)+d*(a*l-u*f)),t[13]=n*(f*y-l*g)-h*(r*y-i*g)+d*(r*l-i*f),t[14]=-(n*(a*y-u*g)-s*(r*y-i*g)+d*(r*u-i*a)),t[15]=n*(a*l-u*f)-s*(r*l-i*f)+h*(r*u-i*a),t}function b(t){var e=t[0],n=t[1],r=t[2],i=t[3],o=t[4],s=t[5],a=t[6],u=t[7],c=t[8],h=t[9],f=t[10],l=t[11],p=t[12],d=t[13],g=t[14],y=t[15];return(e*s-n*o)*(f*y-l*g)-(e*a-r*o)*(h*y-l*d)+(e*u-i*o)*(h*g-f*d)+(n*a-r*s)*(c*y-l*p)-(n*u-i*s)*(c*g-f*p)+(r*u-i*a)*(c*d-h*p)}function w(t,e,n){var r=e[0],i=e[1],o=e[2],s=e[3],a=e[4],u=e[5],c=e[6],h=e[7],f=e[8],l=e[9],p=e[10],d=e[11],g=e[12],y=e[13],m=e[14],v=e[15],b=n[0],w=n[1],C=n[2],M=n[3];return t[0]=b*r+w*a+C*f+M*g,t[1]=b*i+w*u+C*l+M*y,t[2]=b*o+w*c+C*p+M*m,t[3]=b*s+w*h+C*d+M*v,b=n[4],w=n[5],C=n[6],M=n[7],t[4]=b*r+w*a+C*f+M*g,t[5]=b*i+w*u+C*l+M*y,t[6]=b*o+w*c+C*p+M*m,t[7]=b*s+w*h+C*d+M*v,b=n[8],w=n[9],C=n[10],M=n[11],t[8]=b*r+w*a+C*f+M*g,t[9]=b*i+w*u+C*l+M*y,t[10]=b*o+w*c+C*p+M*m,t[11]=b*s+w*h+C*d+M*v,b=n[12],w=n[13],C=n[14],M=n[15],t[12]=b*r+w*a+C*f+M*g,t[13]=b*i+w*u+C*l+M*y,t[14]=b*o+w*c+C*p+M*m,t[15]=b*s+w*h+C*d+M*v,t}function C(t,e,n){var r,i,o,s,a,u,c,h,f,l,p,d,g=n[0],y=n[1],m=n[2];return e===t?(t[12]=e[0]*g+e[4]*y+e[8]*m+e[12],t[13]=e[1]*g+e[5]*y+e[9]*m+e[13],t[14]=e[2]*g+e[6]*y+e[10]*m+e[14],t[15]=e[3]*g+e[7]*y+e[11]*m+e[15]):(r=e[0],i=e[1],o=e[2],s=e[3],a=e[4],u=e[5],c=e[6],h=e[7],f=e[8],l=e[9],p=e[10],d=e[11],t[0]=r,t[1]=i,t[2]=o,t[3]=s,t[4]=a,t[5]=u,t[6]=c,t[7]=h,t[8]=f,t[9]=l,t[10]=p,t[11]=d,t[12]=r*g+a*y+f*m+e[12],t[13]=i*g+u*y+l*m+e[13],t[14]=o*g+c*y+p*m+e[14],t[15]=s*g+h*y+d*m+e[15]),t}function M(t,e,n){var r=n[0],i=n[1],o=n[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*i,t[5]=e[5]*i,t[6]=e[6]*i,t[7]=e[7]*i,t[8]=e[8]*o,t[9]=e[9]*o,t[10]=e[10]*o,t[11]=e[11]*o,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function E(t,e,n,r){var i,o,s,u,c,h,f,l,p,d,g,y,m,v,b,w,C,M,E,A,R,x,F,T,P=r[0],k=r[1],_=r[2],S=Math.hypot(P,k,_);return S<a?null:(P*=S=1/S,k*=S,_*=S,i=Math.sin(n),s=1-(o=Math.cos(n)),u=e[0],c=e[1],h=e[2],f=e[3],l=e[4],p=e[5],d=e[6],g=e[7],y=e[8],m=e[9],v=e[10],b=e[11],w=P*P*s+o,C=k*P*s+_*i,M=_*P*s-k*i,E=P*k*s-_*i,A=k*k*s+o,R=_*k*s+P*i,x=P*_*s+k*i,F=k*_*s-P*i,T=_*_*s+o,t[0]=u*w+l*C+y*M,t[1]=c*w+p*C+m*M,t[2]=h*w+d*C+v*M,t[3]=f*w+g*C+b*M,t[4]=u*E+l*A+y*R,t[5]=c*E+p*A+m*R,t[6]=h*E+d*A+v*R,t[7]=f*E+g*A+b*R,t[8]=u*x+l*F+y*T,t[9]=c*x+p*F+m*T,t[10]=h*x+d*F+v*T,t[11]=f*x+g*F+b*T,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function A(t,e,n){var r=Math.sin(n),i=Math.cos(n),o=e[4],s=e[5],a=e[6],u=e[7],c=e[8],h=e[9],f=e[10],l=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=o*i+c*r,t[5]=s*i+h*r,t[6]=a*i+f*r,t[7]=u*i+l*r,t[8]=c*i-o*r,t[9]=h*i-s*r,t[10]=f*i-a*r,t[11]=l*i-u*r,t}function R(t,e,n){var r=Math.sin(n),i=Math.cos(n),o=e[0],s=e[1],a=e[2],u=e[3],c=e[8],h=e[9],f=e[10],l=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*i-c*r,t[1]=s*i-h*r,t[2]=a*i-f*r,t[3]=u*i-l*r,t[8]=o*r+c*i,t[9]=s*r+h*i,t[10]=a*r+f*i,t[11]=u*r+l*i,t}function x(t,e,n){var r=Math.sin(n),i=Math.cos(n),o=e[0],s=e[1],a=e[2],u=e[3],c=e[4],h=e[5],f=e[6],l=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=o*i+c*r,t[1]=s*i+h*r,t[2]=a*i+f*r,t[3]=u*i+l*r,t[4]=c*i-o*r,t[5]=h*i-s*r,t[6]=f*i-a*r,t[7]=l*i-u*r,t}function F(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function T(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function P(t,e,n){var r,i,o,s=n[0],u=n[1],c=n[2],h=Math.hypot(s,u,c);return h<a?null:(s*=h=1/h,u*=h,c*=h,r=Math.sin(e),o=1-(i=Math.cos(e)),t[0]=s*s*o+i,t[1]=u*s*o+c*r,t[2]=c*s*o-u*r,t[3]=0,t[4]=s*u*o-c*r,t[5]=u*u*o+i,t[6]=c*u*o+s*r,t[7]=0,t[8]=s*c*o+u*r,t[9]=u*c*o-s*r,t[10]=c*c*o+i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function k(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function _(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function S(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function B(t,e,n){var r=e[0],i=e[1],o=e[2],s=e[3],a=r+r,u=i+i,c=o+o,h=r*a,f=r*u,l=r*c,p=i*u,d=i*c,g=o*c,y=s*a,m=s*u,v=s*c;return t[0]=1-(p+g),t[1]=f+v,t[2]=l-m,t[3]=0,t[4]=f-v,t[5]=1-(h+g),t[6]=d+y,t[7]=0,t[8]=l+m,t[9]=d-y,t[10]=1-(h+p),t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function L(t,e){var n=new u(3),r=-e[0],i=-e[1],o=-e[2],s=e[3],a=e[4],c=e[5],h=e[6],f=e[7],l=r*r+i*i+o*o+s*s;return l>0?(n[0]=2*(a*s+f*r+c*o-h*i)/l,n[1]=2*(c*s+f*i+h*r-a*o)/l,n[2]=2*(h*s+f*o+a*i-c*r)/l):(n[0]=2*(a*s+f*r+c*o-h*i),n[1]=2*(c*s+f*i+h*r-a*o),n[2]=2*(h*s+f*o+a*i-c*r)),B(t,e,n),t}function U(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function O(t,e){var n=e[0],r=e[1],i=e[2],o=e[4],s=e[5],a=e[6],u=e[8],c=e[9],h=e[10];return t[0]=Math.hypot(n,r,i),t[1]=Math.hypot(o,s,a),t[2]=Math.hypot(u,c,h),t}function D(t,e){var n=new u(3);O(n,e);var r=1/n[0],i=1/n[1],o=1/n[2],s=e[0]*r,a=e[1]*i,c=e[2]*o,h=e[4]*r,f=e[5]*i,l=e[6]*o,p=e[8]*r,d=e[9]*i,g=e[10]*o,y=s+f+g,m=0;return y>0?(m=2*Math.sqrt(y+1),t[3]=.25*m,t[0]=(l-d)/m,t[1]=(p-c)/m,t[2]=(a-h)/m):s>f&&s>g?(m=2*Math.sqrt(1+s-f-g),t[3]=(l-d)/m,t[0]=.25*m,t[1]=(a+h)/m,t[2]=(p+c)/m):f>g?(m=2*Math.sqrt(1+f-s-g),t[3]=(p-c)/m,t[0]=(a+h)/m,t[1]=.25*m,t[2]=(l+d)/m):(m=2*Math.sqrt(1+g-s-f),t[3]=(a-h)/m,t[0]=(p+c)/m,t[1]=(l+d)/m,t[2]=.25*m),t}function N(t,e,n,r){var i=e[0],o=e[1],s=e[2],a=e[3],u=i+i,c=o+o,h=s+s,f=i*u,l=i*c,p=i*h,d=o*c,g=o*h,y=s*h,m=a*u,v=a*c,b=a*h,w=r[0],C=r[1],M=r[2];return t[0]=(1-(d+y))*w,t[1]=(l+b)*w,t[2]=(p-v)*w,t[3]=0,t[4]=(l-b)*C,t[5]=(1-(f+y))*C,t[6]=(g+m)*C,t[7]=0,t[8]=(p+v)*M,t[9]=(g-m)*M,t[10]=(1-(f+d))*M,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function W(t,e,n,r,i){var o=e[0],s=e[1],a=e[2],u=e[3],c=o+o,h=s+s,f=a+a,l=o*c,p=o*h,d=o*f,g=s*h,y=s*f,m=a*f,v=u*c,b=u*h,w=u*f,C=r[0],M=r[1],E=r[2],A=i[0],R=i[1],x=i[2],F=(1-(g+m))*C,T=(p+w)*C,P=(d-b)*C,k=(p-w)*M,_=(1-(l+m))*M,S=(y+v)*M,B=(d+b)*E,L=(y-v)*E,U=(1-(l+g))*E;return t[0]=F,t[1]=T,t[2]=P,t[3]=0,t[4]=k,t[5]=_,t[6]=S,t[7]=0,t[8]=B,t[9]=L,t[10]=U,t[11]=0,t[12]=n[0]+A-(F*A+k*R+B*x),t[13]=n[1]+R-(T*A+_*R+L*x),t[14]=n[2]+x-(P*A+S*R+U*x),t[15]=1,t}function I(t,e){var n=e[0],r=e[1],i=e[2],o=e[3],s=n+n,a=r+r,u=i+i,c=n*s,h=r*s,f=r*a,l=i*s,p=i*a,d=i*u,g=o*s,y=o*a,m=o*u;return t[0]=1-f-d,t[1]=h+m,t[2]=l-y,t[3]=0,t[4]=h-m,t[5]=1-c-d,t[6]=p+g,t[7]=0,t[8]=l+y,t[9]=p-g,t[10]=1-c-f,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function q(t,e,n,r,i,o,s){var a=1/(n-e),u=1/(i-r),c=1/(o-s);return t[0]=2*o*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*o*u,t[6]=0,t[7]=0,t[8]=(n+e)*a,t[9]=(i+r)*u,t[10]=(s+o)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=s*o*2*c,t[15]=0,t}function j(t,e,n,r,i){var o,s=1/Math.tan(e/2);return t[0]=s/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=i&&i!==1/0?(o=1/(r-i),t[10]=(i+r)*o,t[14]=2*i*r*o):(t[10]=-1,t[14]=-2*r),t}function Y(t,e,n,r){var i=Math.tan(e.upDegrees*Math.PI/180),o=Math.tan(e.downDegrees*Math.PI/180),s=Math.tan(e.leftDegrees*Math.PI/180),a=Math.tan(e.rightDegrees*Math.PI/180),u=2/(s+a),c=2/(i+o);return t[0]=u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(s-a)*u*.5,t[9]=(i-o)*c*.5,t[10]=r/(n-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*n/(n-r),t[15]=0,t}function G(t,e,n,r,i,o,s){var a=1/(e-n),u=1/(r-i),c=1/(o-s);return t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(e+n)*a,t[13]=(i+r)*u,t[14]=(s+o)*c,t[15]=1,t}function z(t,e,n,r){var i,o,s,u,c,h,f,l,p,d,y=e[0],m=e[1],v=e[2],b=r[0],w=r[1],C=r[2],M=n[0],E=n[1],A=n[2];return Math.abs(y-M)<a&&Math.abs(m-E)<a&&Math.abs(v-A)<a?g(t):(f=y-M,l=m-E,p=v-A,i=w*(p*=d=1/Math.hypot(f,l,p))-C*(l*=d),o=C*(f*=d)-b*p,s=b*l-w*f,(d=Math.hypot(i,o,s))?(i*=d=1/d,o*=d,s*=d):(i=0,o=0,s=0),u=l*s-p*o,c=p*i-f*s,h=f*o-l*i,(d=Math.hypot(u,c,h))?(u*=d=1/d,c*=d,h*=d):(u=0,c=0,h=0),t[0]=i,t[1]=u,t[2]=f,t[3]=0,t[4]=o,t[5]=c,t[6]=l,t[7]=0,t[8]=s,t[9]=h,t[10]=p,t[11]=0,t[12]=-(i*y+o*m+s*v),t[13]=-(u*y+c*m+h*v),t[14]=-(f*y+l*m+p*v),t[15]=1,t)}function V(t,e,n,r){var i=e[0],o=e[1],s=e[2],a=r[0],u=r[1],c=r[2],h=i-n[0],f=o-n[1],l=s-n[2],p=h*h+f*f+l*l;p>0&&(h*=p=1/Math.sqrt(p),f*=p,l*=p);var d=u*l-c*f,g=c*h-a*l,y=a*f-u*h;return(p=d*d+g*g+y*y)>0&&(d*=p=1/Math.sqrt(p),g*=p,y*=p),t[0]=d,t[1]=g,t[2]=y,t[3]=0,t[4]=f*y-l*g,t[5]=l*d-h*y,t[6]=h*g-f*d,t[7]=0,t[8]=h,t[9]=f,t[10]=l,t[11]=0,t[12]=i,t[13]=o,t[14]=s,t[15]=1,t}function H(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function X(t){return Math.hypot(t[0],t[1],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function K(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t[9]=e[9]+n[9],t[10]=e[10]+n[10],t[11]=e[11]+n[11],t[12]=e[12]+n[12],t[13]=e[13]+n[13],t[14]=e[14]+n[14],t[15]=e[15]+n[15],t}function J(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t[9]=e[9]-n[9],t[10]=e[10]-n[10],t[11]=e[11]-n[11],t[12]=e[12]-n[12],t[13]=e[13]-n[13],t[14]=e[14]-n[14],t[15]=e[15]-n[15],t}function $(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12]*n,t[13]=e[13]*n,t[14]=e[14]*n,t[15]=e[15]*n,t}function Z(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t[4]=e[4]+n[4]*r,t[5]=e[5]+n[5]*r,t[6]=e[6]+n[6]*r,t[7]=e[7]+n[7]*r,t[8]=e[8]+n[8]*r,t[9]=e[9]+n[9]*r,t[10]=e[10]+n[10]*r,t[11]=e[11]+n[11]*r,t[12]=e[12]+n[12]*r,t[13]=e[13]+n[13]*r,t[14]=e[14]+n[14]*r,t[15]=e[15]+n[15]*r,t}function Q(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function tt(t,e){var n=t[0],r=t[1],i=t[2],o=t[3],s=t[4],u=t[5],c=t[6],h=t[7],f=t[8],l=t[9],p=t[10],d=t[11],g=t[12],y=t[13],m=t[14],v=t[15],b=e[0],w=e[1],C=e[2],M=e[3],E=e[4],A=e[5],R=e[6],x=e[7],F=e[8],T=e[9],P=e[10],k=e[11],_=e[12],S=e[13],B=e[14],L=e[15];return Math.abs(n-b)<=a*Math.max(1,Math.abs(n),Math.abs(b))&&Math.abs(r-w)<=a*Math.max(1,Math.abs(r),Math.abs(w))&&Math.abs(i-C)<=a*Math.max(1,Math.abs(i),Math.abs(C))&&Math.abs(o-M)<=a*Math.max(1,Math.abs(o),Math.abs(M))&&Math.abs(s-E)<=a*Math.max(1,Math.abs(s),Math.abs(E))&&Math.abs(u-A)<=a*Math.max(1,Math.abs(u),Math.abs(A))&&Math.abs(c-R)<=a*Math.max(1,Math.abs(c),Math.abs(R))&&Math.abs(h-x)<=a*Math.max(1,Math.abs(h),Math.abs(x))&&Math.abs(f-F)<=a*Math.max(1,Math.abs(f),Math.abs(F))&&Math.abs(l-T)<=a*Math.max(1,Math.abs(l),Math.abs(T))&&Math.abs(p-P)<=a*Math.max(1,Math.abs(p),Math.abs(P))&&Math.abs(d-k)<=a*Math.max(1,Math.abs(d),Math.abs(k))&&Math.abs(g-_)<=a*Math.max(1,Math.abs(g),Math.abs(_))&&Math.abs(y-S)<=a*Math.max(1,Math.abs(y),Math.abs(S))&&Math.abs(m-B)<=a*Math.max(1,Math.abs(m),Math.abs(B))&&Math.abs(v-L)<=a*Math.max(1,Math.abs(v),Math.abs(L))}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var et=w,nt=J;function rt(){var t=new u(3);return u!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function it(t){var e=new u(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function ot(t){var e=t[0],n=t[1],r=t[2];return Math.hypot(e,n,r)}function st(t,e,n){var r=new u(3);return r[0]=t,r[1]=e,r[2]=n,r}function at(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function ut(t,e,n,r){return t[0]=e,t[1]=n,t[2]=r,t}function ct(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t}function ht(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t}function ft(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t[2]=e[2]*n[2],t}function lt(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t[2]=e[2]/n[2],t}function pt(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}function dt(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}function gt(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t[2]=Math.min(e[2],n[2]),t}function yt(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t[2]=Math.max(e[2],n[2]),t}function mt(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}function vt(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function bt(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t}function wt(t,e){var n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return Math.hypot(n,r,i)}function Ct(t,e){var n=e[0]-t[0],r=e[1]-t[1],i=e[2]-t[2];return n*n+r*r+i*i}function Mt(t){var e=t[0],n=t[1],r=t[2];return e*e+n*n+r*r}function Et(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function At(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function Rt(t,e){var n=e[0],r=e[1],i=e[2],o=n*n+r*r+i*i;return o>0&&(o=1/Math.sqrt(o)),t[0]=e[0]*o,t[1]=e[1]*o,t[2]=e[2]*o,t}function xt(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Ft(t,e,n){var r=e[0],i=e[1],o=e[2],s=n[0],a=n[1],u=n[2];return t[0]=i*u-o*a,t[1]=o*s-r*u,t[2]=r*a-i*s,t}function Tt(t,e,n,r){var i=e[0],o=e[1],s=e[2];return t[0]=i+r*(n[0]-i),t[1]=o+r*(n[1]-o),t[2]=s+r*(n[2]-s),t}function Pt(t,e,n,r,i,o){var s=o*o,a=s*(2*o-3)+1,u=s*(o-2)+o,c=s*(o-1),h=s*(3-2*o);return t[0]=e[0]*a+n[0]*u+r[0]*c+i[0]*h,t[1]=e[1]*a+n[1]*u+r[1]*c+i[1]*h,t[2]=e[2]*a+n[2]*u+r[2]*c+i[2]*h,t}function kt(t,e,n,r,i,o){var s=1-o,a=s*s,u=o*o,c=a*s,h=3*o*a,f=3*u*s,l=u*o;return t[0]=e[0]*c+n[0]*h+r[0]*f+i[0]*l,t[1]=e[1]*c+n[1]*h+r[1]*f+i[1]*l,t[2]=e[2]*c+n[2]*h+r[2]*f+i[2]*l,t}function _t(t,e){e=e||1;var n=2*c()*Math.PI,r=2*c()-1,i=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*i,t[1]=Math.sin(n)*i,t[2]=r*e,t}function St(t,e,n){var r=e[0],i=e[1],o=e[2],s=n[3]*r+n[7]*i+n[11]*o+n[15];return s=s||1,t[0]=(n[0]*r+n[4]*i+n[8]*o+n[12])/s,t[1]=(n[1]*r+n[5]*i+n[9]*o+n[13])/s,t[2]=(n[2]*r+n[6]*i+n[10]*o+n[14])/s,t}function Bt(t,e,n){var r=e[0],i=e[1],o=e[2];return t[0]=r*n[0]+i*n[3]+o*n[6],t[1]=r*n[1]+i*n[4]+o*n[7],t[2]=r*n[2]+i*n[5]+o*n[8],t}function Lt(t,e,n){var r=n[0],i=n[1],o=n[2],s=n[3],a=e[0],u=e[1],c=e[2],h=i*c-o*u,f=o*a-r*c,l=r*u-i*a,p=i*l-o*f,d=o*h-r*l,g=r*f-i*h,y=2*s;return h*=y,f*=y,l*=y,p*=2,d*=2,g*=2,t[0]=a+h+p,t[1]=u+f+d,t[2]=c+l+g,t}function Ut(t,e,n,r){var i=[],o=[];return i[0]=e[0]-n[0],i[1]=e[1]-n[1],i[2]=e[2]-n[2],o[0]=i[0],o[1]=i[1]*Math.cos(r)-i[2]*Math.sin(r),o[2]=i[1]*Math.sin(r)+i[2]*Math.cos(r),t[0]=o[0]+n[0],t[1]=o[1]+n[1],t[2]=o[2]+n[2],t}function Ot(t,e,n,r){var i=[],o=[];return i[0]=e[0]-n[0],i[1]=e[1]-n[1],i[2]=e[2]-n[2],o[0]=i[2]*Math.sin(r)+i[0]*Math.cos(r),o[1]=i[1],o[2]=i[2]*Math.cos(r)-i[0]*Math.sin(r),t[0]=o[0]+n[0],t[1]=o[1]+n[1],t[2]=o[2]+n[2],t}function Dt(t,e,n,r){var i=[],o=[];return i[0]=e[0]-n[0],i[1]=e[1]-n[1],i[2]=e[2]-n[2],o[0]=i[0]*Math.cos(r)-i[1]*Math.sin(r),o[1]=i[0]*Math.sin(r)+i[1]*Math.cos(r),o[2]=i[2],t[0]=o[0]+n[0],t[1]=o[1]+n[1],t[2]=o[2]+n[2],t}function Nt(t,e){var n=st(t[0],t[1],t[2]),r=st(e[0],e[1],e[2]);Rt(n,n),Rt(r,r);var i=xt(n,r);return i>1?0:i<-1?Math.PI:Math.acos(i)}function Wt(t){return t[0]=0,t[1]=0,t[2]=0,t}function It(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function qt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function jt(t,e){var n=t[0],r=t[1],i=t[2],o=e[0],s=e[1],u=e[2];return Math.abs(n-o)<=a*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(r-s)<=a*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(i-u)<=a*Math.max(1,Math.abs(i),Math.abs(u))}var Yt,Gt=ht,zt=ft,Vt=lt,Ht=wt,Xt=Ct,Kt=ot,Jt=Mt,$t=(Yt=rt(),function(t,e,n,r,i,o){var s,a;for(e||(e=3),n||(n=0),a=r?Math.min(r*e+n,t.length):t.length,s=n;s<a;s+=e)Yt[0]=t[s],Yt[1]=t[s+1],Yt[2]=t[s+2],i(Yt,Yt,o),t[s]=Yt[0],t[s+1]=Yt[1],t[s+2]=Yt[2];return t});function Zt(t){var e=t[0],n=t[1],r=t[2],i=t[3];return Math.hypot(e,n,r,i)}function Qt(t){var e=t[0],n=t[1],r=t[2],i=t[3];return e*e+n*n+r*r+i*i}!function(){var t,e=(t=new u(4),u!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t)}();function te(){var t=new u(4);return u!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function ee(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function ne(t,e,n){n*=.5;var r=Math.sin(n);return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=Math.cos(n),t}function re(t,e){var n=2*Math.acos(e[3]),r=Math.sin(n/2);return r>a?(t[0]=e[0]/r,t[1]=e[1]/r,t[2]=e[2]/r):(t[0]=1,t[1]=0,t[2]=0),n}function ie(t,e){var n=Le(t,e);return Math.acos(2*n*n-1)}function oe(t,e,n){var r=e[0],i=e[1],o=e[2],s=e[3],a=n[0],u=n[1],c=n[2],h=n[3];return t[0]=r*h+s*a+i*c-o*u,t[1]=i*h+s*u+o*a-r*c,t[2]=o*h+s*c+r*u-i*a,t[3]=s*h-r*a-i*u-o*c,t}function se(t,e,n){n*=.5;var r=e[0],i=e[1],o=e[2],s=e[3],a=Math.sin(n),u=Math.cos(n);return t[0]=r*u+s*a,t[1]=i*u+o*a,t[2]=o*u-i*a,t[3]=s*u-r*a,t}function ae(t,e,n){n*=.5;var r=e[0],i=e[1],o=e[2],s=e[3],a=Math.sin(n),u=Math.cos(n);return t[0]=r*u-o*a,t[1]=i*u+s*a,t[2]=o*u+r*a,t[3]=s*u-i*a,t}function ue(t,e,n){n*=.5;var r=e[0],i=e[1],o=e[2],s=e[3],a=Math.sin(n),u=Math.cos(n);return t[0]=r*u+i*a,t[1]=i*u-r*a,t[2]=o*u+s*a,t[3]=s*u-o*a,t}function ce(t,e){var n=e[0],r=e[1],i=e[2];return t[0]=n,t[1]=r,t[2]=i,t[3]=Math.sqrt(Math.abs(1-n*n-r*r-i*i)),t}function he(t,e){var n=e[0],r=e[1],i=e[2],o=e[3],s=Math.sqrt(n*n+r*r+i*i),a=Math.exp(o),u=s>0?a*Math.sin(s)/s:0;return t[0]=n*u,t[1]=r*u,t[2]=i*u,t[3]=a*Math.cos(s),t}function fe(t,e){var n=e[0],r=e[1],i=e[2],o=e[3],s=Math.sqrt(n*n+r*r+i*i),a=s>0?Math.atan2(s,o)/s:0;return t[0]=n*a,t[1]=r*a,t[2]=i*a,t[3]=.5*Math.log(n*n+r*r+i*i+o*o),t}function le(t,e,n){return fe(t,e),Be(t,t,n),he(t,t),t}function pe(t,e,n,r){var i,o,s,u,c,h=e[0],f=e[1],l=e[2],p=e[3],d=n[0],g=n[1],y=n[2],m=n[3];return(o=h*d+f*g+l*y+p*m)<0&&(o=-o,d=-d,g=-g,y=-y,m=-m),1-o>a?(i=Math.acos(o),s=Math.sin(i),u=Math.sin((1-r)*i)/s,c=Math.sin(r*i)/s):(u=1-r,c=r),t[0]=u*h+c*d,t[1]=u*f+c*g,t[2]=u*l+c*y,t[3]=u*p+c*m,t}function de(t){var e=c(),n=c(),r=c(),i=Math.sqrt(1-e),o=Math.sqrt(e);return t[0]=i*Math.sin(2*Math.PI*n),t[1]=i*Math.cos(2*Math.PI*n),t[2]=o*Math.sin(2*Math.PI*r),t[3]=o*Math.cos(2*Math.PI*r),t}function ge(t,e){var n=e[0],r=e[1],i=e[2],o=e[3],s=n*n+r*r+i*i+o*o,a=s?1/s:0;return t[0]=-n*a,t[1]=-r*a,t[2]=-i*a,t[3]=o*a,t}function ye(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function me(t,e){var n,r=e[0]+e[4]+e[8];if(r>0)n=Math.sqrt(r+1),t[3]=.5*n,n=.5/n,t[0]=(e[5]-e[7])*n,t[1]=(e[6]-e[2])*n,t[2]=(e[1]-e[3])*n;else{var i=0;e[4]>e[0]&&(i=1),e[8]>e[3*i+i]&&(i=2);var o=(i+1)%3,s=(i+2)%3;n=Math.sqrt(e[3*i+i]-e[3*o+o]-e[3*s+s]+1),t[i]=.5*n,n=.5/n,t[3]=(e[3*o+s]-e[3*s+o])*n,t[o]=(e[3*o+i]+e[3*i+o])*n,t[s]=(e[3*s+i]+e[3*i+s])*n}return t}function ve(t,e,n,r){var i=.5*Math.PI/180;e*=i,n*=i,r*=i;var o=Math.sin(e),s=Math.cos(e),a=Math.sin(n),u=Math.cos(n),c=Math.sin(r),h=Math.cos(r);return t[0]=o*u*h-s*a*c,t[1]=s*a*h+o*u*c,t[2]=s*u*c-o*a*h,t[3]=s*u*h+o*a*c,t}function be(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}var we,Ce,Me,Ee,Ae,Re,xe,Fe=function(t){var e=new u(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},Te=function(t,e,n,r){var i=new u(4);return i[0]=t,i[1]=e,i[2]=n,i[3]=r,i},Pe=function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},ke=function(t,e,n,r,i){return t[0]=e,t[1]=n,t[2]=r,t[3]=i,t},_e=function(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t},Se=oe,Be=function(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t},Le=function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},Ue=function(t,e,n,r){var i=e[0],o=e[1],s=e[2],a=e[3];return t[0]=i+r*(n[0]-i),t[1]=o+r*(n[1]-o),t[2]=s+r*(n[2]-s),t[3]=a+r*(n[3]-a),t},Oe=Zt,De=Oe,Ne=Qt,We=Ne,Ie=function(t,e){var n=e[0],r=e[1],i=e[2],o=e[3],s=n*n+r*r+i*i+o*o;return s>0&&(s=1/Math.sqrt(s)),t[0]=n*s,t[1]=r*s,t[2]=i*s,t[3]=o*s,t},qe=function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},je=function(t,e){var n=t[0],r=t[1],i=t[2],o=t[3],s=e[0],u=e[1],c=e[2],h=e[3];return Math.abs(n-s)<=a*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(r-u)<=a*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(i-c)<=a*Math.max(1,Math.abs(i),Math.abs(c))&&Math.abs(o-h)<=a*Math.max(1,Math.abs(o),Math.abs(h))},Ye=(we=rt(),Ce=st(1,0,0),Me=st(0,1,0),function(t,e,n){var r=xt(e,n);return r<-.999999?(Ft(we,Ce,e),Kt(we)<1e-6&&Ft(we,Me,e),Rt(we,we),ne(t,we,Math.PI),t):r>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(Ft(we,e,n),t[0]=we[0],t[1]=we[1],t[2]=we[2],t[3]=1+r,Ie(t,t))}),Ge=(Ee=te(),Ae=te(),function(t,e,n,r,i,o){return pe(Ee,e,i,o),pe(Ae,n,r,o),pe(t,Ee,Ae,2*o*(1-o)),t}),ze=(Re=new u(9),u!=Float32Array&&(Re[1]=0,Re[2]=0,Re[3]=0,Re[5]=0,Re[6]=0,Re[7]=0),Re[0]=1,Re[4]=1,Re[8]=1,xe=Re,function(t,e,n,r){return xe[0]=n[0],xe[3]=n[1],xe[6]=n[2],xe[1]=r[0],xe[4]=r[1],xe[7]=r[2],xe[2]=-e[0],xe[5]=-e[1],xe[8]=-e[2],Ie(t,me(t,xe))});function Ve(){var t=new u(2);return u!=Float32Array&&(t[0]=0,t[1]=0),t}function He(t){var e=new u(2);return e[0]=t[0],e[1]=t[1],e}function Xe(t,e){var n=new u(2);return n[0]=t,n[1]=e,n}function Ke(t,e){return t[0]=e[0],t[1]=e[1],t}function Je(t,e,n){return t[0]=e,t[1]=n,t}function $e(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t}function Ze(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t}function Qe(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t}function tn(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t}function en(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t}function nn(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t}function rn(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t}function on(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t}function sn(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t}function an(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t}function un(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t}function cn(t,e){var n=e[0]-t[0],r=e[1]-t[1];return Math.hypot(n,r)}function hn(t,e){var n=e[0]-t[0],r=e[1]-t[1];return n*n+r*r}function fn(t){var e=t[0],n=t[1];return Math.hypot(e,n)}function ln(t){var e=t[0],n=t[1];return e*e+n*n}function pn(t,e){return t[0]=-e[0],t[1]=-e[1],t}function dn(t,e){return t[0]=1/e[0],t[1]=1/e[1],t}function gn(t,e){var n=e[0],r=e[1],i=n*n+r*r;return i>0&&(i=1/Math.sqrt(i)),t[0]=e[0]*i,t[1]=e[1]*i,t}function yn(t,e){return t[0]*e[0]+t[1]*e[1]}function mn(t,e,n){var r=e[0]*n[1]-e[1]*n[0];return t[0]=t[1]=0,t[2]=r,t}function vn(t,e,n,r){var i=e[0],o=e[1];return t[0]=i+r*(n[0]-i),t[1]=o+r*(n[1]-o),t}function bn(t,e){e=e||1;var n=2*c()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t}function wn(t,e,n){var r=e[0],i=e[1];return t[0]=n[0]*r+n[2]*i,t[1]=n[1]*r+n[3]*i,t}function Cn(t,e,n){var r=e[0],i=e[1];return t[0]=n[0]*r+n[2]*i+n[4],t[1]=n[1]*r+n[3]*i+n[5],t}function Mn(t,e,n){var r=e[0],i=e[1];return t[0]=n[0]*r+n[3]*i+n[6],t[1]=n[1]*r+n[4]*i+n[7],t}function En(t,e,n){var r=e[0],i=e[1];return t[0]=n[0]*r+n[4]*i+n[12],t[1]=n[1]*r+n[5]*i+n[13],t}function An(t,e,n,r){var i=e[0]-n[0],o=e[1]-n[1],s=Math.sin(r),a=Math.cos(r);return t[0]=i*a-o*s+n[0],t[1]=i*s+o*a+n[1],t}function Rn(t,e){var n=t[0],r=t[1],i=e[0],o=e[1],s=n*n+r*r;s>0&&(s=1/Math.sqrt(s));var a=i*i+o*o;a>0&&(a=1/Math.sqrt(a));var u=(n*i+r*o)*s*a;return u>1?0:u<-1?Math.PI:Math.acos(u)}function xn(t){return t[0]=0,t[1]=0,t}function Fn(t){return"vec2("+t[0]+", "+t[1]+")"}function Tn(t,e){return t[0]===e[0]&&t[1]===e[1]}function Pn(t,e){var n=t[0],r=t[1],i=e[0],o=e[1];return Math.abs(n-i)<=a*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(r-o)<=a*Math.max(1,Math.abs(r),Math.abs(o))}var kn=fn,_n=Ze,Sn=Qe,Bn=tn,Ln=cn,Un=hn,On=ln,Dn=function(){var t=Ve();return function(e,n,r,i,o,s){var a,u;for(n||(n=2),r||(r=0),u=i?Math.min(i*n+r,e.length):e.length,a=r;a<u;a+=n)t[0]=e[a],t[1]=e[a+1],o(t,t,s),e[a]=t[0],e[a+1]=t[1];return e}}(),Nn=n(24),Wn=new(function(){function t(){}return t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.log.apply(console,t)},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.warn.apply(console,t)},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.error.apply(console,t)},t}());function In(t,e){var n=t.indexOf(e);return n>=0&&(t.splice(n,1),!0)}var qn=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,a)}u((r=r.apply(t,e||[])).next())})},jn=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},Yn=function(){function t(){this.cleanList=new Array}return t.prototype.wrapPromise=function(t){return qn(this,void 0,void 0,function(){var e,n;return jn(this,function(r){switch(r.label){case 0:return e=!1,this.remember(function(){e=!0}),[4,t];case 1:return n=r.sent(),e?[2,new Promise(function(){})]:[2,n]}})})},t.prototype.remember=function(){for(var t=this,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(1===e.length)return this.rememberOne(e[0]);var r=e.map(function(e){return t.rememberOne(e)});return function(){var t=r.slice();r.length=0,t.forEach(function(t){t()})}},t.prototype.rememberOne=function(t){var e=this,n={clean:t};return this.cleanList.push(n),function(){In(e.cleanList,n)&&t()}},t.prototype.clean=function(){var t=this.cleanList.slice();this.cleanList.length=0,t.forEach(function(t){(0,t.clean)()})},t}(),Gn=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,a)}u((r=r.apply(t,e||[])).next())})},zn=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},Vn=function(){function t(){this.actions=new Array,this.running=!1}return t.prototype.queue=function(t){this.actions.push(t),this.ensureRunning()},t.prototype.ensureRunning=function(){return Gn(this,void 0,void 0,function(){return zn(this,function(t){switch(t.label){case 0:if(this.running)return[3,4];this.running=!0,t.label=1;case 1:return this.actions.length>0?[4,this.actions.shift()()]:[3,3];case 2:return t.sent(),[3,1];case 3:this.running=!1,t.label=4;case 4:return[2]}})})},t}();function Hn(t){return Object.values(t)}function Xn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n=0,r=t;n<r.length;n++){var i=r[n];if(void 0!==i)return i}}var Kn=function(){function t(t,e,n,i){this.gl=t,this.material=e,this.modelMatrix=r.create(),this.position=s.fromValues(0,0),this.scale=s.fromValues(1,1),this.rotationZDeg=0;var o=this.gl.createBuffer();if(!o)throw new Error("Failed to create buffer");if(this.buffer=o,this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,this.buffer),this.gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER,new Float32Array(n),i),n.length%this.material.itemSize!=0)throw new Error("Unexpected array size");this.numItems=n.length/this.material.itemSize}return t.prototype.shouldBeRendered=function(){return!0},t.prototype.draw=function(e,n){void 0===e&&(e=t.mat4Identity),void 0===n&&(n=t.mat4Identity),this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,this.buffer),this.material.setupAttribPointers(),this.material.updateMatrices(e,n,this.modelMatrix),this.gl.drawArrays(WebGLRenderingContext.TRIANGLE_STRIP,0,this.numItems)},t.prototype.getWorldTransform=function(){return this.modelMatrix},t.prototype.getInverseWorldTransform=function(){var t=r.invert(r.create(),this.modelMatrix);if(!t)throw new Error("Failed to get inverse world transform");return t},t.prototype.getRotationZDeg=function(){return this.rotationZDeg},t.prototype.setPosition=function(t,e){this.position[0]=t,this.position[1]=Xn(e,t),this.updateModelMatrix()},t.prototype.setRotation=function(t){this.rotationZDeg=t,this.updateModelMatrix()},t.prototype.setScale=function(t,e){this.scale[0]=t,this.scale[1]=Xn(e,t),this.updateModelMatrix()},t.prototype.updateModelMatrix=function(){r.fromRotationTranslationScale(this.modelMatrix,o.fromEuler(o.create(),0,0,this.rotationZDeg),i.fromValues(this.position[0],this.position[1],0),i.fromValues(this.scale[0],this.scale[1],1))},t.mat4Identity=r.create(),t}();function Jn(t){return 0==(t&t-1)}var $n,Zn=($n=function(t,e){return($n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}$n(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),Qn=function(t){function e(e,n,r,i,o,s,a){var u=t.call(this,n,i,c(1,1).concat(c(.5,1),c(1,0),c(.5,0),c(.5,0),c(0,0),c(.5,1),c(0,1)),WebGLRenderingContext.DYNAMIC_DRAW)||this;function c(t,e){return[t,e,0,t,1-e]}return u.debugName=e,u.renderTarget=r,u.height=o,u.visible=!1,u.connectedPortal=void 0,u.setPosition(a[0],a[1]),u.setRotation(s),u}return Zn(e,t),e.linkPortals=function(t,e){t.connectedPortal=e,e.connectedPortal=t},e.prototype.setViewPoint=function(t,e,n,r,o,a,u){var c=this.getWorldTransform(),h=this.getInverseWorldTransform(),f=i.fromValues(t[0],t[1],0);if(this.visible=i.transformMat4(i.create(),f,h)[0]<0,this.visible){var l=i.fromValues(0,.5*this.height,0),p=i.fromValues(0,-.5*this.height,0),d=i.transformMat4(i.create(),l,c),g=i.transformMat4(i.create(),p,c),y=k(f,d),m=k(f,g),v=i.transformMat4(i.create(),y,h),b=i.transformMat4(i.create(),m,h),w=i.add(i.create(),y,i.fromValues(o,0,0)),C=i.add(i.create(),m,i.fromValues(o,0,0)),M=i.transformMat4(i.create(),w,c),E=i.transformMat4(i.create(),C,c),A=1/n,R=A*(o/a),x=s.fromValues(0,0),F=function(t){var n=s.fromValues(t[0]-e[0],t[1]-e[1]);return s.rotate(n,n,x,r/180*Math.PI),[.5+n[0]/R,.5+n[1]/A]},T=P(w,M).concat(P(v,y),P(C,E),P(b,m),P(b,m),P(p,g),P(v,y),P(l,d));return this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,this.buffer),this.gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER,new Float32Array(T),WebGLRenderingContext.DYNAMIC_DRAW),void this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,null)}function P(t,e){return[t[0],t[1],0].concat(F(e))}function k(t,e,n){void 0===n&&(n=10);var r=i.create();return i.sub(r,e,t),i.normalize(r,r),i.scale(r,r,n),i.add(r,e,r),r}},e.prototype.shouldBeRendered=function(){return Boolean(this.connectedPortal)&&this.visible},e.prototype.teleported=function(t){if(!this.connectedPortal)throw new Error("Missing connected portal");var e=s.clone(t),n=this.getInverseWorldTransform();return s.transformMat4(e,e,n),e[0]=-e[0],e[1]=-e[1],s.transformMat4(e,e,this.connectedPortal.getWorldTransform()),e},e.prototype.wasCrossed=function(t,e){var n,r,i,o,a,u,c,h,f,l,p,d,g,y,m,v,b=this.getInverseWorldTransform(),w=s.fromValues(0,.5*this.height),C=s.fromValues(0,-.5*this.height),M=s.transformMat4(s.create(),t,b),E=s.transformMat4(s.create(),e,b);return M[0]<0&&E[0]>=0&&(r=E,i=w,o=C,a=(n=M)[0],u=n[1],c=r[0],h=r[1],f=i[0],l=i[1],p=c-a,d=h-u,g=o[0]-f,y=o[1]-l,v=(g*(u-l)-y*(a-f))/(-g*d+p*y),(m=(-d*(a-f)+p*(u-l))/(-g*d+p*y))>=0&&m<=1&&v>=0&&v<=1)},e.prototype.teleport=function(t){var e=this.teleported(t);t[0]=e[0],t[1]=e[1]},e.prototype.teleportCamera=function(t,e,n){return this.connectedPortal?(this.teleport(t),{tilt:e,zoom:n}):{tilt:e,zoom:n}},e}(Kn);function tr(t){return new Promise(function(e,n){var r=new Image;r.onload=function(){e(r)},r.onerror=function(t){n(t)},r.src=t})}var er,nr,rr=function(){function t(t){this.evaluate=t,this.cached=null,this.evaluated=!1}return t.prototype.getValue=function(){return this.evaluated||(this.evaluated=!0,this.cached=this.evaluate.call(null)),this.cached},t}(),ir=function(){function t(t,e){var n=this;this.gl=t,this.shaders=e,this.attributes=Object.create(null),this.uniforms=Object.create(null);var r=this.gl.createProgram();if(!r)throw new Error("Failed to create program");if(this.program=r,e.forEach(function(t){n.gl.attachShader(r,t.shader)}),this.gl.linkProgram(r),!this.gl.getProgramParameter(r,WebGLRenderingContext.LINK_STATUS))throw new Error("Failed to link program")}return t.prototype.use=function(){var t=this;this.gl.useProgram(this.program),this.shaders.forEach(function(e){e.attributes.forEach(function(e){t.attributes[e]=t.gl.getAttribLocation(t.program,e),t.gl.enableVertexAttribArray(t.attributes[e])}),e.uniforms.forEach(function(e){var n=t.gl.getUniformLocation(t.program,e);null!==n?t.uniforms[e]=n:Wn.warn('Failed to get location of uniform "'+e+'"')})})},t}();function or(t,e,n){var r=t.createShader(n);if(!r)throw new Error("Failed to create shader");if(t.shaderSource(r,e),t.compileShader(r),!t.getShaderParameter(r,WebGLRenderingContext.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(r)||"(Shader info log not available)");return r}function sr(t){if(t===WebGLRenderingContext.FLOAT)return 4;throw new Error("Unsupported type")}!function(t){t.VertexPosition="aVertexPosition"}(er||(er={})),function(t){t.ModelViewMatrix="uMVMatrix",t.ProjectionMatrix="uPMatrix"}(nr||(nr={}));var ar,ur,cr=function(){function t(e){this.attributes=Hn(er),this.uniforms=Hn(nr),this.source="\n    attribute vec3 "+er.VertexPosition+";\n\n    uniform mat4 "+nr.ModelViewMatrix+";\n    uniform mat4 "+nr.ProjectionMatrix+";\n\n    void main(void) {\n      gl_Position = (\n        "+nr.ProjectionMatrix+" *\n        "+nr.ModelViewMatrix+" *\n        vec4("+er.VertexPosition+", 1.0)\n      );\n    }\n  ",this.shader=or(e,this.source,t.type)}return t.type=WebGLRenderingContext.VERTEX_SHADER,t}(),hr=function(){function t(e){this.attributes=[],this.uniforms=[],this.source="\n    precision mediump float;\n\n    void main(void) {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  ",this.shader=or(e,this.source,t.type)}return t.type=WebGLRenderingContext.FRAGMENT_SHADER,t}(),fr=function(){function t(t){this.gl=t,this.tempModelViewMatrix=r.create(),this.itemSize=3,this.program=new ir(this.gl,[new cr(this.gl),new hr(this.gl)])}return t.prototype.use=function(){this.program.use()},t.prototype.setupAttribPointers=function(){this.gl.vertexAttribPointer(this.program.attributes[er.VertexPosition],this.itemSize,WebGLRenderingContext.FLOAT,!1,0,0)},t.prototype.updateMatrices=function(t,e,n){this.gl.uniformMatrix4fv(this.program.uniforms[nr.ProjectionMatrix],!1,t);var i=this.tempModelViewMatrix;r.identity(i),r.mul(i,e,n),this.gl.uniformMatrix4fv(this.program.uniforms[nr.ModelViewMatrix],!1,i)},t}();!function(t){t.VertexPosition="aVertexPosition",t.TextureCoord="aTextureCoord"}(ar||(ar={})),function(t){t.ModelViewMatrix="uMVMatrix",t.ProjectionMatrix="uPMatrix"}(ur||(ur={}));var lr,pr=function(){function t(e){this.attributes=Hn(ar),this.uniforms=Hn(ur),this.source="\n    attribute vec3 "+ar.VertexPosition+";\n    attribute vec2 "+ar.TextureCoord+";\n\n    uniform mat4 "+ur.ModelViewMatrix+";\n    uniform mat4 "+ur.ProjectionMatrix+";\n\n    varying highp vec2 vTextureCoord;\n\n    void main(void) {\n      gl_Position = (\n        "+ur.ProjectionMatrix+" *\n        "+ur.ModelViewMatrix+" *\n        vec4("+ar.VertexPosition+", 1.0)\n      );\n      vTextureCoord = aTextureCoord;\n    }\n  ",this.shader=or(e,this.source,t.type)}return t.type=WebGLRenderingContext.VERTEX_SHADER,t}();(lr||(lr={})).Sampler="uSampler";var dr,gr=function(){function t(e){this.attributes=[],this.uniforms=Hn(lr),this.source="\n    precision mediump float;\n\n    varying highp vec2 vTextureCoord;\n\n    uniform sampler2D "+lr.Sampler+";\n\n    void main(void) {\n        gl_FragColor = texture2D("+lr.Sampler+", vTextureCoord);\n    }\n  ",this.shader=or(e,this.source,t.type)}return t.type=WebGLRenderingContext.FRAGMENT_SHADER,t}(),yr=function(){function t(t){this.gl=t,this.tempModelViewMatrix=r.create(),this.itemSize=5,this.program=new ir(this.gl,[new pr(this.gl),new gr(this.gl)])}return t.prototype.bindTexture=function(t){var e=this;return{itemSize:this.itemSize,use:function(){e.use(),e.gl.activeTexture(WebGLRenderingContext.TEXTURE0),e.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D,t),e.gl.uniform1i(e.program.uniforms[lr.Sampler],0)},setupAttribPointers:this.setupAttribPointers.bind(this),updateMatrices:this.updateMatrices.bind(this)}},t.prototype.use=function(){this.program.use()},t.prototype.setupAttribPointers=function(){this.gl.vertexAttribPointer(this.program.attributes[ar.VertexPosition],3,WebGLRenderingContext.FLOAT,!1,this.itemSize*sr(WebGLRenderingContext.FLOAT),0),this.gl.vertexAttribPointer(this.program.attributes[ar.TextureCoord],2,WebGLRenderingContext.FLOAT,!1,this.itemSize*sr(WebGLRenderingContext.FLOAT),3*sr(WebGLRenderingContext.FLOAT))},t.prototype.updateMatrices=function(t,e,n){this.gl.uniformMatrix4fv(this.program.uniforms[ur.ProjectionMatrix],!1,t);var i=this.tempModelViewMatrix;r.identity(i),r.mul(i,e,n),this.gl.uniformMatrix4fv(this.program.uniforms[ur.ModelViewMatrix],!1,i)},t}(),mr=function(){function t(t,e,n){this.gl=t,this.viewportWidth=320,this.viewportHeight=240,this.perspectiveFovY=45,this.orthoHeightY=1,this.near=.1,this.far=100,this.x=0,this.y=0,this.zoom=1,this.viewMatrix=r.create(),this.projectionMatrix=r.create(),this.updateSize(e,n)}return t.prototype.updateViewportAndProjection=function(t,e,n){r.identity(this.viewMatrix),r.rotateZ(this.viewMatrix,this.viewMatrix,n/180*Math.PI),r.translate(this.viewMatrix,this.viewMatrix,i.fromValues(-t[0],-t[1],-10)),this.zoom=e,this.gl.viewport(0,0,this.viewportWidth,this.viewportHeight);var o=this.viewportWidth/this.viewportHeight,s=this.orthoHeightY/this.zoom,a=s*o;r.ortho(this.projectionMatrix,.5*-a,.5*a,.5*-s,.5*s,this.near,this.far)},t.prototype.updateSize=function(t,e){this.viewportWidth=t,this.viewportHeight=e},t}(),vr=function(){function t(t,e,n){void 0===n&&(n=!1),this.gl=t,this.params={level:0,border:0,internalFormat:WebGLRenderingContext.RGBA,srcFormat:WebGLRenderingContext.RGBA,srcType:WebGLRenderingContext.UNSIGNED_BYTE};var r=this.gl.createTexture();if(!r)throw new Error("Failed to create texture");this.texture=r,this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D,this.texture);var i=e.image||null;if(i)this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D,this.params.level,this.params.internalFormat,this.params.srcFormat,this.params.srcType,i);else{var o=e;this.resize(o.width,o.height)}i&&Jn(i.width)&&Jn(i.height)?this.gl.generateMipmap(WebGLRenderingContext.TEXTURE_2D):this.turnOffMipmapAndSetWrapping()}return t.prototype.resize=function(t,e){this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D,this.params.level,this.params.internalFormat,t,e,this.params.border,this.params.srcFormat,this.params.srcType,null)},t.prototype.turnOffMipmapAndSetWrapping=function(){this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D,WebGLRenderingContext.TEXTURE_MIN_FILTER,WebGLRenderingContext.LINEAR),this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D,WebGLRenderingContext.TEXTURE_WRAP_S,WebGLRenderingContext.CLAMP_TO_EDGE),this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D,WebGLRenderingContext.TEXTURE_WRAP_T,WebGLRenderingContext.CLAMP_TO_EDGE)},t}(),br=function(){function t(t,e,n,r,i){void 0===r&&(r=!0),void 0===i&&(i=!1),this.gl=t,this.width=e,this.height=n,this.useDepth=r,this.useStencil=i,this.renderbuffer=null,this.targetTexture=new vr(this.gl,{width:this.width,height:this.height}),this.texture=this.targetTexture.texture;var o=this.gl.createFramebuffer();if(!o)throw new Error("Failed to create framebuffer");this.framebuffer=o,this.bind();this.gl.framebufferTexture2D(WebGLRenderingContext.FRAMEBUFFER,WebGLRenderingContext.COLOR_ATTACHMENT0,WebGLRenderingContext.TEXTURE_2D,this.targetTexture.texture,0),this.useDepth&&(this.renderbuffer=this.gl.createRenderbuffer(),this.gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER,this.renderbuffer),this.useStencil?(this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER,WebGLRenderingContext.DEPTH_STENCIL,this.width,this.height),this.gl.framebufferRenderbuffer(WebGLRenderingContext.FRAMEBUFFER,WebGLRenderingContext.DEPTH_STENCIL_ATTACHMENT,WebGLRenderingContext.RENDERBUFFER,this.renderbuffer)):(this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER,WebGLRenderingContext.DEPTH_COMPONENT16,this.width,this.height),this.gl.framebufferRenderbuffer(WebGLRenderingContext.FRAMEBUFFER,WebGLRenderingContext.DEPTH_ATTACHMENT,WebGLRenderingContext.RENDERBUFFER,this.renderbuffer))),this.unbind()}return t.prototype.bind=function(){this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER,this.framebuffer),this.gl.viewport(0,0,this.width,this.height)},t.prototype.unbind=function(){this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER,null)},t.prototype.resize=function(t,e){this.width=t,this.height=e,this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D,this.targetTexture.texture),this.targetTexture.resize(this.width,this.height),this.renderbuffer&&(this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER,this.framebuffer),this.gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER,this.renderbuffer),this.useStencil?this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER,WebGLRenderingContext.DEPTH_STENCIL,this.width,this.height):this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER,WebGLRenderingContext.DEPTH_COMPONENT16,this.width,this.height),this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER,null))},t}(),wr=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,a)}u((r=r.apply(t,e||[])).next())})},Cr=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},Mr=function(){function t(t){var e=this;this.gl=t,this.currentMaterial=null,this.renderTargetsToResize=[],this.renderTargetStack=[],this.gl.canvas.width=this.gl.canvas.clientWidth,this.gl.canvas.height=this.gl.canvas.clientHeight,this.materials={unlitBlack:new fr(this.gl),unlitTextured:new yr(this.gl)},this.renderTarget=new br(this.gl,this.gl.canvas.width,this.gl.canvas.height,!1),this.postProcessingModel=new Kn(this.gl,this.materials.unlitTextured.bindTexture(this.renderTarget.texture),[1,1,0,1,1,-1,1,0,0,1,1,-1,0,1,0,-1,-1,0,0,0],WebGLRenderingContext.STATIC_DRAW),this.gl.clearColor(1,1,1,1),this.camera=new mr(this.gl,this.gl.canvas.width,this.gl.canvas.height),window.addEventListener("resize",function(){e.updateSize()})}return t.prototype.enterRenderTarget=function(t){this.renderTargetStack.length>0&&this.renderTargetStack[this.renderTargetStack.length-1].unbind(),this.renderTargetStack.push(t),t.bind()},t.prototype.exitRenderTarget=function(){var t=this.renderTargetStack.pop();t&&t.unbind(),this.renderTargetStack.length>0&&this.renderTargetStack[this.renderTargetStack.length-1].bind()},t.prototype.createPortal=function(t,e,n,r){var i=new br(this.gl,this.gl.canvas.width,this.gl.canvas.height,!1),o=new Qn(t,this.gl,i,this.materials.unlitTextured.bindTexture(i.texture),e,n,r);return this.renderTargetsToResize.push(i),o},t.prototype.updateSize=function(){var t=this.gl.canvas.clientWidth,e=this.gl.canvas.clientHeight;this.gl.canvas.width=t,this.gl.canvas.height=e,this.camera.updateSize(t,e),this.renderTarget.resize(t,e),this.renderTargetsToResize.forEach(function(n){n.resize(t,e)})},t.prototype.render=function(t,e,n,r,i,a,u,c,h){var f=this;void 0===e&&(e=void 0),void 0===a&&(a=0),void 0===h&&(h=[]);var l=Xn(u,this.gl.canvas.width),p=Xn(c,this.gl.canvas.height),d=new rr(function(){var t=1/i,e=t*(l/p);o.fromEuler(o.create(),0,0,a);return[n(-1,-1),n(1,-1),n(1,1),n(-1,1)];function n(n,i){var o=s.fromValues(r[0]+.5*n*e,r[1]+.5*i*t);return s.rotate(o,o,r,a/180*Math.PI),o}});t.filter(function(t){return t instanceof Qn&&(!h.includes(t)&&(h.push(t),t.setViewPoint(n,r,i,a,l,p,d),t.shouldBeRendered()))}).forEach(function(o){o.connectedPortal;f.enterRenderTarget(o.renderTarget);var s=o.teleported(r),u=i,c=o.teleported(n),l=a;f.render(t,e,c,s,u,l,void 0,void 0,h),f.exitRenderTarget()}),this.enterRenderTarget(this.renderTarget),this.camera.updateViewportAndProjection(r,i,a),this.gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);var g=function(t){t.shouldBeRendered()&&(f.setMaterial(t.material),t.draw(f.camera.projectionMatrix,f.camera.viewMatrix))};t.forEach(function(t){t instanceof Qn||t!==e&&g(t)}),t.forEach(function(t){t instanceof Qn&&(t.setViewPoint(n,r,i,a,l,p,d),g(t))}),e&&g(e),this.exitRenderTarget(),this.gl.viewport(0,0,this.gl.canvas.width,this.gl.canvas.height),this.gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT|WebGLRenderingContext.DEPTH_BUFFER_BIT),this.setMaterial(this.postProcessingModel.material),this.postProcessingModel.draw()},t.prototype.setMaterial=function(t){this.currentMaterial!==t&&(this.currentMaterial=t,t.use())},t.prototype.loadTexture=function(t){return wr(this,void 0,void 0,function(){var e;return Cr(this,function(n){switch(n.label){case 0:return[4,tr(t)];case 1:return e=n.sent(),[2,new vr(this.gl,{image:e}).texture]}})})},t}(),Er=function(){function t(t){this.creator=t,this.map=Object.create(null)}return t.prototype.get=function(t){return Object.hasOwnProperty.call(this.map,t)||(this.map[t]=this.creator()),this.map[t]},t.prototype.clear=function(){this.map=Object.create(null)},t}(),Ar=function(){function t(){var t=this;this.listeners=new Er(function(){return[]}),this.pressedKeys=[],this.handleKeyDown=function(e){var n,r,i=e.keyCode;n=t.pressedKeys,r=i,n.includes(r)||n.push(r)},this.handleKeyUp=function(e){var n=e.keyCode;In(t.pressedKeys,n)},this.addEventListeners()}return t.prototype.destroy=function(){this.removeEventListeners(),this.pressedKeys.length=0,this.listeners.clear()},t.prototype.addEventListeners=function(){window.addEventListener("keydown",this.handleKeyDown),window.addEventListener("keyup",this.handleKeyUp)},t.prototype.removeEventListeners=function(){window.removeEventListener("keydown",this.handleKeyDown),window.removeEventListener("keyup",this.handleKeyUp)},t.prototype.whilePressed=function(t,e){var n={action:e},r=this.listeners.get(t);return r.push(n),function(){In(r,n)}},t.prototype.update=function(t){var e=this;this.pressedKeys.forEach(function(n){e.listeners.get(n).forEach(function(e){(0,e.action)(t)})})},t.KEY_W=87,t.KEY_A=65,t.KEY_S=83,t.KEY_D=68,t.KEY_ARROW_UP=38,t.KEY_ARROW_LEFT=37,t.KEY_ARROW_DOWN=40,t.KEY_ARROW_RIGHT=39,t.KEY_NUM7=36,t.KEY_NUM9=33,t.KEY_NUM_MINUS=109,t.KEY_NUM_PLUS=107,t}(),Rr=function(t,e,n,r){return new(n||(n=Promise))(function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new n(function(e){e(t.value)}).then(s,a)}u((r=r.apply(t,e||[])).next())})},xr=function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=(i=s.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};function Fr(t,e){return Rr(this,void 0,void 0,function(){function n(){!function(t){t.remember(b.whilePressed(Ar.KEY_ARROW_UP,function(t){d[1]+=w*t}),b.whilePressed(Ar.KEY_ARROW_LEFT,function(t){d[0]-=w*t}),b.whilePressed(Ar.KEY_ARROW_DOWN,function(t){d[1]-=w*t}),b.whilePressed(Ar.KEY_ARROW_RIGHT,function(t){d[0]+=w*t}),b.whilePressed(Ar.KEY_NUM_MINUS,function(t){p-=C*t}),b.whilePressed(Ar.KEY_NUM_PLUS,function(t){p+=C*t}),b.whilePressed(Ar.KEY_NUM7,function(t){l+=M*t}),b.whilePressed(Ar.KEY_NUM9,function(t){l-=M*t}),b.whilePressed(Ar.KEY_W,function(t){g[1]+=w*t}),b.whilePressed(Ar.KEY_A,function(t){g[0]-=w*t}),b.whilePressed(Ar.KEY_S,function(t){g[1]-=w*t}),b.whilePressed(Ar.KEY_D,function(t){g[0]+=w*t}))}(a),A=performance.now()-1e3/60,a.remember(function(){null!==E&&(cancelAnimationFrame(E),E=null)}),o(performance.now())}function r(){a.clean()}function i(e){return Rr(this,void 0,void 0,function(){function n(e){return e?new Kn(t.gl,t.materials.unlitTextured.bindTexture(e),[.5,.5,0,1,0,-.5,.5,0,0,0,.5,-.5,0,1,1,-.5,-.5,0,0,1],WebGLRenderingContext.STATIC_DRAW):new Kn(t.gl,t.materials.unlitBlack,[.5,.5,0,-.5,.5,0,.5,-.5,0,-.5,-.5,0],WebGLRenderingContext.STATIC_DRAW)}function r(){return new Kn(t.gl,t.materials.unlitBlack,[.3,.5,0,-.3,.5,0,.3,.3,0,-.3,.3,0,-.3,.3,0,-.3,-.5,0,-.1,.3,0,-.1,-.5,0,-.1,-.5,0,-.1,-.1,0,-.1,-.1,0,.1,-.1,0,-.1,.1,0,.1,.1,0],WebGLRenderingContext.STATIC_DRAW)}function i(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=t.createPortal.apply(t,e);return u.push(r),r}var o,s,a,u,c,h,f,l,p,d;return xr(this,function(g){switch(g.label){case 0:return[4,e.wrapPromise(t.loadTexture("gfx/debug_512x512.png"))];case 1:return o=g.sent(),s=[],(a=n(o)).setScale(10,10),s.push(a),1,u=[],(c=r()).setPosition(10,0),s.push(c),h=i("A",1,0,[2,0]),f=i("B",1,180,[9,0]),Qn.linkPortals(h,f),s.push(h),s.push(f),(l=r()).setPosition(0,-10),s.push(l),p=i("C",1,-90,[0,-2]),d=i("D",1,90,[0,-9]),Qn.linkPortals(p,d),s.push(p),s.push(d),e.remember(function(){}),[2,{spawnPlayer:function(){var t=n();return s.push(t),t},removePlayer:function(t){In(s,t)},allModels:s,portals:u,update:function(t,e){c.setRotation(36*e/1e3)}}]}})})}function o(e){var n=(e-A)/1e3;A=e;var r=s.clone(g);b.update(n);for(var i=0,a=h.portals;i<a.length;i++){var u=a[i];if(u.wasCrossed(r,g)){u.teleport(r),u.teleport(g);var c=u.teleportCamera(d,l,p);l=c.tilt,p=c.zoom;break}}f.setPosition(g[0],g[1]),h.update(n,e),t.render(h.allModels,f,g,d,p,l),E=requestAnimationFrame(o)}var a,u,c,h,f,l,p,d,g,y,m,v,b,w,C,M,E,A;return xr(this,function(t){switch(t.label){case 0:return a=new Yn,u=Object.create(null),e&&(c=e.id,e.on(dr.InPlayersList,function(t){var e=Object.keys(u),n=Object.keys(t),r=n.filter(function(t){return!e.includes(t)});e.filter(function(t){return!n.includes(t)}).forEach(function(t){if(t!==c&&t in u){var e=u[t];h.removePlayer(e),delete u[t]}}),r.forEach(function(t){t!==c&&(u[t]=h.spawnPlayer())}),Object.keys(n).forEach(function(e){e!==c&&e in u&&u[e].setPosition(t[e][0],t[e][1])})}),e.on(dr.InStatusUpdate,function(t){Object.keys(t).forEach(function(e){e!==c&&e in u&&u[e].setPosition(t[e][0],t[e][1])})}),e.emit(dr.OutGetPlayersList),a.remember(function(){})),[4,i(a)];case 1:return h=t.sent(),f=h.spawnPlayer(),l=0,p=.1,d=s.fromValues(0,0),g=s.fromValues(0,0),e&&(u[e.id]=f,y=null,m=null,v=setInterval(function(){var t=g[0],n=g[1];y===t&&m===n||(y=t,m=n,e.emit(dr.OutStatusUpdate,Number(t.toFixed(3)),Number(n.toFixed(3))))},200),a.remember(function(){clearInterval(v)})),b=new Ar,a.remember(function(){b.destroy()}),w=3.33,C=.25,M=180,E=null,A=0,n(),[2,{destroy:r}]}})})}function Tr(t){Wn.error(t)}!function(t){t.InPlayersList="playersList",t.OutGetPlayersList="getPlayersList",t.OutStatusUpdate="statusUpdate",t.InStatusUpdate="statusUpdate"}(dr||(dr={})),function(){var t=(e="mainCanvas",document.getElementById(e));var e;if(!t)return Tr("Failed to find canvas");var n=t.getContext("webgl");if(!n)return Tr("Failed to get WebGL context");var r=null;try{r=new Mr(n)}catch(t){Wn.error("Failed to create renderer",{error:t})}if(!r)return;var i=null,o=new Vn;function s(t){var e=this;o.queue(function(){return Rr(e,void 0,void 0,function(){return xr(this,function(e){switch(e.label){case 0:return i&&i.destroy(),i=null,[4,t()];case 1:return i=e.sent(),[2]}})})})}s(function(){return Fr(r)}),a=function(t){Wn.log("Welcome, "+t);var e=Nn("https://elite-lillipilli.glitch.me/");e.on("connect",function(){Wn.log("connected"),s(function(){return Fr(r,e)})}),e.on("event",function(t){Wn.log(t)}),e.on("customPong",function(t){Wn.log("Received pong")}),e.on("disconnect",function(){Wn.log("disconnected")})},u=document.createElement("input"),u.setAttribute("type","button"),u.setAttribute("value","Go multiplayer"),u.setAttribute("style",["position: absolute","left: 1em","top: 1em"].join("; ")),u.addEventListener("click",function(){var t=function(t,e,n){var r=localStorage.getItem(t);if(r)return r;var i=e();return i?(localStorage.setItem(t,i.result),i.result):n}("name",function(){var t=prompt("Enter desired nickname:");return t?{result:t}:null},"noname");u.remove(),a(t)}),document.body.appendChild(u);var a,u}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,