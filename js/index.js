!function(t){var n={};function r(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)r.d(e,i,function(n){return t[n]}.bind(null,i));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=3)}({3:function(t,n,r){"use strict";r.r(n);var e={};r.r(e),r.d(e,"create",function(){return h}),r.d(e,"clone",function(){return f}),r.d(e,"copy",function(){return d}),r.d(e,"fromValues",function(){return l}),r.d(e,"set",function(){return M}),r.d(e,"identity",function(){return g}),r.d(e,"transpose",function(){return p}),r.d(e,"invert",function(){return v}),r.d(e,"adjoint",function(){return b}),r.d(e,"determinant",function(){return m}),r.d(e,"multiply",function(){return x}),r.d(e,"translate",function(){return R}),r.d(e,"scale",function(){return w}),r.d(e,"rotate",function(){return E}),r.d(e,"rotateX",function(){return y}),r.d(e,"rotateY",function(){return T}),r.d(e,"rotateZ",function(){return P}),r.d(e,"fromTranslation",function(){return A}),r.d(e,"fromScaling",function(){return C}),r.d(e,"fromRotation",function(){return _}),r.d(e,"fromXRotation",function(){return L}),r.d(e,"fromYRotation",function(){return W}),r.d(e,"fromZRotation",function(){return F}),r.d(e,"fromRotationTranslation",function(){return S}),r.d(e,"fromQuat2",function(){return G}),r.d(e,"getTranslation",function(){return D}),r.d(e,"getScaling",function(){return U}),r.d(e,"getRotation",function(){return I}),r.d(e,"fromRotationTranslationScale",function(){return V}),r.d(e,"fromRotationTranslationScaleOrigin",function(){return O}),r.d(e,"fromQuat",function(){return B}),r.d(e,"frustum",function(){return q}),r.d(e,"perspective",function(){return N}),r.d(e,"perspectiveFromFieldOfView",function(){return Y}),r.d(e,"ortho",function(){return z}),r.d(e,"lookAt",function(){return k}),r.d(e,"targetTo",function(){return j}),r.d(e,"str",function(){return K}),r.d(e,"frob",function(){return H}),r.d(e,"add",function(){return X}),r.d(e,"subtract",function(){return Z}),r.d(e,"multiplyScalar",function(){return Q}),r.d(e,"multiplyScalarAndAdd",function(){return J}),r.d(e,"exactEquals",function(){return $}),r.d(e,"equals",function(){return tt}),r.d(e,"mul",function(){return nt}),r.d(e,"sub",function(){return rt});var i={};r.r(i),r.d(i,"create",function(){return et}),r.d(i,"clone",function(){return it}),r.d(i,"length",function(){return ot}),r.d(i,"fromValues",function(){return at}),r.d(i,"copy",function(){return ut}),r.d(i,"set",function(){return st}),r.d(i,"add",function(){return ct}),r.d(i,"subtract",function(){return ht}),r.d(i,"multiply",function(){return ft}),r.d(i,"divide",function(){return dt}),r.d(i,"ceil",function(){return lt}),r.d(i,"floor",function(){return Mt}),r.d(i,"min",function(){return gt}),r.d(i,"max",function(){return pt}),r.d(i,"round",function(){return vt}),r.d(i,"scale",function(){return bt}),r.d(i,"scaleAndAdd",function(){return mt}),r.d(i,"distance",function(){return xt}),r.d(i,"squaredDistance",function(){return Rt}),r.d(i,"squaredLength",function(){return wt}),r.d(i,"negate",function(){return Et}),r.d(i,"inverse",function(){return yt}),r.d(i,"normalize",function(){return Tt}),r.d(i,"dot",function(){return Pt}),r.d(i,"cross",function(){return At}),r.d(i,"lerp",function(){return Ct}),r.d(i,"hermite",function(){return _t}),r.d(i,"bezier",function(){return Lt}),r.d(i,"random",function(){return Wt}),r.d(i,"transformMat4",function(){return Ft}),r.d(i,"transformMat3",function(){return St}),r.d(i,"transformQuat",function(){return Gt}),r.d(i,"rotateX",function(){return Dt}),r.d(i,"rotateY",function(){return Ut}),r.d(i,"rotateZ",function(){return It}),r.d(i,"angle",function(){return Vt}),r.d(i,"zero",function(){return Ot}),r.d(i,"str",function(){return Bt}),r.d(i,"exactEquals",function(){return qt}),r.d(i,"equals",function(){return Nt}),r.d(i,"sub",function(){return zt}),r.d(i,"mul",function(){return kt}),r.d(i,"div",function(){return jt}),r.d(i,"dist",function(){return Kt}),r.d(i,"sqrDist",function(){return Ht}),r.d(i,"len",function(){return Xt}),r.d(i,"sqrLen",function(){return Zt}),r.d(i,"forEach",function(){return Qt});var o={};r.r(o),r.d(o,"create",function(){return tn}),r.d(o,"identity",function(){return nn}),r.d(o,"setAxisAngle",function(){return rn}),r.d(o,"getAxisAngle",function(){return en}),r.d(o,"getAngle",function(){return on}),r.d(o,"multiply",function(){return an}),r.d(o,"rotateX",function(){return un}),r.d(o,"rotateY",function(){return sn}),r.d(o,"rotateZ",function(){return cn}),r.d(o,"calculateW",function(){return hn}),r.d(o,"exp",function(){return fn}),r.d(o,"ln",function(){return dn}),r.d(o,"pow",function(){return ln}),r.d(o,"slerp",function(){return Mn}),r.d(o,"random",function(){return gn}),r.d(o,"invert",function(){return pn}),r.d(o,"conjugate",function(){return vn}),r.d(o,"fromMat3",function(){return bn}),r.d(o,"fromEuler",function(){return mn}),r.d(o,"str",function(){return xn}),r.d(o,"clone",function(){return Cn}),r.d(o,"fromValues",function(){return _n}),r.d(o,"copy",function(){return Ln}),r.d(o,"set",function(){return Wn}),r.d(o,"add",function(){return Fn}),r.d(o,"mul",function(){return Sn}),r.d(o,"scale",function(){return Gn}),r.d(o,"dot",function(){return Dn}),r.d(o,"lerp",function(){return Un}),r.d(o,"length",function(){return In}),r.d(o,"len",function(){return Vn}),r.d(o,"squaredLength",function(){return On}),r.d(o,"sqrLen",function(){return Bn}),r.d(o,"normalize",function(){return qn}),r.d(o,"exactEquals",function(){return Nn}),r.d(o,"equals",function(){return Yn}),r.d(o,"rotationTo",function(){return zn}),r.d(o,"sqlerp",function(){return kn}),r.d(o,"setAxes",function(){return jn});var a={};r.r(a),r.d(a,"create",function(){return Kn}),r.d(a,"clone",function(){return Hn}),r.d(a,"fromValues",function(){return Xn}),r.d(a,"copy",function(){return Zn}),r.d(a,"set",function(){return Qn}),r.d(a,"add",function(){return Jn}),r.d(a,"subtract",function(){return $n}),r.d(a,"multiply",function(){return tr}),r.d(a,"divide",function(){return nr}),r.d(a,"ceil",function(){return rr}),r.d(a,"floor",function(){return er}),r.d(a,"min",function(){return ir}),r.d(a,"max",function(){return or}),r.d(a,"round",function(){return ar}),r.d(a,"scale",function(){return ur}),r.d(a,"scaleAndAdd",function(){return sr}),r.d(a,"distance",function(){return cr}),r.d(a,"squaredDistance",function(){return hr}),r.d(a,"length",function(){return fr}),r.d(a,"squaredLength",function(){return dr}),r.d(a,"negate",function(){return lr}),r.d(a,"inverse",function(){return Mr}),r.d(a,"normalize",function(){return gr}),r.d(a,"dot",function(){return pr}),r.d(a,"cross",function(){return vr}),r.d(a,"lerp",function(){return br}),r.d(a,"random",function(){return mr}),r.d(a,"transformMat2",function(){return xr}),r.d(a,"transformMat2d",function(){return Rr}),r.d(a,"transformMat3",function(){return wr}),r.d(a,"transformMat4",function(){return Er}),r.d(a,"rotate",function(){return yr}),r.d(a,"angle",function(){return Tr}),r.d(a,"zero",function(){return Pr}),r.d(a,"str",function(){return Ar}),r.d(a,"exactEquals",function(){return Cr}),r.d(a,"equals",function(){return _r}),r.d(a,"len",function(){return Lr}),r.d(a,"sub",function(){return Wr}),r.d(a,"mul",function(){return Fr}),r.d(a,"div",function(){return Sr}),r.d(a,"dist",function(){return Gr}),r.d(a,"sqrDist",function(){return Dr}),r.d(a,"sqrLen",function(){return Ur}),r.d(a,"forEach",function(){return Ir});var u=1e-6,s="undefined"!=typeof Float32Array?Float32Array:Array,c=Math.random;Math.PI;function h(){var t=new s(16);return s!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function f(t){var n=new s(16);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n[4]=t[4],n[5]=t[5],n[6]=t[6],n[7]=t[7],n[8]=t[8],n[9]=t[9],n[10]=t[10],n[11]=t[11],n[12]=t[12],n[13]=t[13],n[14]=t[14],n[15]=t[15],n}function d(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function l(t,n,r,e,i,o,a,u,c,h,f,d,l,M,g,p){var v=new s(16);return v[0]=t,v[1]=n,v[2]=r,v[3]=e,v[4]=i,v[5]=o,v[6]=a,v[7]=u,v[8]=c,v[9]=h,v[10]=f,v[11]=d,v[12]=l,v[13]=M,v[14]=g,v[15]=p,v}function M(t,n,r,e,i,o,a,u,s,c,h,f,d,l,M,g,p){return t[0]=n,t[1]=r,t[2]=e,t[3]=i,t[4]=o,t[5]=a,t[6]=u,t[7]=s,t[8]=c,t[9]=h,t[10]=f,t[11]=d,t[12]=l,t[13]=M,t[14]=g,t[15]=p,t}function g(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function p(t,n){if(t===n){var r=n[1],e=n[2],i=n[3],o=n[6],a=n[7],u=n[11];t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=r,t[6]=n[9],t[7]=n[13],t[8]=e,t[9]=o,t[11]=n[14],t[12]=i,t[13]=a,t[14]=u}else t[0]=n[0],t[1]=n[4],t[2]=n[8],t[3]=n[12],t[4]=n[1],t[5]=n[5],t[6]=n[9],t[7]=n[13],t[8]=n[2],t[9]=n[6],t[10]=n[10],t[11]=n[14],t[12]=n[3],t[13]=n[7],t[14]=n[11],t[15]=n[15];return t}function v(t,n){var r=n[0],e=n[1],i=n[2],o=n[3],a=n[4],u=n[5],s=n[6],c=n[7],h=n[8],f=n[9],d=n[10],l=n[11],M=n[12],g=n[13],p=n[14],v=n[15],b=r*u-e*a,m=r*s-i*a,x=r*c-o*a,R=e*s-i*u,w=e*c-o*u,E=i*c-o*s,y=h*g-f*M,T=h*p-d*M,P=h*v-l*M,A=f*p-d*g,C=f*v-l*g,_=d*v-l*p,L=b*_-m*C+x*A+R*P-w*T+E*y;return L?(L=1/L,t[0]=(u*_-s*C+c*A)*L,t[1]=(i*C-e*_-o*A)*L,t[2]=(g*E-p*w+v*R)*L,t[3]=(d*w-f*E-l*R)*L,t[4]=(s*P-a*_-c*T)*L,t[5]=(r*_-i*P+o*T)*L,t[6]=(p*x-M*E-v*m)*L,t[7]=(h*E-d*x+l*m)*L,t[8]=(a*C-u*P+c*y)*L,t[9]=(e*P-r*C-o*y)*L,t[10]=(M*w-g*x+v*b)*L,t[11]=(f*x-h*w-l*b)*L,t[12]=(u*T-a*A-s*y)*L,t[13]=(r*A-e*T+i*y)*L,t[14]=(g*m-M*R-p*b)*L,t[15]=(h*R-f*m+d*b)*L,t):null}function b(t,n){var r=n[0],e=n[1],i=n[2],o=n[3],a=n[4],u=n[5],s=n[6],c=n[7],h=n[8],f=n[9],d=n[10],l=n[11],M=n[12],g=n[13],p=n[14],v=n[15];return t[0]=u*(d*v-l*p)-f*(s*v-c*p)+g*(s*l-c*d),t[1]=-(e*(d*v-l*p)-f*(i*v-o*p)+g*(i*l-o*d)),t[2]=e*(s*v-c*p)-u*(i*v-o*p)+g*(i*c-o*s),t[3]=-(e*(s*l-c*d)-u*(i*l-o*d)+f*(i*c-o*s)),t[4]=-(a*(d*v-l*p)-h*(s*v-c*p)+M*(s*l-c*d)),t[5]=r*(d*v-l*p)-h*(i*v-o*p)+M*(i*l-o*d),t[6]=-(r*(s*v-c*p)-a*(i*v-o*p)+M*(i*c-o*s)),t[7]=r*(s*l-c*d)-a*(i*l-o*d)+h*(i*c-o*s),t[8]=a*(f*v-l*g)-h*(u*v-c*g)+M*(u*l-c*f),t[9]=-(r*(f*v-l*g)-h*(e*v-o*g)+M*(e*l-o*f)),t[10]=r*(u*v-c*g)-a*(e*v-o*g)+M*(e*c-o*u),t[11]=-(r*(u*l-c*f)-a*(e*l-o*f)+h*(e*c-o*u)),t[12]=-(a*(f*p-d*g)-h*(u*p-s*g)+M*(u*d-s*f)),t[13]=r*(f*p-d*g)-h*(e*p-i*g)+M*(e*d-i*f),t[14]=-(r*(u*p-s*g)-a*(e*p-i*g)+M*(e*s-i*u)),t[15]=r*(u*d-s*f)-a*(e*d-i*f)+h*(e*s-i*u),t}function m(t){var n=t[0],r=t[1],e=t[2],i=t[3],o=t[4],a=t[5],u=t[6],s=t[7],c=t[8],h=t[9],f=t[10],d=t[11],l=t[12],M=t[13],g=t[14],p=t[15];return(n*a-r*o)*(f*p-d*g)-(n*u-e*o)*(h*p-d*M)+(n*s-i*o)*(h*g-f*M)+(r*u-e*a)*(c*p-d*l)-(r*s-i*a)*(c*g-f*l)+(e*s-i*u)*(c*M-h*l)}function x(t,n,r){var e=n[0],i=n[1],o=n[2],a=n[3],u=n[4],s=n[5],c=n[6],h=n[7],f=n[8],d=n[9],l=n[10],M=n[11],g=n[12],p=n[13],v=n[14],b=n[15],m=r[0],x=r[1],R=r[2],w=r[3];return t[0]=m*e+x*u+R*f+w*g,t[1]=m*i+x*s+R*d+w*p,t[2]=m*o+x*c+R*l+w*v,t[3]=m*a+x*h+R*M+w*b,m=r[4],x=r[5],R=r[6],w=r[7],t[4]=m*e+x*u+R*f+w*g,t[5]=m*i+x*s+R*d+w*p,t[6]=m*o+x*c+R*l+w*v,t[7]=m*a+x*h+R*M+w*b,m=r[8],x=r[9],R=r[10],w=r[11],t[8]=m*e+x*u+R*f+w*g,t[9]=m*i+x*s+R*d+w*p,t[10]=m*o+x*c+R*l+w*v,t[11]=m*a+x*h+R*M+w*b,m=r[12],x=r[13],R=r[14],w=r[15],t[12]=m*e+x*u+R*f+w*g,t[13]=m*i+x*s+R*d+w*p,t[14]=m*o+x*c+R*l+w*v,t[15]=m*a+x*h+R*M+w*b,t}function R(t,n,r){var e,i,o,a,u,s,c,h,f,d,l,M,g=r[0],p=r[1],v=r[2];return n===t?(t[12]=n[0]*g+n[4]*p+n[8]*v+n[12],t[13]=n[1]*g+n[5]*p+n[9]*v+n[13],t[14]=n[2]*g+n[6]*p+n[10]*v+n[14],t[15]=n[3]*g+n[7]*p+n[11]*v+n[15]):(e=n[0],i=n[1],o=n[2],a=n[3],u=n[4],s=n[5],c=n[6],h=n[7],f=n[8],d=n[9],l=n[10],M=n[11],t[0]=e,t[1]=i,t[2]=o,t[3]=a,t[4]=u,t[5]=s,t[6]=c,t[7]=h,t[8]=f,t[9]=d,t[10]=l,t[11]=M,t[12]=e*g+u*p+f*v+n[12],t[13]=i*g+s*p+d*v+n[13],t[14]=o*g+c*p+l*v+n[14],t[15]=a*g+h*p+M*v+n[15]),t}function w(t,n,r){var e=r[0],i=r[1],o=r[2];return t[0]=n[0]*e,t[1]=n[1]*e,t[2]=n[2]*e,t[3]=n[3]*e,t[4]=n[4]*i,t[5]=n[5]*i,t[6]=n[6]*i,t[7]=n[7]*i,t[8]=n[8]*o,t[9]=n[9]*o,t[10]=n[10]*o,t[11]=n[11]*o,t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15],t}function E(t,n,r,e){var i,o,a,s,c,h,f,d,l,M,g,p,v,b,m,x,R,w,E,y,T,P,A,C,_=e[0],L=e[1],W=e[2],F=Math.hypot(_,L,W);return F<u?null:(_*=F=1/F,L*=F,W*=F,i=Math.sin(r),a=1-(o=Math.cos(r)),s=n[0],c=n[1],h=n[2],f=n[3],d=n[4],l=n[5],M=n[6],g=n[7],p=n[8],v=n[9],b=n[10],m=n[11],x=_*_*a+o,R=L*_*a+W*i,w=W*_*a-L*i,E=_*L*a-W*i,y=L*L*a+o,T=W*L*a+_*i,P=_*W*a+L*i,A=L*W*a-_*i,C=W*W*a+o,t[0]=s*x+d*R+p*w,t[1]=c*x+l*R+v*w,t[2]=h*x+M*R+b*w,t[3]=f*x+g*R+m*w,t[4]=s*E+d*y+p*T,t[5]=c*E+l*y+v*T,t[6]=h*E+M*y+b*T,t[7]=f*E+g*y+m*T,t[8]=s*P+d*A+p*C,t[9]=c*P+l*A+v*C,t[10]=h*P+M*A+b*C,t[11]=f*P+g*A+m*C,n!==t&&(t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t)}function y(t,n,r){var e=Math.sin(r),i=Math.cos(r),o=n[4],a=n[5],u=n[6],s=n[7],c=n[8],h=n[9],f=n[10],d=n[11];return n!==t&&(t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[4]=o*i+c*e,t[5]=a*i+h*e,t[6]=u*i+f*e,t[7]=s*i+d*e,t[8]=c*i-o*e,t[9]=h*i-a*e,t[10]=f*i-u*e,t[11]=d*i-s*e,t}function T(t,n,r){var e=Math.sin(r),i=Math.cos(r),o=n[0],a=n[1],u=n[2],s=n[3],c=n[8],h=n[9],f=n[10],d=n[11];return n!==t&&(t[4]=n[4],t[5]=n[5],t[6]=n[6],t[7]=n[7],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=o*i-c*e,t[1]=a*i-h*e,t[2]=u*i-f*e,t[3]=s*i-d*e,t[8]=o*e+c*i,t[9]=a*e+h*i,t[10]=u*e+f*i,t[11]=s*e+d*i,t}function P(t,n,r){var e=Math.sin(r),i=Math.cos(r),o=n[0],a=n[1],u=n[2],s=n[3],c=n[4],h=n[5],f=n[6],d=n[7];return n!==t&&(t[8]=n[8],t[9]=n[9],t[10]=n[10],t[11]=n[11],t[12]=n[12],t[13]=n[13],t[14]=n[14],t[15]=n[15]),t[0]=o*i+c*e,t[1]=a*i+h*e,t[2]=u*i+f*e,t[3]=s*i+d*e,t[4]=c*i-o*e,t[5]=h*i-a*e,t[6]=f*i-u*e,t[7]=d*i-s*e,t}function A(t,n){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function C(t,n){return t[0]=n[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=n[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=n[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function _(t,n,r){var e,i,o,a=r[0],s=r[1],c=r[2],h=Math.hypot(a,s,c);return h<u?null:(a*=h=1/h,s*=h,c*=h,e=Math.sin(n),o=1-(i=Math.cos(n)),t[0]=a*a*o+i,t[1]=s*a*o+c*e,t[2]=c*a*o-s*e,t[3]=0,t[4]=a*s*o-c*e,t[5]=s*s*o+i,t[6]=c*s*o+a*e,t[7]=0,t[8]=a*c*o+s*e,t[9]=s*c*o-a*e,t[10]=c*c*o+i,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function L(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e,t[6]=r,t[7]=0,t[8]=0,t[9]=-r,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function W(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=0,t[2]=-r,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=r,t[9]=0,t[10]=e,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function F(t,n){var r=Math.sin(n),e=Math.cos(n);return t[0]=e,t[1]=r,t[2]=0,t[3]=0,t[4]=-r,t[5]=e,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function S(t,n,r){var e=n[0],i=n[1],o=n[2],a=n[3],u=e+e,s=i+i,c=o+o,h=e*u,f=e*s,d=e*c,l=i*s,M=i*c,g=o*c,p=a*u,v=a*s,b=a*c;return t[0]=1-(l+g),t[1]=f+b,t[2]=d-v,t[3]=0,t[4]=f-b,t[5]=1-(h+g),t[6]=M+p,t[7]=0,t[8]=d+v,t[9]=M-p,t[10]=1-(h+l),t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function G(t,n){var r=new s(3),e=-n[0],i=-n[1],o=-n[2],a=n[3],u=n[4],c=n[5],h=n[6],f=n[7],d=e*e+i*i+o*o+a*a;return d>0?(r[0]=2*(u*a+f*e+c*o-h*i)/d,r[1]=2*(c*a+f*i+h*e-u*o)/d,r[2]=2*(h*a+f*o+u*i-c*e)/d):(r[0]=2*(u*a+f*e+c*o-h*i),r[1]=2*(c*a+f*i+h*e-u*o),r[2]=2*(h*a+f*o+u*i-c*e)),S(t,n,r),t}function D(t,n){return t[0]=n[12],t[1]=n[13],t[2]=n[14],t}function U(t,n){var r=n[0],e=n[1],i=n[2],o=n[4],a=n[5],u=n[6],s=n[8],c=n[9],h=n[10];return t[0]=Math.hypot(r,e,i),t[1]=Math.hypot(o,a,u),t[2]=Math.hypot(s,c,h),t}function I(t,n){var r=new s(3);U(r,n);var e=1/r[0],i=1/r[1],o=1/r[2],a=n[0]*e,u=n[1]*i,c=n[2]*o,h=n[4]*e,f=n[5]*i,d=n[6]*o,l=n[8]*e,M=n[9]*i,g=n[10]*o,p=a+f+g,v=0;return p>0?(v=2*Math.sqrt(p+1),t[3]=.25*v,t[0]=(d-M)/v,t[1]=(l-c)/v,t[2]=(u-h)/v):a>f&&a>g?(v=2*Math.sqrt(1+a-f-g),t[3]=(d-M)/v,t[0]=.25*v,t[1]=(u+h)/v,t[2]=(l+c)/v):f>g?(v=2*Math.sqrt(1+f-a-g),t[3]=(l-c)/v,t[0]=(u+h)/v,t[1]=.25*v,t[2]=(d+M)/v):(v=2*Math.sqrt(1+g-a-f),t[3]=(u-h)/v,t[0]=(l+c)/v,t[1]=(d+M)/v,t[2]=.25*v),t}function V(t,n,r,e){var i=n[0],o=n[1],a=n[2],u=n[3],s=i+i,c=o+o,h=a+a,f=i*s,d=i*c,l=i*h,M=o*c,g=o*h,p=a*h,v=u*s,b=u*c,m=u*h,x=e[0],R=e[1],w=e[2];return t[0]=(1-(M+p))*x,t[1]=(d+m)*x,t[2]=(l-b)*x,t[3]=0,t[4]=(d-m)*R,t[5]=(1-(f+p))*R,t[6]=(g+v)*R,t[7]=0,t[8]=(l+b)*w,t[9]=(g-v)*w,t[10]=(1-(f+M))*w,t[11]=0,t[12]=r[0],t[13]=r[1],t[14]=r[2],t[15]=1,t}function O(t,n,r,e,i){var o=n[0],a=n[1],u=n[2],s=n[3],c=o+o,h=a+a,f=u+u,d=o*c,l=o*h,M=o*f,g=a*h,p=a*f,v=u*f,b=s*c,m=s*h,x=s*f,R=e[0],w=e[1],E=e[2],y=i[0],T=i[1],P=i[2],A=(1-(g+v))*R,C=(l+x)*R,_=(M-m)*R,L=(l-x)*w,W=(1-(d+v))*w,F=(p+b)*w,S=(M+m)*E,G=(p-b)*E,D=(1-(d+g))*E;return t[0]=A,t[1]=C,t[2]=_,t[3]=0,t[4]=L,t[5]=W,t[6]=F,t[7]=0,t[8]=S,t[9]=G,t[10]=D,t[11]=0,t[12]=r[0]+y-(A*y+L*T+S*P),t[13]=r[1]+T-(C*y+W*T+G*P),t[14]=r[2]+P-(_*y+F*T+D*P),t[15]=1,t}function B(t,n){var r=n[0],e=n[1],i=n[2],o=n[3],a=r+r,u=e+e,s=i+i,c=r*a,h=e*a,f=e*u,d=i*a,l=i*u,M=i*s,g=o*a,p=o*u,v=o*s;return t[0]=1-f-M,t[1]=h+v,t[2]=d-p,t[3]=0,t[4]=h-v,t[5]=1-c-M,t[6]=l+g,t[7]=0,t[8]=d+p,t[9]=l-g,t[10]=1-c-f,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function q(t,n,r,e,i,o,a){var u=1/(r-n),s=1/(i-e),c=1/(o-a);return t[0]=2*o*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*o*s,t[6]=0,t[7]=0,t[8]=(r+n)*u,t[9]=(i+e)*s,t[10]=(a+o)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=a*o*2*c,t[15]=0,t}function N(t,n,r,e,i){var o,a=1/Math.tan(n/2);return t[0]=a/r,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=i&&i!==1/0?(o=1/(e-i),t[10]=(i+e)*o,t[14]=2*i*e*o):(t[10]=-1,t[14]=-2*e),t}function Y(t,n,r,e){var i=Math.tan(n.upDegrees*Math.PI/180),o=Math.tan(n.downDegrees*Math.PI/180),a=Math.tan(n.leftDegrees*Math.PI/180),u=Math.tan(n.rightDegrees*Math.PI/180),s=2/(a+u),c=2/(i+o);return t[0]=s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(a-u)*s*.5,t[9]=(i-o)*c*.5,t[10]=e/(r-e),t[11]=-1,t[12]=0,t[13]=0,t[14]=e*r/(r-e),t[15]=0,t}function z(t,n,r,e,i,o,a){var u=1/(n-r),s=1/(e-i),c=1/(o-a);return t[0]=-2*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(n+r)*u,t[13]=(i+e)*s,t[14]=(a+o)*c,t[15]=1,t}function k(t,n,r,e){var i,o,a,s,c,h,f,d,l,M,p=n[0],v=n[1],b=n[2],m=e[0],x=e[1],R=e[2],w=r[0],E=r[1],y=r[2];return Math.abs(p-w)<u&&Math.abs(v-E)<u&&Math.abs(b-y)<u?g(t):(f=p-w,d=v-E,l=b-y,i=x*(l*=M=1/Math.hypot(f,d,l))-R*(d*=M),o=R*(f*=M)-m*l,a=m*d-x*f,(M=Math.hypot(i,o,a))?(i*=M=1/M,o*=M,a*=M):(i=0,o=0,a=0),s=d*a-l*o,c=l*i-f*a,h=f*o-d*i,(M=Math.hypot(s,c,h))?(s*=M=1/M,c*=M,h*=M):(s=0,c=0,h=0),t[0]=i,t[1]=s,t[2]=f,t[3]=0,t[4]=o,t[5]=c,t[6]=d,t[7]=0,t[8]=a,t[9]=h,t[10]=l,t[11]=0,t[12]=-(i*p+o*v+a*b),t[13]=-(s*p+c*v+h*b),t[14]=-(f*p+d*v+l*b),t[15]=1,t)}function j(t,n,r,e){var i=n[0],o=n[1],a=n[2],u=e[0],s=e[1],c=e[2],h=i-r[0],f=o-r[1],d=a-r[2],l=h*h+f*f+d*d;l>0&&(h*=l=1/Math.sqrt(l),f*=l,d*=l);var M=s*d-c*f,g=c*h-u*d,p=u*f-s*h;return(l=M*M+g*g+p*p)>0&&(M*=l=1/Math.sqrt(l),g*=l,p*=l),t[0]=M,t[1]=g,t[2]=p,t[3]=0,t[4]=f*p-d*g,t[5]=d*M-h*p,t[6]=h*g-f*M,t[7]=0,t[8]=h,t[9]=f,t[10]=d,t[11]=0,t[12]=i,t[13]=o,t[14]=a,t[15]=1,t}function K(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function H(t){return Math.hypot(t[0],t[1],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function X(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t[4]=n[4]+r[4],t[5]=n[5]+r[5],t[6]=n[6]+r[6],t[7]=n[7]+r[7],t[8]=n[8]+r[8],t[9]=n[9]+r[9],t[10]=n[10]+r[10],t[11]=n[11]+r[11],t[12]=n[12]+r[12],t[13]=n[13]+r[13],t[14]=n[14]+r[14],t[15]=n[15]+r[15],t}function Z(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t[3]=n[3]-r[3],t[4]=n[4]-r[4],t[5]=n[5]-r[5],t[6]=n[6]-r[6],t[7]=n[7]-r[7],t[8]=n[8]-r[8],t[9]=n[9]-r[9],t[10]=n[10]-r[10],t[11]=n[11]-r[11],t[12]=n[12]-r[12],t[13]=n[13]-r[13],t[14]=n[14]-r[14],t[15]=n[15]-r[15],t}function Q(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t[4]=n[4]*r,t[5]=n[5]*r,t[6]=n[6]*r,t[7]=n[7]*r,t[8]=n[8]*r,t[9]=n[9]*r,t[10]=n[10]*r,t[11]=n[11]*r,t[12]=n[12]*r,t[13]=n[13]*r,t[14]=n[14]*r,t[15]=n[15]*r,t}function J(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t[3]=n[3]+r[3]*e,t[4]=n[4]+r[4]*e,t[5]=n[5]+r[5]*e,t[6]=n[6]+r[6]*e,t[7]=n[7]+r[7]*e,t[8]=n[8]+r[8]*e,t[9]=n[9]+r[9]*e,t[10]=n[10]+r[10]*e,t[11]=n[11]+r[11]*e,t[12]=n[12]+r[12]*e,t[13]=n[13]+r[13]*e,t[14]=n[14]+r[14]*e,t[15]=n[15]+r[15]*e,t}function $(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]&&t[4]===n[4]&&t[5]===n[5]&&t[6]===n[6]&&t[7]===n[7]&&t[8]===n[8]&&t[9]===n[9]&&t[10]===n[10]&&t[11]===n[11]&&t[12]===n[12]&&t[13]===n[13]&&t[14]===n[14]&&t[15]===n[15]}function tt(t,n){var r=t[0],e=t[1],i=t[2],o=t[3],a=t[4],s=t[5],c=t[6],h=t[7],f=t[8],d=t[9],l=t[10],M=t[11],g=t[12],p=t[13],v=t[14],b=t[15],m=n[0],x=n[1],R=n[2],w=n[3],E=n[4],y=n[5],T=n[6],P=n[7],A=n[8],C=n[9],_=n[10],L=n[11],W=n[12],F=n[13],S=n[14],G=n[15];return Math.abs(r-m)<=u*Math.max(1,Math.abs(r),Math.abs(m))&&Math.abs(e-x)<=u*Math.max(1,Math.abs(e),Math.abs(x))&&Math.abs(i-R)<=u*Math.max(1,Math.abs(i),Math.abs(R))&&Math.abs(o-w)<=u*Math.max(1,Math.abs(o),Math.abs(w))&&Math.abs(a-E)<=u*Math.max(1,Math.abs(a),Math.abs(E))&&Math.abs(s-y)<=u*Math.max(1,Math.abs(s),Math.abs(y))&&Math.abs(c-T)<=u*Math.max(1,Math.abs(c),Math.abs(T))&&Math.abs(h-P)<=u*Math.max(1,Math.abs(h),Math.abs(P))&&Math.abs(f-A)<=u*Math.max(1,Math.abs(f),Math.abs(A))&&Math.abs(d-C)<=u*Math.max(1,Math.abs(d),Math.abs(C))&&Math.abs(l-_)<=u*Math.max(1,Math.abs(l),Math.abs(_))&&Math.abs(M-L)<=u*Math.max(1,Math.abs(M),Math.abs(L))&&Math.abs(g-W)<=u*Math.max(1,Math.abs(g),Math.abs(W))&&Math.abs(p-F)<=u*Math.max(1,Math.abs(p),Math.abs(F))&&Math.abs(v-S)<=u*Math.max(1,Math.abs(v),Math.abs(S))&&Math.abs(b-G)<=u*Math.max(1,Math.abs(b),Math.abs(G))}Math.hypot||(Math.hypot=function(){for(var t=0,n=arguments.length;n--;)t+=arguments[n]*arguments[n];return Math.sqrt(t)});var nt=x,rt=Z;function et(){var t=new s(3);return s!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function it(t){var n=new s(3);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n}function ot(t){var n=t[0],r=t[1],e=t[2];return Math.hypot(n,r,e)}function at(t,n,r){var e=new s(3);return e[0]=t,e[1]=n,e[2]=r,e}function ut(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t}function st(t,n,r,e){return t[0]=n,t[1]=r,t[2]=e,t}function ct(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t}function ht(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t[2]=n[2]-r[2],t}function ft(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t[2]=n[2]*r[2],t}function dt(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t[2]=n[2]/r[2],t}function lt(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t[2]=Math.ceil(n[2]),t}function Mt(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t[2]=Math.floor(n[2]),t}function gt(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t[2]=Math.min(n[2],r[2]),t}function pt(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t[2]=Math.max(n[2],r[2]),t}function vt(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t[2]=Math.round(n[2]),t}function bt(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t}function mt(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t[2]=n[2]+r[2]*e,t}function xt(t,n){var r=n[0]-t[0],e=n[1]-t[1],i=n[2]-t[2];return Math.hypot(r,e,i)}function Rt(t,n){var r=n[0]-t[0],e=n[1]-t[1],i=n[2]-t[2];return r*r+e*e+i*i}function wt(t){var n=t[0],r=t[1],e=t[2];return n*n+r*r+e*e}function Et(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t}function yt(t,n){return t[0]=1/n[0],t[1]=1/n[1],t[2]=1/n[2],t}function Tt(t,n){var r=n[0],e=n[1],i=n[2],o=r*r+e*e+i*i;return o>0&&(o=1/Math.sqrt(o)),t[0]=n[0]*o,t[1]=n[1]*o,t[2]=n[2]*o,t}function Pt(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function At(t,n,r){var e=n[0],i=n[1],o=n[2],a=r[0],u=r[1],s=r[2];return t[0]=i*s-o*u,t[1]=o*a-e*s,t[2]=e*u-i*a,t}function Ct(t,n,r,e){var i=n[0],o=n[1],a=n[2];return t[0]=i+e*(r[0]-i),t[1]=o+e*(r[1]-o),t[2]=a+e*(r[2]-a),t}function _t(t,n,r,e,i,o){var a=o*o,u=a*(2*o-3)+1,s=a*(o-2)+o,c=a*(o-1),h=a*(3-2*o);return t[0]=n[0]*u+r[0]*s+e[0]*c+i[0]*h,t[1]=n[1]*u+r[1]*s+e[1]*c+i[1]*h,t[2]=n[2]*u+r[2]*s+e[2]*c+i[2]*h,t}function Lt(t,n,r,e,i,o){var a=1-o,u=a*a,s=o*o,c=u*a,h=3*o*u,f=3*s*a,d=s*o;return t[0]=n[0]*c+r[0]*h+e[0]*f+i[0]*d,t[1]=n[1]*c+r[1]*h+e[1]*f+i[1]*d,t[2]=n[2]*c+r[2]*h+e[2]*f+i[2]*d,t}function Wt(t,n){n=n||1;var r=2*c()*Math.PI,e=2*c()-1,i=Math.sqrt(1-e*e)*n;return t[0]=Math.cos(r)*i,t[1]=Math.sin(r)*i,t[2]=e*n,t}function Ft(t,n,r){var e=n[0],i=n[1],o=n[2],a=r[3]*e+r[7]*i+r[11]*o+r[15];return a=a||1,t[0]=(r[0]*e+r[4]*i+r[8]*o+r[12])/a,t[1]=(r[1]*e+r[5]*i+r[9]*o+r[13])/a,t[2]=(r[2]*e+r[6]*i+r[10]*o+r[14])/a,t}function St(t,n,r){var e=n[0],i=n[1],o=n[2];return t[0]=e*r[0]+i*r[3]+o*r[6],t[1]=e*r[1]+i*r[4]+o*r[7],t[2]=e*r[2]+i*r[5]+o*r[8],t}function Gt(t,n,r){var e=r[0],i=r[1],o=r[2],a=r[3],u=n[0],s=n[1],c=n[2],h=i*c-o*s,f=o*u-e*c,d=e*s-i*u,l=i*d-o*f,M=o*h-e*d,g=e*f-i*h,p=2*a;return h*=p,f*=p,d*=p,l*=2,M*=2,g*=2,t[0]=u+h+l,t[1]=s+f+M,t[2]=c+d+g,t}function Dt(t,n,r,e){var i=[],o=[];return i[0]=n[0]-r[0],i[1]=n[1]-r[1],i[2]=n[2]-r[2],o[0]=i[0],o[1]=i[1]*Math.cos(e)-i[2]*Math.sin(e),o[2]=i[1]*Math.sin(e)+i[2]*Math.cos(e),t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t}function Ut(t,n,r,e){var i=[],o=[];return i[0]=n[0]-r[0],i[1]=n[1]-r[1],i[2]=n[2]-r[2],o[0]=i[2]*Math.sin(e)+i[0]*Math.cos(e),o[1]=i[1],o[2]=i[2]*Math.cos(e)-i[0]*Math.sin(e),t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t}function It(t,n,r,e){var i=[],o=[];return i[0]=n[0]-r[0],i[1]=n[1]-r[1],i[2]=n[2]-r[2],o[0]=i[0]*Math.cos(e)-i[1]*Math.sin(e),o[1]=i[0]*Math.sin(e)+i[1]*Math.cos(e),o[2]=i[2],t[0]=o[0]+r[0],t[1]=o[1]+r[1],t[2]=o[2]+r[2],t}function Vt(t,n){var r=at(t[0],t[1],t[2]),e=at(n[0],n[1],n[2]);Tt(r,r),Tt(e,e);var i=Pt(r,e);return i>1?0:i<-1?Math.PI:Math.acos(i)}function Ot(t){return t[0]=0,t[1]=0,t[2]=0,t}function Bt(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function qt(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]}function Nt(t,n){var r=t[0],e=t[1],i=t[2],o=n[0],a=n[1],s=n[2];return Math.abs(r-o)<=u*Math.max(1,Math.abs(r),Math.abs(o))&&Math.abs(e-a)<=u*Math.max(1,Math.abs(e),Math.abs(a))&&Math.abs(i-s)<=u*Math.max(1,Math.abs(i),Math.abs(s))}var Yt,zt=ht,kt=ft,jt=dt,Kt=xt,Ht=Rt,Xt=ot,Zt=wt,Qt=(Yt=et(),function(t,n,r,e,i,o){var a,u;for(n||(n=3),r||(r=0),u=e?Math.min(e*n+r,t.length):t.length,a=r;a<u;a+=n)Yt[0]=t[a],Yt[1]=t[a+1],Yt[2]=t[a+2],i(Yt,Yt,o),t[a]=Yt[0],t[a+1]=Yt[1],t[a+2]=Yt[2];return t});function Jt(t){var n=t[0],r=t[1],e=t[2],i=t[3];return Math.hypot(n,r,e,i)}function $t(t){var n=t[0],r=t[1],e=t[2],i=t[3];return n*n+r*r+e*e+i*i}!function(){var t,n=(t=new s(4),s!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t)}();function tn(){var t=new s(4);return s!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function nn(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function rn(t,n,r){r*=.5;var e=Math.sin(r);return t[0]=e*n[0],t[1]=e*n[1],t[2]=e*n[2],t[3]=Math.cos(r),t}function en(t,n){var r=2*Math.acos(n[3]),e=Math.sin(r/2);return e>u?(t[0]=n[0]/e,t[1]=n[1]/e,t[2]=n[2]/e):(t[0]=1,t[1]=0,t[2]=0),r}function on(t,n){var r=Dn(t,n);return Math.acos(2*r*r-1)}function an(t,n,r){var e=n[0],i=n[1],o=n[2],a=n[3],u=r[0],s=r[1],c=r[2],h=r[3];return t[0]=e*h+a*u+i*c-o*s,t[1]=i*h+a*s+o*u-e*c,t[2]=o*h+a*c+e*s-i*u,t[3]=a*h-e*u-i*s-o*c,t}function un(t,n,r){r*=.5;var e=n[0],i=n[1],o=n[2],a=n[3],u=Math.sin(r),s=Math.cos(r);return t[0]=e*s+a*u,t[1]=i*s+o*u,t[2]=o*s-i*u,t[3]=a*s-e*u,t}function sn(t,n,r){r*=.5;var e=n[0],i=n[1],o=n[2],a=n[3],u=Math.sin(r),s=Math.cos(r);return t[0]=e*s-o*u,t[1]=i*s+a*u,t[2]=o*s+e*u,t[3]=a*s-i*u,t}function cn(t,n,r){r*=.5;var e=n[0],i=n[1],o=n[2],a=n[3],u=Math.sin(r),s=Math.cos(r);return t[0]=e*s+i*u,t[1]=i*s-e*u,t[2]=o*s+a*u,t[3]=a*s-o*u,t}function hn(t,n){var r=n[0],e=n[1],i=n[2];return t[0]=r,t[1]=e,t[2]=i,t[3]=Math.sqrt(Math.abs(1-r*r-e*e-i*i)),t}function fn(t,n){var r=n[0],e=n[1],i=n[2],o=n[3],a=Math.sqrt(r*r+e*e+i*i),u=Math.exp(o),s=a>0?u*Math.sin(a)/a:0;return t[0]=r*s,t[1]=e*s,t[2]=i*s,t[3]=u*Math.cos(a),t}function dn(t,n){var r=n[0],e=n[1],i=n[2],o=n[3],a=Math.sqrt(r*r+e*e+i*i),u=a>0?Math.atan2(a,o)/a:0;return t[0]=r*u,t[1]=e*u,t[2]=i*u,t[3]=.5*Math.log(r*r+e*e+i*i+o*o),t}function ln(t,n,r){return dn(t,n),Gn(t,t,r),fn(t,t),t}function Mn(t,n,r,e){var i,o,a,s,c,h=n[0],f=n[1],d=n[2],l=n[3],M=r[0],g=r[1],p=r[2],v=r[3];return(o=h*M+f*g+d*p+l*v)<0&&(o=-o,M=-M,g=-g,p=-p,v=-v),1-o>u?(i=Math.acos(o),a=Math.sin(i),s=Math.sin((1-e)*i)/a,c=Math.sin(e*i)/a):(s=1-e,c=e),t[0]=s*h+c*M,t[1]=s*f+c*g,t[2]=s*d+c*p,t[3]=s*l+c*v,t}function gn(t){var n=c(),r=c(),e=c(),i=Math.sqrt(1-n),o=Math.sqrt(n);return t[0]=i*Math.sin(2*Math.PI*r),t[1]=i*Math.cos(2*Math.PI*r),t[2]=o*Math.sin(2*Math.PI*e),t[3]=o*Math.cos(2*Math.PI*e),t}function pn(t,n){var r=n[0],e=n[1],i=n[2],o=n[3],a=r*r+e*e+i*i+o*o,u=a?1/a:0;return t[0]=-r*u,t[1]=-e*u,t[2]=-i*u,t[3]=o*u,t}function vn(t,n){return t[0]=-n[0],t[1]=-n[1],t[2]=-n[2],t[3]=n[3],t}function bn(t,n){var r,e=n[0]+n[4]+n[8];if(e>0)r=Math.sqrt(e+1),t[3]=.5*r,r=.5/r,t[0]=(n[5]-n[7])*r,t[1]=(n[6]-n[2])*r,t[2]=(n[1]-n[3])*r;else{var i=0;n[4]>n[0]&&(i=1),n[8]>n[3*i+i]&&(i=2);var o=(i+1)%3,a=(i+2)%3;r=Math.sqrt(n[3*i+i]-n[3*o+o]-n[3*a+a]+1),t[i]=.5*r,r=.5/r,t[3]=(n[3*o+a]-n[3*a+o])*r,t[o]=(n[3*o+i]+n[3*i+o])*r,t[a]=(n[3*a+i]+n[3*i+a])*r}return t}function mn(t,n,r,e){var i=.5*Math.PI/180;n*=i,r*=i,e*=i;var o=Math.sin(n),a=Math.cos(n),u=Math.sin(r),s=Math.cos(r),c=Math.sin(e),h=Math.cos(e);return t[0]=o*s*h-a*u*c,t[1]=a*u*h+o*s*c,t[2]=a*s*c-o*u*h,t[3]=a*s*h+o*u*c,t}function xn(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}var Rn,wn,En,yn,Tn,Pn,An,Cn=function(t){var n=new s(4);return n[0]=t[0],n[1]=t[1],n[2]=t[2],n[3]=t[3],n},_n=function(t,n,r,e){var i=new s(4);return i[0]=t,i[1]=n,i[2]=r,i[3]=e,i},Ln=function(t,n){return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t},Wn=function(t,n,r,e,i){return t[0]=n,t[1]=r,t[2]=e,t[3]=i,t},Fn=function(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t[2]=n[2]+r[2],t[3]=n[3]+r[3],t},Sn=an,Gn=function(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t[2]=n[2]*r,t[3]=n[3]*r,t},Dn=function(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]},Un=function(t,n,r,e){var i=n[0],o=n[1],a=n[2],u=n[3];return t[0]=i+e*(r[0]-i),t[1]=o+e*(r[1]-o),t[2]=a+e*(r[2]-a),t[3]=u+e*(r[3]-u),t},In=Jt,Vn=In,On=$t,Bn=On,qn=function(t,n){var r=n[0],e=n[1],i=n[2],o=n[3],a=r*r+e*e+i*i+o*o;return a>0&&(a=1/Math.sqrt(a)),t[0]=r*a,t[1]=e*a,t[2]=i*a,t[3]=o*a,t},Nn=function(t,n){return t[0]===n[0]&&t[1]===n[1]&&t[2]===n[2]&&t[3]===n[3]},Yn=function(t,n){var r=t[0],e=t[1],i=t[2],o=t[3],a=n[0],s=n[1],c=n[2],h=n[3];return Math.abs(r-a)<=u*Math.max(1,Math.abs(r),Math.abs(a))&&Math.abs(e-s)<=u*Math.max(1,Math.abs(e),Math.abs(s))&&Math.abs(i-c)<=u*Math.max(1,Math.abs(i),Math.abs(c))&&Math.abs(o-h)<=u*Math.max(1,Math.abs(o),Math.abs(h))},zn=(Rn=et(),wn=at(1,0,0),En=at(0,1,0),function(t,n,r){var e=Pt(n,r);return e<-.999999?(At(Rn,wn,n),Xt(Rn)<1e-6&&At(Rn,En,n),Tt(Rn,Rn),rn(t,Rn,Math.PI),t):e>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(At(Rn,n,r),t[0]=Rn[0],t[1]=Rn[1],t[2]=Rn[2],t[3]=1+e,qn(t,t))}),kn=(yn=tn(),Tn=tn(),function(t,n,r,e,i,o){return Mn(yn,n,i,o),Mn(Tn,r,e,o),Mn(t,yn,Tn,2*o*(1-o)),t}),jn=(Pn=new s(9),s!=Float32Array&&(Pn[1]=0,Pn[2]=0,Pn[3]=0,Pn[5]=0,Pn[6]=0,Pn[7]=0),Pn[0]=1,Pn[4]=1,Pn[8]=1,An=Pn,function(t,n,r,e){return An[0]=r[0],An[3]=r[1],An[6]=r[2],An[1]=e[0],An[4]=e[1],An[7]=e[2],An[2]=-n[0],An[5]=-n[1],An[8]=-n[2],qn(t,bn(t,An))});function Kn(){var t=new s(2);return s!=Float32Array&&(t[0]=0,t[1]=0),t}function Hn(t){var n=new s(2);return n[0]=t[0],n[1]=t[1],n}function Xn(t,n){var r=new s(2);return r[0]=t,r[1]=n,r}function Zn(t,n){return t[0]=n[0],t[1]=n[1],t}function Qn(t,n,r){return t[0]=n,t[1]=r,t}function Jn(t,n,r){return t[0]=n[0]+r[0],t[1]=n[1]+r[1],t}function $n(t,n,r){return t[0]=n[0]-r[0],t[1]=n[1]-r[1],t}function tr(t,n,r){return t[0]=n[0]*r[0],t[1]=n[1]*r[1],t}function nr(t,n,r){return t[0]=n[0]/r[0],t[1]=n[1]/r[1],t}function rr(t,n){return t[0]=Math.ceil(n[0]),t[1]=Math.ceil(n[1]),t}function er(t,n){return t[0]=Math.floor(n[0]),t[1]=Math.floor(n[1]),t}function ir(t,n,r){return t[0]=Math.min(n[0],r[0]),t[1]=Math.min(n[1],r[1]),t}function or(t,n,r){return t[0]=Math.max(n[0],r[0]),t[1]=Math.max(n[1],r[1]),t}function ar(t,n){return t[0]=Math.round(n[0]),t[1]=Math.round(n[1]),t}function ur(t,n,r){return t[0]=n[0]*r,t[1]=n[1]*r,t}function sr(t,n,r,e){return t[0]=n[0]+r[0]*e,t[1]=n[1]+r[1]*e,t}function cr(t,n){var r=n[0]-t[0],e=n[1]-t[1];return Math.hypot(r,e)}function hr(t,n){var r=n[0]-t[0],e=n[1]-t[1];return r*r+e*e}function fr(t){var n=t[0],r=t[1];return Math.hypot(n,r)}function dr(t){var n=t[0],r=t[1];return n*n+r*r}function lr(t,n){return t[0]=-n[0],t[1]=-n[1],t}function Mr(t,n){return t[0]=1/n[0],t[1]=1/n[1],t}function gr(t,n){var r=n[0],e=n[1],i=r*r+e*e;return i>0&&(i=1/Math.sqrt(i)),t[0]=n[0]*i,t[1]=n[1]*i,t}function pr(t,n){return t[0]*n[0]+t[1]*n[1]}function vr(t,n,r){var e=n[0]*r[1]-n[1]*r[0];return t[0]=t[1]=0,t[2]=e,t}function br(t,n,r,e){var i=n[0],o=n[1];return t[0]=i+e*(r[0]-i),t[1]=o+e*(r[1]-o),t}function mr(t,n){n=n||1;var r=2*c()*Math.PI;return t[0]=Math.cos(r)*n,t[1]=Math.sin(r)*n,t}function xr(t,n,r){var e=n[0],i=n[1];return t[0]=r[0]*e+r[2]*i,t[1]=r[1]*e+r[3]*i,t}function Rr(t,n,r){var e=n[0],i=n[1];return t[0]=r[0]*e+r[2]*i+r[4],t[1]=r[1]*e+r[3]*i+r[5],t}function wr(t,n,r){var e=n[0],i=n[1];return t[0]=r[0]*e+r[3]*i+r[6],t[1]=r[1]*e+r[4]*i+r[7],t}function Er(t,n,r){var e=n[0],i=n[1];return t[0]=r[0]*e+r[4]*i+r[12],t[1]=r[1]*e+r[5]*i+r[13],t}function yr(t,n,r,e){var i=n[0]-r[0],o=n[1]-r[1],a=Math.sin(e),u=Math.cos(e);return t[0]=i*u-o*a+r[0],t[1]=i*a+o*u+r[1],t}function Tr(t,n){var r=t[0],e=t[1],i=n[0],o=n[1],a=r*r+e*e;a>0&&(a=1/Math.sqrt(a));var u=i*i+o*o;u>0&&(u=1/Math.sqrt(u));var s=(r*i+e*o)*a*u;return s>1?0:s<-1?Math.PI:Math.acos(s)}function Pr(t){return t[0]=0,t[1]=0,t}function Ar(t){return"vec2("+t[0]+", "+t[1]+")"}function Cr(t,n){return t[0]===n[0]&&t[1]===n[1]}function _r(t,n){var r=t[0],e=t[1],i=n[0],o=n[1];return Math.abs(r-i)<=u*Math.max(1,Math.abs(r),Math.abs(i))&&Math.abs(e-o)<=u*Math.max(1,Math.abs(e),Math.abs(o))}var Lr=fr,Wr=$n,Fr=tr,Sr=nr,Gr=cr,Dr=hr,Ur=dr,Ir=function(){var t=Kn();return function(n,r,e,i,o,a){var u,s;for(r||(r=2),e||(e=0),s=i?Math.min(i*r+e,n.length):n.length,u=e;u<s;u+=r)t[0]=n[u],t[1]=n[u+1],o(t,t,a),n[u]=t[0],n[u+1]=t[1];return n}}(),Vr=new(function(){function t(){}return t.prototype.log=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];console.log.apply(console,t)},t.prototype.warn=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];console.warn.apply(console,t)},t.prototype.error=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];console.error.apply(console,t)},t}());function Or(t){return Object.values(t)}function Br(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];for(var r=0,e=t;r<e.length;r++){var i=e[r];if(void 0!==i)return i}}var qr=function(){function t(t,n,r,i){this.gl=t,this.material=n,this.modelMatrix=e.create(),this.position=a.fromValues(0,0),this.scale=a.fromValues(1,1),this.rotationZDeg=0;var o=this.gl.createBuffer();if(!o)throw new Error("Failed to create buffer");if(this.buffer=o,this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,this.buffer),this.gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER,new Float32Array(r),i),r.length%this.material.itemSize!=0)throw new Error("Unexpected array size");this.numItems=r.length/this.material.itemSize}return t.prototype.shouldBeRendered=function(){return!0},t.prototype.draw=function(n,r){void 0===n&&(n=t.mat4Identity),void 0===r&&(r=t.mat4Identity),this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,this.buffer),this.material.setupAttribPointers(),this.material.updateMatrices(n,r,this.modelMatrix),this.gl.drawArrays(WebGLRenderingContext.TRIANGLE_STRIP,0,this.numItems)},t.prototype.getWorldTransform=function(){return this.modelMatrix},t.prototype.getInverseWorldTransform=function(){var t=e.invert(e.create(),this.modelMatrix);if(!t)throw new Error("Failed to get inverse world transform");return t},t.prototype.getRotationZDeg=function(){return this.rotationZDeg},t.prototype.setPosition=function(t,n){this.position[0]=t,this.position[1]=Br(n,t),this.updateModelMatrix()},t.prototype.setRotation=function(t){this.rotationZDeg=t,this.updateModelMatrix()},t.prototype.setScale=function(t,n){this.scale[0]=t,this.scale[1]=Br(n,t),this.updateModelMatrix()},t.prototype.updateModelMatrix=function(){e.fromRotationTranslationScale(this.modelMatrix,o.fromEuler(o.create(),0,0,this.rotationZDeg),i.fromValues(this.position[0],this.position[1],0),i.fromValues(this.scale[0],this.scale[1],1))},t.mat4Identity=e.create(),t}();function Nr(t){return 0==(t&t-1)}var Yr,zr=(Yr=function(t,n){return(Yr=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}Yr(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),kr=function(t){function n(n,r,e,i,o,a,u){var s=t.call(this,r,i,c(1,1).concat(c(.5,1),c(1,0),c(.5,0),c(.5,0),c(0,0),c(.5,1),c(0,1)),WebGLRenderingContext.DYNAMIC_DRAW)||this;function c(t,n){return[t,n,0,t,1-n]}return s.debugName=n,s.renderTarget=e,s.height=o,s.visible=!1,s.connectedPortal=void 0,s.setPosition(u[0],u[1]),s.setRotation(a),s}return zr(n,t),n.linkPortals=function(t,n){t.connectedPortal=n,n.connectedPortal=t},n.prototype.setViewPoint=function(t,n,r,e,o,u,s){var c=this.getWorldTransform(),h=this.getInverseWorldTransform(),f=i.fromValues(t[0],t[1],0);if(this.visible=i.transformMat4(i.create(),f,h)[0]<0,this.visible){var d=i.fromValues(0,.5*this.height,0),l=i.fromValues(0,-.5*this.height,0),M=i.transformMat4(i.create(),d,c),g=i.transformMat4(i.create(),l,c),p=L(f,M),v=L(f,g),b=i.transformMat4(i.create(),p,h),m=i.transformMat4(i.create(),v,h),x=i.add(i.create(),p,i.fromValues(o,0,0)),R=i.add(i.create(),v,i.fromValues(o,0,0)),w=i.transformMat4(i.create(),x,c),E=i.transformMat4(i.create(),R,c),y=1/r,T=y*(o/u),P=a.fromValues(0,0),A=function(t){var r=a.fromValues(t[0]-n[0],t[1]-n[1]);return a.rotate(r,r,P,e/180*Math.PI),[.5+r[0]/T,.5+r[1]/y]},C=_(x,w).concat(_(b,p),_(R,E),_(m,v),_(m,v),_(l,g),_(b,p),_(d,M));return this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,this.buffer),this.gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER,new Float32Array(C),WebGLRenderingContext.DYNAMIC_DRAW),void this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,null)}function _(t,n){return[t[0],t[1],0].concat(A(n))}function L(t,n,r){void 0===r&&(r=10);var e=i.create();return i.sub(e,n,t),i.normalize(e,e),i.scale(e,e,r),i.add(e,n,e),e}},n.prototype.shouldBeRendered=function(){return Boolean(this.connectedPortal)&&this.visible},n.prototype.teleported=function(t){if(!this.connectedPortal)throw new Error("Missing connected portal");var n=a.clone(t),r=this.getInverseWorldTransform();return a.transformMat4(n,n,r),n[0]=-n[0],n[1]=-n[1],a.transformMat4(n,n,this.connectedPortal.getWorldTransform()),n},n.prototype.wasCrossed=function(t,n){var r,e,i,o,u,s,c,h,f,d,l,M,g,p,v,b,m=this.getInverseWorldTransform(),x=a.fromValues(0,.5*this.height),R=a.fromValues(0,-.5*this.height),w=a.transformMat4(a.create(),t,m),E=a.transformMat4(a.create(),n,m);return w[0]<0&&E[0]>=0&&(e=E,i=x,o=R,u=(r=w)[0],s=r[1],c=e[0],h=e[1],f=i[0],d=i[1],l=c-u,M=h-s,g=o[0]-f,p=o[1]-d,b=(g*(s-d)-p*(u-f))/(-g*M+l*p),(v=(-M*(u-f)+l*(s-d))/(-g*M+l*p))>=0&&v<=1&&b>=0&&b<=1)},n.prototype.teleport=function(t){var n=this.teleported(t);t[0]=n[0],t[1]=n[1]},n.prototype.teleportCamera=function(t,n,r){return this.connectedPortal?(this.teleport(t),{tilt:n,zoom:r}):{tilt:n,zoom:r}},n}(qr);function jr(t){return new Promise(function(n,r){var e=new Image;e.onload=function(){n(e)},e.onerror=function(t){r(t)},e.src=t})}var Kr,Hr,Xr=function(){function t(t){this.evaluate=t,this.cached=null,this.evaluated=!1}return t.prototype.getValue=function(){return this.evaluated||(this.evaluated=!0,this.cached=this.evaluate.call(null)),this.cached},t}(),Zr=function(){function t(t,n){var r=this;this.gl=t,this.shaders=n,this.attributes=Object.create(null),this.uniforms=Object.create(null);var e=this.gl.createProgram();if(!e)throw new Error("Failed to create program");if(this.program=e,n.forEach(function(t){r.gl.attachShader(e,t.shader)}),this.gl.linkProgram(e),!this.gl.getProgramParameter(e,WebGLRenderingContext.LINK_STATUS))throw new Error("Failed to link program")}return t.prototype.use=function(){var t=this;this.gl.useProgram(this.program),this.shaders.forEach(function(n){n.attributes.forEach(function(n){t.attributes[n]=t.gl.getAttribLocation(t.program,n),t.gl.enableVertexAttribArray(t.attributes[n])}),n.uniforms.forEach(function(n){var r=t.gl.getUniformLocation(t.program,n);null!==r?t.uniforms[n]=r:Vr.warn('Failed to get location of uniform "'+n+'"')})})},t}();function Qr(t,n,r){var e=t.createShader(r);if(!e)throw new Error("Failed to create shader");if(t.shaderSource(e,n),t.compileShader(e),!t.getShaderParameter(e,WebGLRenderingContext.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(e)||"(Shader info log not available)");return e}function Jr(t){if(t===WebGLRenderingContext.FLOAT)return 4;throw new Error("Unsupported type")}!function(t){t.VertexPosition="aVertexPosition"}(Kr||(Kr={})),function(t){t.ModelViewMatrix="uMVMatrix",t.ProjectionMatrix="uPMatrix"}(Hr||(Hr={}));var $r,te,ne=function(){function t(n){this.attributes=Or(Kr),this.uniforms=Or(Hr),this.source="\n    attribute vec3 "+Kr.VertexPosition+";\n\n    uniform mat4 "+Hr.ModelViewMatrix+";\n    uniform mat4 "+Hr.ProjectionMatrix+";\n\n    void main(void) {\n      gl_Position = (\n        "+Hr.ProjectionMatrix+" *\n        "+Hr.ModelViewMatrix+" *\n        vec4("+Kr.VertexPosition+", 1.0)\n      );\n    }\n  ",this.shader=Qr(n,this.source,t.type)}return t.type=WebGLRenderingContext.VERTEX_SHADER,t}(),re=function(){function t(n){this.attributes=[],this.uniforms=[],this.source="\n    precision mediump float;\n\n    void main(void) {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  ",this.shader=Qr(n,this.source,t.type)}return t.type=WebGLRenderingContext.FRAGMENT_SHADER,t}(),ee=function(){function t(t){this.gl=t,this.tempModelViewMatrix=e.create(),this.itemSize=3,this.program=new Zr(this.gl,[new ne(this.gl),new re(this.gl)])}return t.prototype.use=function(){this.program.use()},t.prototype.setupAttribPointers=function(){this.gl.vertexAttribPointer(this.program.attributes[Kr.VertexPosition],this.itemSize,WebGLRenderingContext.FLOAT,!1,0,0)},t.prototype.updateMatrices=function(t,n,r){this.gl.uniformMatrix4fv(this.program.uniforms[Hr.ProjectionMatrix],!1,t);var i=this.tempModelViewMatrix;e.identity(i),e.mul(i,n,r),this.gl.uniformMatrix4fv(this.program.uniforms[Hr.ModelViewMatrix],!1,i)},t}();!function(t){t.VertexPosition="aVertexPosition",t.TextureCoord="aTextureCoord"}($r||($r={})),function(t){t.ModelViewMatrix="uMVMatrix",t.ProjectionMatrix="uPMatrix"}(te||(te={}));var ie,oe=function(){function t(n){this.attributes=Or($r),this.uniforms=Or(te),this.source="\n    attribute vec3 "+$r.VertexPosition+";\n    attribute vec2 "+$r.TextureCoord+";\n\n    uniform mat4 "+te.ModelViewMatrix+";\n    uniform mat4 "+te.ProjectionMatrix+";\n\n    varying highp vec2 vTextureCoord;\n\n    void main(void) {\n      gl_Position = (\n        "+te.ProjectionMatrix+" *\n        "+te.ModelViewMatrix+" *\n        vec4("+$r.VertexPosition+", 1.0)\n      );\n      vTextureCoord = aTextureCoord;\n    }\n  ",this.shader=Qr(n,this.source,t.type)}return t.type=WebGLRenderingContext.VERTEX_SHADER,t}();(ie||(ie={})).Sampler="uSampler";var ae=function(){function t(n){this.attributes=[],this.uniforms=Or(ie),this.source="\n    precision mediump float;\n\n    varying highp vec2 vTextureCoord;\n\n    uniform sampler2D "+ie.Sampler+";\n\n    void main(void) {\n        gl_FragColor = texture2D("+ie.Sampler+", vTextureCoord);\n    }\n  ",this.shader=Qr(n,this.source,t.type)}return t.type=WebGLRenderingContext.FRAGMENT_SHADER,t}(),ue=function(){function t(t){this.gl=t,this.tempModelViewMatrix=e.create(),this.itemSize=5,this.program=new Zr(this.gl,[new oe(this.gl),new ae(this.gl)])}return t.prototype.bindTexture=function(t){var n=this;return{itemSize:this.itemSize,use:function(){n.use(),n.gl.activeTexture(WebGLRenderingContext.TEXTURE0),n.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D,t),n.gl.uniform1i(n.program.uniforms[ie.Sampler],0)},setupAttribPointers:this.setupAttribPointers.bind(this),updateMatrices:this.updateMatrices.bind(this)}},t.prototype.use=function(){this.program.use()},t.prototype.setupAttribPointers=function(){this.gl.vertexAttribPointer(this.program.attributes[$r.VertexPosition],3,WebGLRenderingContext.FLOAT,!1,this.itemSize*Jr(WebGLRenderingContext.FLOAT),0),this.gl.vertexAttribPointer(this.program.attributes[$r.TextureCoord],2,WebGLRenderingContext.FLOAT,!1,this.itemSize*Jr(WebGLRenderingContext.FLOAT),3*Jr(WebGLRenderingContext.FLOAT))},t.prototype.updateMatrices=function(t,n,r){this.gl.uniformMatrix4fv(this.program.uniforms[te.ProjectionMatrix],!1,t);var i=this.tempModelViewMatrix;e.identity(i),e.mul(i,n,r),this.gl.uniformMatrix4fv(this.program.uniforms[te.ModelViewMatrix],!1,i)},t}(),se=function(){function t(t,n,r){this.gl=t,this.viewportWidth=320,this.viewportHeight=240,this.perspectiveFovY=45,this.orthoHeightY=1,this.near=.1,this.far=100,this.x=0,this.y=0,this.zoom=1,this.viewMatrix=e.create(),this.projectionMatrix=e.create(),this.updateSize(n,r)}return t.prototype.updateViewportAndProjection=function(t,n,r){e.identity(this.viewMatrix),e.rotateZ(this.viewMatrix,this.viewMatrix,r/180*Math.PI),e.translate(this.viewMatrix,this.viewMatrix,i.fromValues(-t[0],-t[1],-10)),this.zoom=n,this.gl.viewport(0,0,this.viewportWidth,this.viewportHeight);var o=this.viewportWidth/this.viewportHeight,a=this.orthoHeightY/this.zoom,u=a*o;e.ortho(this.projectionMatrix,.5*-u,.5*u,.5*-a,.5*a,this.near,this.far)},t.prototype.updateSize=function(t,n){this.viewportWidth=t,this.viewportHeight=n},t}(),ce=function(){function t(t,n,r){void 0===r&&(r=!1),this.gl=t,this.params={level:0,border:0,internalFormat:WebGLRenderingContext.RGBA,srcFormat:WebGLRenderingContext.RGBA,srcType:WebGLRenderingContext.UNSIGNED_BYTE};var e=this.gl.createTexture();if(!e)throw new Error("Failed to create texture");this.texture=e,this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D,this.texture);var i=n.image||null;if(i)this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D,this.params.level,this.params.internalFormat,this.params.srcFormat,this.params.srcType,i);else{var o=n;this.resize(o.width,o.height)}i&&Nr(i.width)&&Nr(i.height)?this.gl.generateMipmap(WebGLRenderingContext.TEXTURE_2D):this.turnOffMipmapAndSetWrapping()}return t.prototype.resize=function(t,n){this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D,this.params.level,this.params.internalFormat,t,n,this.params.border,this.params.srcFormat,this.params.srcType,null)},t.prototype.turnOffMipmapAndSetWrapping=function(){this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D,WebGLRenderingContext.TEXTURE_MIN_FILTER,WebGLRenderingContext.LINEAR),this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D,WebGLRenderingContext.TEXTURE_WRAP_S,WebGLRenderingContext.CLAMP_TO_EDGE),this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D,WebGLRenderingContext.TEXTURE_WRAP_T,WebGLRenderingContext.CLAMP_TO_EDGE)},t}(),he=function(){function t(t,n,r,e,i){void 0===e&&(e=!0),void 0===i&&(i=!1),this.gl=t,this.width=n,this.height=r,this.useDepth=e,this.useStencil=i,this.renderbuffer=null,this.targetTexture=new ce(this.gl,{width:this.width,height:this.height}),this.texture=this.targetTexture.texture;var o=this.gl.createFramebuffer();if(!o)throw new Error("Failed to create framebuffer");this.framebuffer=o,this.bind();this.gl.framebufferTexture2D(WebGLRenderingContext.FRAMEBUFFER,WebGLRenderingContext.COLOR_ATTACHMENT0,WebGLRenderingContext.TEXTURE_2D,this.targetTexture.texture,0),this.useDepth&&(this.renderbuffer=this.gl.createRenderbuffer(),this.gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER,this.renderbuffer),this.useStencil?(this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER,WebGLRenderingContext.DEPTH_STENCIL,this.width,this.height),this.gl.framebufferRenderbuffer(WebGLRenderingContext.FRAMEBUFFER,WebGLRenderingContext.DEPTH_STENCIL_ATTACHMENT,WebGLRenderingContext.RENDERBUFFER,this.renderbuffer)):(this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER,WebGLRenderingContext.DEPTH_COMPONENT16,this.width,this.height),this.gl.framebufferRenderbuffer(WebGLRenderingContext.FRAMEBUFFER,WebGLRenderingContext.DEPTH_ATTACHMENT,WebGLRenderingContext.RENDERBUFFER,this.renderbuffer))),this.unbind()}return t.prototype.bind=function(){this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER,this.framebuffer),this.gl.viewport(0,0,this.width,this.height)},t.prototype.unbind=function(){this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER,null)},t.prototype.resize=function(t,n){this.width=t,this.height=n,this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D,this.targetTexture.texture),this.targetTexture.resize(this.width,this.height),this.renderbuffer&&(this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER,this.framebuffer),this.gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER,this.renderbuffer),this.useStencil?this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER,WebGLRenderingContext.DEPTH_STENCIL,this.width,this.height):this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER,WebGLRenderingContext.DEPTH_COMPONENT16,this.width,this.height),this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER,null))},t}(),fe=function(t,n,r,e){return new(r||(r=Promise))(function(i,o){function a(t){try{s(e.next(t))}catch(t){o(t)}}function u(t){try{s(e.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new r(function(n){n(t.value)}).then(a,u)}s((e=e.apply(t,n||[])).next())})},de=function(t,n){var r,e,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,e&&(i=2&o[0]?e.return:o[0]?e.throw||((i=e.return)&&i.call(e),0):e.next)&&!(i=i.call(e,o[1])).done)return i;switch(e=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,e=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],e=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}},le=function(){function t(t){var n=this;this.gl=t,this.currentMaterial=null,this.renderTargetsToResize=[],this.renderTargetStack=[],this.gl.canvas.width=this.gl.canvas.clientWidth,this.gl.canvas.height=this.gl.canvas.clientHeight,this.materials={unlitBlack:new ee(this.gl),unlitTextured:new ue(this.gl)},this.renderTarget=new he(this.gl,this.gl.canvas.width,this.gl.canvas.height,!1),this.postProcessingModel=new qr(this.gl,this.materials.unlitTextured.bindTexture(this.renderTarget.texture),[1,1,0,1,1,-1,1,0,0,1,1,-1,0,1,0,-1,-1,0,0,0],WebGLRenderingContext.STATIC_DRAW),this.gl.clearColor(1,1,1,1),this.camera=new se(this.gl,this.gl.canvas.width,this.gl.canvas.height),window.addEventListener("resize",function(){n.updateSize()})}return t.prototype.enterRenderTarget=function(t){this.renderTargetStack.length>0&&this.renderTargetStack[this.renderTargetStack.length-1].unbind(),this.renderTargetStack.push(t),t.bind()},t.prototype.exitRenderTarget=function(){var t=this.renderTargetStack.pop();t&&t.unbind(),this.renderTargetStack.length>0&&this.renderTargetStack[this.renderTargetStack.length-1].bind()},t.prototype.createPortal=function(t,n,r,e){var i=new he(this.gl,this.gl.canvas.width,this.gl.canvas.height,!1),o=new kr(t,this.gl,i,this.materials.unlitTextured.bindTexture(i.texture),n,r,e);return this.renderTargetsToResize.push(i),o},t.prototype.updateSize=function(){var t=this.gl.canvas.clientWidth,n=this.gl.canvas.clientHeight;this.gl.canvas.width=t,this.gl.canvas.height=n,this.camera.updateSize(t,n),this.renderTarget.resize(t,n),this.renderTargetsToResize.forEach(function(r){r.resize(t,n)})},t.prototype.render=function(t,n,r,e,i,u,s,c){var h=this;void 0===i&&(i=0),void 0===c&&(c=[]);var f=Br(u,this.gl.canvas.width),d=Br(s,this.gl.canvas.height),l=new Xr(function(){var t=1/e,n=t*(f/d);o.fromEuler(o.create(),0,0,i);return[u(-1,-1),u(1,-1),u(1,1),u(-1,1)];function u(e,o){var u=a.fromValues(r[0]+.5*e*n,r[1]+.5*o*t);return a.rotate(u,u,r,i/180*Math.PI),u}});t.filter(function(t){return t instanceof kr&&(!c.includes(t)&&(c.push(t),t.setViewPoint(n,r,e,i,f,d,l),t.shouldBeRendered()))}).forEach(function(o){o.connectedPortal;h.enterRenderTarget(o.renderTarget);var a=o.teleported(r),u=e,s=o.teleported(n),f=i;h.render(t,s,a,u,f,void 0,void 0,c),h.exitRenderTarget()}),this.enterRenderTarget(this.renderTarget),this.camera.updateViewportAndProjection(r,e,i),this.gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT),t.forEach(function(t){t instanceof kr&&t.setViewPoint(n,r,e,i,f,d,l),t.shouldBeRendered()&&(h.setMaterial(t.material),t.draw(h.camera.projectionMatrix,h.camera.viewMatrix))}),this.exitRenderTarget(),this.gl.viewport(0,0,this.gl.canvas.width,this.gl.canvas.height),this.gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT|WebGLRenderingContext.DEPTH_BUFFER_BIT),this.setMaterial(this.postProcessingModel.material),this.postProcessingModel.draw()},t.prototype.setMaterial=function(t){this.currentMaterial!==t&&(this.currentMaterial=t,t.use())},t.prototype.loadTexture=function(t){return fe(this,void 0,void 0,function(){var n;return de(this,function(r){switch(r.label){case 0:return[4,jr(t)];case 1:return n=r.sent(),[2,new ce(this.gl,{image:n}).texture]}})})},t}(),Me=function(){function t(t){this.creator=t,this.map=Object.create(null)}return t.prototype.get=function(t){return Object.hasOwnProperty.call(this.map,t)||(this.map[t]=this.creator()),this.map[t]},t}();var ge=function(){function t(){var t=this;this.pressedKeys=[],this.listeners=new Me(function(){return[]}),window.addEventListener("keydown",function(n){var r,e,i=n.keyCode;r=t.pressedKeys,e=i,r.includes(e)||r.push(e)}),window.addEventListener("keyup",function(n){var r,e,i,o=n.keyCode;r=t.pressedKeys,e=o,(i=r.indexOf(e))>=0&&r.splice(i,1)})}return t.prototype.whilePressed=function(t,n){this.listeners.get(t).push(n)},t.prototype.update=function(t){var n=this;this.pressedKeys.forEach(function(r){n.listeners.get(r).forEach(function(n){n(t)})})},t.KEY_W=87,t.KEY_A=65,t.KEY_S=83,t.KEY_D=68,t.KEY_ARROW_UP=38,t.KEY_ARROW_LEFT=37,t.KEY_ARROW_DOWN=40,t.KEY_ARROW_RIGHT=39,t.KEY_NUM7=36,t.KEY_NUM9=33,t.KEY_NUM_MINUS=109,t.KEY_NUM_PLUS=107,t}(),pe=function(t,n,r,e){return new(r||(r=Promise))(function(i,o){function a(t){try{s(e.next(t))}catch(t){o(t)}}function u(t){try{s(e.throw(t))}catch(t){o(t)}}function s(t){t.done?i(t.value):new r(function(n){n(t.value)}).then(a,u)}s((e=e.apply(t,n||[])).next())})},ve=function(t,n){var r,e,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(o){return function(u){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,e&&(i=2&o[0]?e.return:o[0]?e.throw||((i=e.return)&&i.call(e),0):e.next)&&!(i=i.call(e,o[1])).done)return i;switch(e=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,e=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(t,a)}catch(t){o=[6,t],e=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,u])}}};function be(t){Vr.error(t)}!function(){var t=(n="mainCanvas",document.getElementById(n));var n;if(!t)return be("Failed to find canvas");var r=t.getContext("webgl");if(!r)return be("Failed to get WebGL context");var e=null;try{e=new le(r)}catch(t){Vr.error("Failed to create renderer",{error:t})}if(!e)return;!function(t){pe(this,void 0,void 0,function(){function n(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var e=t.createPortal.apply(t,n);return c.push(e),e}function r(n){var e=(n-T)/1e3;T=n;var i=a.clone(x);R.update(e);for(var o=0,s=c;o<s.length;o++){var f=s[o];if(f.wasCrossed(i,x)){f.teleport(i),f.teleport(x);var d=f.teleportCamera(m,v,b);v=d.tilt,b=d.zoom;break}}p.setPosition(x[0],x[1]),h.setRotation(36*n/1e3),t.render(u,x,m,b,v),requestAnimationFrame(r)}function e(){return new qr(t.gl,t.materials.unlitBlack,[.3,.5,0,-.3,.5,0,.3,.3,0,-.3,.3,0,-.3,.3,0,-.3,-.5,0,-.1,.3,0,-.1,-.5,0,-.1,-.5,0,-.1,-.1,0,-.1,-.1,0,.1,-.1,0,-.1,.1,0,.1,.1,0],WebGLRenderingContext.STATIC_DRAW)}function i(n){return n?new qr(t.gl,t.materials.unlitTextured.bindTexture(n),[.5,.5,0,1,0,-.5,.5,0,0,0,.5,-.5,0,1,1,-.5,-.5,0,0,1],WebGLRenderingContext.STATIC_DRAW):new qr(t.gl,t.materials.unlitBlack,[.5,.5,0,-.5,.5,0,.5,-.5,0,-.5,-.5,0],WebGLRenderingContext.STATIC_DRAW)}var o,u,s,c,h,f,d,l,M,g,p,v,b,m,x,R,w,E,y,T;return ve(this,function(P){switch(P.label){case 0:return[4,t.loadTexture("gfx/debug_512x512.png")];case 1:return o=P.sent(),u=[],(s=i(o)).setScale(10,10),u.push(s),1,c=[],(h=e()).setPosition(10,0),u.push(h),f=n("A",1,0,[2,0]),d=n("B",1,180,[9,0]),kr.linkPortals(f,d),u.push(f),u.push(d),(l=e()).setPosition(0,-10),u.push(l),M=n("C",1,-90,[0,-2]),g=n("D",1,90,[0,-9]),kr.linkPortals(M,g),u.push(M),u.push(g),p=i(),u.push(p),v=0,b=.1,m=a.fromValues(0,0),x=a.fromValues(0,0),R=new ge,w=3.33,E=.25,y=180,R.whilePressed(ge.KEY_ARROW_UP,function(t){m[1]+=w*t}),R.whilePressed(ge.KEY_ARROW_LEFT,function(t){m[0]-=w*t}),R.whilePressed(ge.KEY_ARROW_DOWN,function(t){m[1]-=w*t}),R.whilePressed(ge.KEY_ARROW_RIGHT,function(t){m[0]+=w*t}),R.whilePressed(ge.KEY_NUM_MINUS,function(t){b-=E*t}),R.whilePressed(ge.KEY_NUM_PLUS,function(t){b+=E*t}),R.whilePressed(ge.KEY_NUM7,function(t){v+=y*t}),R.whilePressed(ge.KEY_NUM9,function(t){v-=y*t}),R.whilePressed(ge.KEY_W,function(t){x[1]+=w*t}),R.whilePressed(ge.KEY_A,function(t){x[0]-=w*t}),R.whilePressed(ge.KEY_S,function(t){x[1]-=w*t}),R.whilePressed(ge.KEY_D,function(t){x[0]+=w*t}),60,T=performance.now()-1e3/60,r(performance.now()),[2]}})})}(e)}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,