!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=56)}([function(t,e,n){function r(t){if(t)return function(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}(t)}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var o=0;o<r.length;o++)if((n=r[o])===e||n.fn===e){r.splice(o,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,e);return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){var r,o=n(42),i=n(18),s=n(44),a=n(45),u=n(46);"undefined"!=typeof ArrayBuffer&&(r=n(47));var c="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),h="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),f=c||h;e.protocol=3;var l=e.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},p=o(l),d={type:"error",data:"parser error"},g=n(48);function y(t,e,n){for(var r=new Array(t.length),o=a(t.length,n),i=function(t,n,o){e(n,function(e,n){r[t]=n,o(e,r)})},s=0;s<t.length;s++)i(s,t[s],o)}e.encodePacket=function(t,n,r,o){"function"==typeof n&&(o=n,n=!1),"function"==typeof r&&(o=r,r=null);var i=void 0===t.data?void 0:t.data.buffer||t.data;if("undefined"!=typeof ArrayBuffer&&i instanceof ArrayBuffer)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=t.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=l[t.type];for(var a=0;a<i.length;a++)s[a+1]=i[a];return r(s.buffer)}(t,n,o);if(void 0!==g&&i instanceof g)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);if(f)return function(t,n,r){if(!n)return e.encodeBase64Packet(t,r);var o=new FileReader;return o.onload=function(){e.encodePacket({type:t.type,data:o.result},n,!0,r)},o.readAsArrayBuffer(t.data)}(t,n,r);var o=new Uint8Array(1);o[0]=l[t.type];var i=new g([o.buffer,t.data]);return r(i)}(t,n,o);if(i&&i.base64)return function(t,n){var r="b"+e.packets[t.type]+t.data.data;return n(r)}(t,o);var s=l[t.type];return void 0!==t.data&&(s+=r?u.encode(String(t.data),{strict:!1}):String(t.data)),o(""+s)},e.encodeBase64Packet=function(t,n){var r,o="b"+e.packets[t.type];if(void 0!==g&&t.data instanceof g){var i=new FileReader;return i.onload=function(){var t=i.result.split(",")[1];n(o+t)},i.readAsDataURL(t.data)}try{r=String.fromCharCode.apply(null,new Uint8Array(t.data))}catch(e){for(var s=new Uint8Array(t.data),a=new Array(s.length),u=0;u<s.length;u++)a[u]=s[u];r=String.fromCharCode.apply(null,a)}return o+=btoa(r),n(o)},e.decodePacket=function(t,n,r){if(void 0===t)return d;if("string"==typeof t){if("b"===t.charAt(0))return e.decodeBase64Packet(t.substr(1),n);if(r&&!1===(t=function(t){try{t=u.decode(t,{strict:!1})}catch(t){return!1}return t}(t)))return d;var o=t.charAt(0);return Number(o)==o&&p[o]?t.length>1?{type:p[o],data:t.substring(1)}:{type:p[o]}:d}o=new Uint8Array(t)[0];var i=s(t,1);return g&&"blob"===n&&(i=new g([i])),{type:p[o],data:i}},e.decodeBase64Packet=function(t,e){var n=p[t.charAt(0)];if(!r)return{type:n,data:{base64:!0,data:t.substr(1)}};var o=r.decode(t.substr(1));return"blob"===e&&g&&(o=new g([o])),{type:n,data:o}},e.encodePayload=function(t,n,r){"function"==typeof n&&(r=n,n=null);var o=i(t);if(n&&o)return g&&!f?e.encodePayloadAsBlob(t,r):e.encodePayloadAsArrayBuffer(t,r);if(!t.length)return r("0:");y(t,function(t,r){e.encodePacket(t,!!o&&n,!1,function(t){r(null,function(t){return t.length+":"+t}(t))})},function(t,e){return r(e.join(""))})},e.decodePayload=function(t,n,r){if("string"!=typeof t)return e.decodePayloadAsBinary(t,n,r);var o;if("function"==typeof n&&(r=n,n=null),""===t)return r(d,0,1);for(var i,s,a="",u=0,c=t.length;u<c;u++){var h=t.charAt(u);if(":"===h){if(""===a||a!=(i=Number(a)))return r(d,0,1);if(a!=(s=t.substr(u+1,i)).length)return r(d,0,1);if(s.length){if(o=e.decodePacket(s,n,!1),d.type===o.type&&d.data===o.data)return r(d,0,1);if(!1===r(o,u+i,c))return}u+=i,a=""}else a+=h}return""!==a?r(d,0,1):void 0},e.encodePayloadAsArrayBuffer=function(t,n){if(!t.length)return n(new ArrayBuffer(0));y(t,function(t,n){e.encodePacket(t,!0,!0,function(t){return n(null,t)})},function(t,e){var r=e.reduce(function(t,e){var n;return t+(n="string"==typeof e?e.length:e.byteLength).toString().length+n+2},0),o=new Uint8Array(r),i=0;return e.forEach(function(t){var e="string"==typeof t,n=t;if(e){for(var r=new Uint8Array(t.length),s=0;s<t.length;s++)r[s]=t.charCodeAt(s);n=r.buffer}o[i++]=e?0:1;var a=n.byteLength.toString();for(s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(r=new Uint8Array(n),s=0;s<r.length;s++)o[i++]=r[s]}),n(o.buffer)})},e.encodePayloadAsBlob=function(t,n){y(t,function(t,n){e.encodePacket(t,!0,!0,function(t){var e=new Uint8Array(1);if(e[0]=1,"string"==typeof t){for(var r=new Uint8Array(t.length),o=0;o<t.length;o++)r[o]=t.charCodeAt(o);t=r.buffer,e[0]=0}var i=(t instanceof ArrayBuffer?t.byteLength:t.size).toString(),s=new Uint8Array(i.length+1);for(o=0;o<i.length;o++)s[o]=parseInt(i[o]);if(s[i.length]=255,g){var a=new g([e.buffer,s.buffer,t]);n(null,a)}})},function(t,e){return n(new g(e))})},e.decodePayloadAsBinary=function(t,n,r){"function"==typeof n&&(r=n,n=null);for(var o=t,i=[];o.byteLength>0;){for(var a=new Uint8Array(o),u=0===a[0],c="",h=1;255!==a[h];h++){if(c.length>310)return r(d,0,1);c+=a[h]}o=s(o,2+c.length),c=parseInt(c);var f=s(o,0,c);if(u)try{f=String.fromCharCode.apply(null,new Uint8Array(f))}catch(t){var l=new Uint8Array(f);f="";for(h=0;h<l.length;h++)f+=String.fromCharCode(l[h])}i.push(f),o=s(o,c)}var p=i.length;i.forEach(function(t,o){r(e.decodePacket(t,n,!0),o,p)})}},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,o=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(o=r))}),e.splice(o,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(29)(e);const{formatters:o}=t.exports;o.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(6))},function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");e[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return e}},function(t,e){t.exports=function(t,e){var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){(function(r){e.log=function(...t){return"object"==typeof console&&console.log&&console.log(...t)},e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let r=0,o=0;e[0].replace(/%[a-zA-Z%]/g,t=>{"%%"!==t&&(r++,"%c"===t&&(o=r))}),e.splice(o,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG);return t},e.useColors=function(){if("undefined"!=typeof window&&window.process&&("renderer"===window.process.type||window.process.__nwjs))return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage=function(){try{return localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.exports=n(49)(e);const{formatters:o}=t.exports;o.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}}).call(this,n(6))},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var u,c=[],h=!1,f=-1;function l(){h&&u&&(h=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!h){var t=a(l);h=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,h=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function g(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||h||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){var r=n(31)("socket.io-parser"),o=n(0),i=n(34),s=n(12),a=n(13);function u(){}e.protocol=4,e.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],e.CONNECT=0,e.DISCONNECT=1,e.EVENT=2,e.ACK=3,e.ERROR=4,e.BINARY_EVENT=5,e.BINARY_ACK=6,e.Encoder=u,e.Decoder=f;var c=e.ERROR+'"encode error"';function h(t){var n=""+t.type;if(e.BINARY_EVENT!==t.type&&e.BINARY_ACK!==t.type||(n+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(n+=t.nsp+","),null!=t.id&&(n+=t.id),null!=t.data){var o=function(t){try{return JSON.stringify(t)}catch(t){return!1}}(t.data);if(!1===o)return c;n+=o}return r("encoded %j as %s",t,n),n}function f(){this.reconstructor=null}function l(t){this.reconPack=t,this.buffers=[]}function p(t){return{type:e.ERROR,data:"parser error: "+t}}u.prototype.encode=function(t,n){(r("encoding packet %j",t),e.BINARY_EVENT===t.type||e.BINARY_ACK===t.type)?function(t,e){i.removeBlobs(t,function(t){var n=i.deconstructPacket(t),r=h(n.packet),o=n.buffers;o.unshift(r),e(o)})}(t,n):n([h(t)])},o(f.prototype),f.prototype.add=function(t){var n;if("string"==typeof t)n=function(t){var n=0,o={type:Number(t.charAt(0))};if(null==e.types[o.type])return p("unknown packet type "+o.type);if(e.BINARY_EVENT===o.type||e.BINARY_ACK===o.type){for(var i="";"-"!==t.charAt(++n)&&(i+=t.charAt(n),n!=t.length););if(i!=Number(i)||"-"!==t.charAt(n))throw new Error("Illegal attachments");o.attachments=Number(i)}if("/"===t.charAt(n+1))for(o.nsp="";++n;){var a=t.charAt(n);if(","===a)break;if(o.nsp+=a,n===t.length)break}else o.nsp="/";var u=t.charAt(n+1);if(""!==u&&Number(u)==u){for(o.id="";++n;){var a=t.charAt(n);if(null==a||Number(a)!=a){--n;break}if(o.id+=t.charAt(n),n===t.length)break}o.id=Number(o.id)}if(t.charAt(++n)){var c=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(n)),h=!1!==c&&(o.type===e.ERROR||s(c));if(!h)return p("invalid payload");o.data=c}return r("decoded %s as %j",t,o),o}(t),e.BINARY_EVENT===n.type||e.BINARY_ACK===n.type?(this.reconstructor=new l(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!a(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,this.emit("decoded",n))}},f.prototype.destroy=function(){this.reconstructor&&this.reconstructor.finishedReconstruction()},l.prototype.takeBinaryData=function(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){var e=i.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null},l.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(35),o=n(36),i=n(37);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=l(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),o=(t=a(t,r)).write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|p(e.length);return 0===(t=a(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):l(t,e);if("Buffer"===e.type&&i(e.data))return l(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,e){if(h(e),t=a(t,e<0?0:0|p(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function l(t,e){var n=e.length<0?0:0|p(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return W(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return j(t).length;default:if(r)return W(t).length;e=(""+e).toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function y(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:m(t,e,n,r,o);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):m(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function m(t,e,n,r,o){var i,s=1,a=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(o){var h=-1;for(i=n;i<a;i++)if(c(t,i)===c(e,-1===h?0:i-h)){if(-1===h&&(h=i),i-h+1===u)return h*s}else-1!==h&&(i-=i-h),h=-1}else for(n+u>a&&(n=a-u),i=n;i>=0;i--){for(var f=!0,l=0;l<u;l++)if(c(t,i+l)!==c(e,l)){f=!1;break}if(f)return i}return-1}function v(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var s=0;s<r;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[n+s]=a}return s}function b(t,e,n,r){return q(W(e,t.length-n),t,n,r)}function w(t,e,n,r){return q(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function C(t,e,n,r){return w(t,e,n,r)}function M(t,e,n,r){return q(j(e),t,n,r)}function E(t,e,n,r){return q(function(t,e){for(var n,r,o,i=[],s=0;s<t.length&&!((e-=2)<0);++s)n=t.charCodeAt(s),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function A(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function R(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,s,a,u,c=t[o],h=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=n)switch(f){case 1:c<128&&(h=c);break;case 2:128==(192&(i=t[o+1]))&&(u=(31&c)<<6|63&i)>127&&(h=u);break;case 3:i=t[o+1],s=t[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:i=t[o+1],s=t[o+2],a=t[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(h=u)}null===h?(h=65533,f=1):h>65535&&(h-=65536,r.push(h>>>10&1023|55296),h=56320|1023&h),r.push(h),o+=f}return function(t){var e=t.length;if(e<=x)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=x));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return h(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return f(null,t)},u.allocUnsafeSlow=function(t){return f(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var s=t[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,o),o+=s.length}return r},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?R(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return P(this,e,n);case"utf8":case"utf-8":return R(this,e,n);case"ascii":return F(this,e,n);case"latin1":case"binary":return T(this,e,n);case"base64":return A(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return _(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,o){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(r>>>=0),s=(n>>>=0)-(e>>>=0),a=Math.min(i,s),c=this.slice(r,o),h=t.slice(e,n),f=0;f<a;++f)if(c[f]!==h[f]){i=c[f],s=h[f];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return y(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return y(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return v(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return C(this,t,e,n);case"base64":return M(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var x=4096;function F(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function T(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function P(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=I(t[i]);return o}function _(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function k(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function B(t,e,n,r,o,i){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function S(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function L(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function U(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function O(t,e,n,r,i){return i||U(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function D(t,e,n,r,i){return i||U(t,0,n,8),o.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var o=e-t;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||k(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||k(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},u.prototype.readUInt8=function(t,e){return e||k(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||k(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||k(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||k(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||k(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||k(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||k(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return e||k(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||k(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||k(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||k(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||k(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||k(t,4,this.length),o.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||k(t,4,this.length),o.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||k(t,8,this.length),o.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||k(t,8,this.length),o.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||B(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||B(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):S(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):S(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):L(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);B(this,t,e,n,o-1,-o)}var i=0,s=1,a=0;for(this[e]=255&t;++i<n&&(s*=256);)t<0&&0===a&&0!==this[e+i-1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);B(this,t,e,n,o-1,-o)}var i=n-1,s=1,a=0;for(this[e+i]=255&t;--i>=0&&(s*=256);)t<0&&0===a&&0!==this[e+i+1]&&(a=1),this[e+i]=(t/s>>0)-a&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):S(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):S(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):L(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||B(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return O(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return O(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return D(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return D(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var s=u.isBuffer(t)?t:W(new u(t,r).toString()),a=s.length;for(i=0;i<n-e;++i)this[i+e]=s[i%a]}return this};var N=/[^+\/0-9A-Za-z-_]/g;function I(t){return t<16?"0"+t.toString(16):t.toString(16)}function W(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],s=0;s<r;++s){if((n=t.charCodeAt(s))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function j(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(N,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function q(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}}).call(this,n(14))},function(t,e,n){var r=n(40);t.exports=function(t){var e=t.xdomain,n=t.xscheme,o=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||r))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!n&&o)return new XDomainRequest}catch(t){}if(!e)try{return new(self[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},function(t,e,n){var r=n(1),o=n(0);function i(t){this.path=t.path,this.hostname=t.hostname,this.port=t.port,this.secure=t.secure,this.query=t.query,this.timestampParam=t.timestampParam,this.timestampRequests=t.timestampRequests,this.readyState="",this.agent=t.agent||!1,this.socket=t.socket,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.forceNode=t.forceNode,this.isReactNative=t.isReactNative,this.extraHeaders=t.extraHeaders,this.localAddress=t.localAddress}t.exports=i,o(i.prototype),i.prototype.onError=function(t,e){var n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this},i.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},i.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},i.prototype.send=function(t){if("open"!==this.readyState)throw new Error("Transport not open");this.write(t)},i.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},i.prototype.onData=function(t){var e=r.decodePacket(t,this.socket.binaryType);this.onPacket(e)},i.prototype.onPacket=function(t){this.emit("packet",t)},i.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(t,e){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var e=t,o=t.indexOf("["),i=t.indexOf("]");-1!=o&&-1!=i&&(t=t.substring(0,o)+t.substring(o,i).replace(/:/g,";")+t.substring(i,t.length));for(var s=n.exec(t||""),a={},u=14;u--;)a[r[u]]=s[u]||"";return-1!=o&&-1!=i&&(a.source=e,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(e){t.exports=function(t){return n&&e.isBuffer(t)||r&&(t instanceof ArrayBuffer||o(t))};var n="function"==typeof e&&"function"==typeof e.isBuffer,r="function"==typeof ArrayBuffer,o=function(t){return"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer}}).call(this,n(8).Buffer)},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){var r=n(38),o=n(21),i=n(0),s=n(7),a=n(22),u=n(23),c=n(2)("socket.io-client:manager"),h=n(20),f=n(55),l=Object.prototype.hasOwnProperty;function p(t,e){if(!(this instanceof p))return new p(t,e);t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.nsps={},this.subs=[],this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this.readyState="closed",this.uri=t,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=e.parser||s;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==e.autoConnect,this.autoConnect&&this.open()}t.exports=p,p.prototype.emitAll=function(){for(var t in this.emit.apply(this,arguments),this.nsps)l.call(this.nsps,t)&&this.nsps[t].emit.apply(this.nsps[t],arguments)},p.prototype.updateSocketIds=function(){for(var t in this.nsps)l.call(this.nsps,t)&&(this.nsps[t].id=this.generateId(t))},p.prototype.generateId=function(t){return("/"===t?"":t+"#")+this.engine.id},i(p.prototype),p.prototype.reconnection=function(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection},p.prototype.reconnectionAttempts=function(t){return arguments.length?(this._reconnectionAttempts=t,this):this._reconnectionAttempts},p.prototype.reconnectionDelay=function(t){return arguments.length?(this._reconnectionDelay=t,this.backoff&&this.backoff.setMin(t),this):this._reconnectionDelay},p.prototype.randomizationFactor=function(t){return arguments.length?(this._randomizationFactor=t,this.backoff&&this.backoff.setJitter(t),this):this._randomizationFactor},p.prototype.reconnectionDelayMax=function(t){return arguments.length?(this._reconnectionDelayMax=t,this.backoff&&this.backoff.setMax(t),this):this._reconnectionDelayMax},p.prototype.timeout=function(t){return arguments.length?(this._timeout=t,this):this._timeout},p.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},p.prototype.open=p.prototype.connect=function(t,e){if(c("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=r(this.uri,this.opts);var n=this.engine,o=this;this.readyState="opening",this.skipReconnect=!1;var i=a(n,"open",function(){o.onopen(),t&&t()}),s=a(n,"error",function(e){if(c("connect_error"),o.cleanup(),o.readyState="closed",o.emitAll("connect_error",e),t){var n=new Error("Connection error");n.data=e,t(n)}else o.maybeReconnectOnOpen()});if(!1!==this._timeout){var u=this._timeout;c("connect attempt will timeout after %d",u);var h=setTimeout(function(){c("connect attempt timed out after %d",u),i.destroy(),n.close(),n.emit("error","timeout"),o.emitAll("connect_timeout",u)},u);this.subs.push({destroy:function(){clearTimeout(h)}})}return this.subs.push(i),this.subs.push(s),this},p.prototype.onopen=function(){c("open"),this.cleanup(),this.readyState="open",this.emit("open");var t=this.engine;this.subs.push(a(t,"data",u(this,"ondata"))),this.subs.push(a(t,"ping",u(this,"onping"))),this.subs.push(a(t,"pong",u(this,"onpong"))),this.subs.push(a(t,"error",u(this,"onerror"))),this.subs.push(a(t,"close",u(this,"onclose"))),this.subs.push(a(this.decoder,"decoded",u(this,"ondecoded")))},p.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},p.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},p.prototype.ondata=function(t){this.decoder.add(t)},p.prototype.ondecoded=function(t){this.emit("packet",t)},p.prototype.onerror=function(t){c("error",t),this.emitAll("error",t)},p.prototype.socket=function(t,e){var n=this.nsps[t];if(!n){n=new o(this,t,e),this.nsps[t]=n;var r=this;n.on("connecting",i),n.on("connect",function(){n.id=r.generateId(t)}),this.autoConnect&&i()}function i(){~h(r.connecting,n)||r.connecting.push(n)}return n},p.prototype.destroy=function(t){var e=h(this.connecting,t);~e&&this.connecting.splice(e,1),this.connecting.length||this.close()},p.prototype.packet=function(t){c("writing packet %j",t);var e=this;t.query&&0===t.type&&(t.nsp+="?"+t.query),e.encoding?e.packetBuffer.push(t):(e.encoding=!0,this.encoder.encode(t,function(n){for(var r=0;r<n.length;r++)e.engine.write(n[r],t.options);e.encoding=!1,e.processPacketQueue()}))},p.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var t=this.packetBuffer.shift();this.packet(t)}},p.prototype.cleanup=function(){c("cleanup");for(var t=this.subs.length,e=0;e<t;e++){this.subs.shift().destroy()}this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},p.prototype.close=p.prototype.disconnect=function(){c("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},p.prototype.onclose=function(t){c("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()},p.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var t=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var e=this.backoff.duration();c("will wait %dms before reconnect attempt",e),this.reconnecting=!0;var n=setTimeout(function(){t.skipReconnect||(c("attempting reconnect"),t.emitAll("reconnect_attempt",t.backoff.attempts),t.emitAll("reconnecting",t.backoff.attempts),t.skipReconnect||t.open(function(e){e?(c("reconnect attempt error"),t.reconnecting=!1,t.reconnect(),t.emitAll("reconnect_error",e.data)):(c("reconnect success"),t.onreconnect())}))},e);this.subs.push({destroy:function(){clearTimeout(n)}})}},p.prototype.onreconnect=function(){var t=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",t)}},function(t,e,n){var r=n(9),o=n(41),i=n(51),s=n(52);e.polling=function(t){var e=!1,n=!1,s=!1!==t.jsonp;if("undefined"!=typeof location){var a="https:"===location.protocol,u=location.port;u||(u=a?443:80),e=t.hostname!==location.hostname||u!==t.port,n=t.secure!==a}if(t.xdomain=e,t.xscheme=n,"open"in new r(t)&&!t.forceJSONP)return new o(t);if(!s)throw new Error("JSONP disabled");return new i(t)},e.websocket=s},function(t,e,n){var r=n(10),o=n(3),i=n(1),s=n(4),a=n(19),u=n(5)("engine.io-client:polling");t.exports=h;var c=null!=new(n(9))({xdomain:!1}).responseType;function h(t){var e=t&&t.forceBase64;c&&!e||(this.supportsBinary=!1),r.call(this,t)}s(h,r),h.prototype.name="polling",h.prototype.doOpen=function(){this.poll()},h.prototype.pause=function(t){var e=this;function n(){u("paused"),e.readyState="paused",t()}if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||n()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||n()}))}else n()},h.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},h.prototype.onData=function(t){var e=this;u("polling got data %s",t);i.decodePayload(t,this.socket.binaryType,function(t,n,r){if("opening"===e.readyState&&e.onOpen(),"close"===t.type)return e.onClose(),!1;e.onPacket(t)}),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},h.prototype.doClose=function(){var t=this;function e(){u("writing close packet"),t.write([{type:"close"}])}"open"===this.readyState?(u("transport open - closing"),e()):(u("transport not open - deferring close"),this.once("open",e))},h.prototype.write=function(t){var e=this;this.writable=!1;var n=function(){e.writable=!0,e.emit("drain")};i.encodePayload(t,this.supportsBinary,function(t){e.doWrite(t,n)})},h.prototype.uri=function(){var t=this.query||{},e=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(t[this.timestampParam]=a()),this.supportsBinary||t.sid||(t.b64=1),t=o.encode(t),this.port&&("https"===e&&443!==Number(this.port)||"http"===e&&80!==Number(this.port))&&(n=":"+this.port),t.length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t}},function(t,e,n){(function(e){var r=n(43),o=Object.prototype.toString,i="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===o.call(Blob),s="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===o.call(File);t.exports=function t(n){if(!n||"object"!=typeof n)return!1;if(r(n)){for(var o=0,a=n.length;o<a;o++)if(t(n[o]))return!0;return!1}if("function"==typeof e&&e.isBuffer&&e.isBuffer(n)||"function"==typeof ArrayBuffer&&n instanceof ArrayBuffer||i&&n instanceof Blob||s&&n instanceof File)return!0;if(n.toJSON&&"function"==typeof n.toJSON&&1===arguments.length)return t(n.toJSON(),!0);for(var u in n)if(Object.prototype.hasOwnProperty.call(n,u)&&t(n[u]))return!0;return!1}}).call(this,n(8).Buffer)},function(t,e,n){"use strict";var r,o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i=64,s={},a=0,u=0;function c(t){var e="";do{e=o[t%i]+e,t=Math.floor(t/i)}while(t>0);return e}function h(){var t=c(+new Date);return t!==r?(a=0,r=t):t+"."+c(a++)}for(;u<i;u++)s[o[u]]=u;h.encode=c,h.decode=function(t){var e=0;for(u=0;u<t.length;u++)e=e*i+s[t.charAt(u)];return e},t.exports=h},function(t,e){var n=[].indexOf;t.exports=function(t,e){if(n)return t.indexOf(e);for(var r=0;r<t.length;++r)if(t[r]===e)return r;return-1}},function(t,e,n){var r=n(7),o=n(0),i=n(54),s=n(22),a=n(23),u=n(2)("socket.io-client:socket"),c=n(3),h=n(18);t.exports=p;var f={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},l=o.prototype.emit;function p(t,e,n){this.io=t,this.nsp=e,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}o(p.prototype),p.prototype.subEvents=function(){if(!this.subs){var t=this.io;this.subs=[s(t,"open",a(this,"onopen")),s(t,"packet",a(this,"onpacket")),s(t,"close",a(this,"onclose"))]}},p.prototype.open=p.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},p.prototype.send=function(){var t=i(arguments);return t.unshift("message"),this.emit.apply(this,t),this},p.prototype.emit=function(t){if(f.hasOwnProperty(t))return l.apply(this,arguments),this;var e=i(arguments),n={type:(void 0!==this.flags.binary?this.flags.binary:h(e))?r.BINARY_EVENT:r.EVENT,data:e,options:{}};return n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),this.flags={},this},p.prototype.packet=function(t){t.nsp=this.nsp,this.io.packet(t)},p.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var t="object"==typeof this.query?c.encode(this.query):this.query;u("sending connect packet with query %s",t),this.packet({type:r.CONNECT,query:t})}else this.packet({type:r.CONNECT})},p.prototype.onclose=function(t){u("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",t)},p.prototype.onpacket=function(t){var e=t.nsp===this.nsp,n=t.type===r.ERROR&&"/"===t.nsp;if(e||n)switch(t.type){case r.CONNECT:this.onconnect();break;case r.EVENT:case r.BINARY_EVENT:this.onevent(t);break;case r.ACK:case r.BINARY_ACK:this.onack(t);break;case r.DISCONNECT:this.ondisconnect();break;case r.ERROR:this.emit("error",t.data)}},p.prototype.onevent=function(t){var e=t.data||[];u("emitting event %j",e),null!=t.id&&(u("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?l.apply(this,e):this.receiveBuffer.push(e)},p.prototype.ack=function(t){var e=this,n=!1;return function(){if(!n){n=!0;var o=i(arguments);u("sending ack %j",o),e.packet({type:h(o)?r.BINARY_ACK:r.ACK,id:t,data:o})}}},p.prototype.onack=function(t){var e=this.acks[t.id];"function"==typeof e?(u("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):u("bad ack %s",t.id)},p.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},p.prototype.emitBuffered=function(){var t;for(t=0;t<this.receiveBuffer.length;t++)l.apply(this,this.receiveBuffer[t]);for(this.receiveBuffer=[],t=0;t<this.sendBuffer.length;t++)this.packet(this.sendBuffer[t]);this.sendBuffer=[]},p.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},p.prototype.destroy=function(){if(this.subs){for(var t=0;t<this.subs.length;t++)this.subs[t].destroy();this.subs=null}this.io.destroy(this)},p.prototype.close=p.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:r.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},p.prototype.compress=function(t){return this.flags.compress=t,this},p.prototype.binary=function(t){return this.flags.binary=t,this}},function(t,e){t.exports=function(t,e,n){return t.on(e,n),{destroy:function(){t.removeListener(e,n)}}}},function(t,e){var n=[].slice;t.exports=function(t,e){if("string"==typeof e&&(e=t[e]),"function"!=typeof e)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return e.apply(t,r.concat(n.call(arguments)))}}},function(t,e,n){var r=n(28),o=n(7),i=n(15),s=n(2)("socket.io-client");t.exports=e=u;var a=e.managers={};function u(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,o=r(t),u=o.source,c=o.id,h=o.path,f=a[c]&&h in a[c].nsps;return e.forceNew||e["force new connection"]||!1===e.multiplex||f?(s("ignoring socket cache for %s",u),n=i(u,e)):(a[c]||(s("new io instance for %s",u),a[c]=i(u,e)),n=a[c]),o.query&&!e.query&&(e.query=o.query),n.socket(o.path,e)}e.protocol=o.protocol,e.connect=u,e.Manager=n(15),e.Socket=n(21)},,,,function(t,e,n){var r=n(11),o=n(2)("socket.io-client:url");t.exports=function(t,e){var n=t;e=e||"undefined"!=typeof location&&location,null==t&&(t=e.protocol+"//"+e.host);"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?e.protocol+t:e.host+t),/^(https?|wss?):\/\//.test(t)||(o("protocol-less url %s",t),t=void 0!==e?e.protocol+"//"+t:"https://"+t),o("parse %s",t),n=r(t));n.port||(/^(http|ws)$/.test(n.protocol)?n.port="80":/^(http|ws)s$/.test(n.protocol)&&(n.port="443"));n.path=n.path||"/";var i=-1!==n.host.indexOf(":")?"["+n.host+"]":n.host;return n.id=n.protocol+"://"+i+":"+n.port,n.href=n.protocol+"://"+i+(e&&e.port===n.port?"":":"+n.port),n}},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function s(...t){if(!s.enabled)return;const e=s,o=Number(new Date),i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,o)=>{if("%%"===n)return n;a++;const i=r.formatters[o];if("function"==typeof i){const r=t[a];n=i.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return s.namespace=t,s.enabled=r.enabled(t),s.useColors=r.useColors(),s.color=e(t),s.destroy=o,s.extend=i,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function o(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function i(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function s(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){const t=[...r.names.map(s),...r.skips.map(s).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(e=0;e<o;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(30),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e){var n=1e3,r=60*n,o=60*r,i=24*o,s=7*i,a=365.25*i;function u(t,e,n,r){var o=e>=1.5*n;return Math.round(t/n)+" "+r+(o?"s":"")}t.exports=function(t,e){e=e||{};var c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var u=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return u*a;case"weeks":case"week":case"w":return u*s;case"days":case"day":case"d":return u*i;case"hours":case"hour":case"hrs":case"hr":case"h":return u*o;case"minutes":case"minute":case"mins":case"min":case"m":return u*r;case"seconds":case"second":case"secs":case"sec":case"s":return u*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return u;default:return}}(t);if("number"===c&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=i)return u(t,e,i,"day");if(e>=o)return u(t,e,o,"hour");if(e>=r)return u(t,e,r,"minute");if(e>=n)return u(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=i)return Math.round(t/i)+"d";if(e>=o)return Math.round(t/o)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){(function(r){function o(){var t;try{t=e.storage.debug}catch(t){}return!t&&void 0!==r&&"env"in r&&(t=r.env.DEBUG),t}(e=t.exports=n(32)).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},e.formatArgs=function(t){var n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return;var r="color: "+this.color;t.splice(1,0,r,"color: inherit");var o=0,i=0;t[0].replace(/%[a-zA-Z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,r)},e.save=function(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(t){}},e.load=o,e.useColors=function(){if("undefined"!=typeof window&&window.process&&"renderer"===window.process.type)return!0;if("undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;return"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},e.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(t){}}(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.formatters.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}},e.enable(o())}).call(this,n(6))},function(t,e,n){function r(t){var n;function r(){if(r.enabled){var t=r,o=+new Date,i=o-(n||o);t.diff=i,t.prev=n,t.curr=o,n=o;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var u=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;u++;var o=e.formatters[r];if("function"==typeof o){var i=s[u];n=o.call(t,i),s.splice(u,1),u--}return n}),e.formatArgs.call(t,s),(r.log||e.log||console.log.bind(console)).apply(t,s)}}return r.namespace=t,r.enabled=e.enabled(t),r.useColors=e.useColors(),r.color=function(t){var n,r=0;for(n in t)r=(r<<5)-r+t.charCodeAt(n),r|=0;return e.colors[Math.abs(r)%e.colors.length]}(t),r.destroy=o,"function"==typeof e.init&&e.init(r),e.instances.push(r),r}function o(){var t=e.instances.indexOf(this);return-1!==t&&(e.instances.splice(t,1),!0)}(e=t.exports=r.debug=r.default=r).coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){e.enable("")},e.enable=function(t){var n;e.save(t),e.names=[],e.skips=[];var r=("string"==typeof t?t:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(t=r[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")));for(n=0;n<e.instances.length;n++){var i=e.instances[n];i.enabled=e.enabled(i.namespace)}},e.enabled=function(t){if("*"===t[t.length-1])return!0;var n,r;for(n=0,r=e.skips.length;n<r;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;n<r;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(33),e.instances=[],e.names=[],e.skips=[],e.formatters={}},function(t,e){var n=1e3,r=60*n,o=60*r,i=24*o,s=365.25*i;function a(t,e,n){if(!(t<e))return t<1.5*e?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}t.exports=function(t,e){e=e||{};var u,c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(!e)return;var a=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return a*s;case"days":case"day":case"d":return a*i;case"hours":case"hour":case"hrs":case"hr":case"h":return a*o;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}(t);if("number"===c&&!1===isNaN(t))return e.long?a(u=t,i,"day")||a(u,o,"hour")||a(u,r,"minute")||a(u,n,"second")||u+" ms":function(t){if(t>=i)return Math.round(t/i)+"d";if(t>=o)return Math.round(t/o)+"h";if(t>=r)return Math.round(t/r)+"m";if(t>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){var r=n(12),o=n(13),i=Object.prototype.toString,s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),a="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);e.deconstructPacket=function(t){var e=[],n=t.data,i=t;return i.data=function t(e,n){if(!e)return e;if(o(e)){var i={_placeholder:!0,num:n.length};return n.push(e),i}if(r(e)){for(var s=new Array(e.length),a=0;a<e.length;a++)s[a]=t(e[a],n);return s}if("object"==typeof e&&!(e instanceof Date)){var s={};for(var u in e)s[u]=t(e[u],n);return s}return e}(n,e),i.attachments=e.length,{packet:i,buffers:e}},e.reconstructPacket=function(t,e){return t.data=function t(e,n){if(!e)return e;if(e&&e._placeholder)return n[e.num];if(r(e))for(var o=0;o<e.length;o++)e[o]=t(e[o],n);else if("object"==typeof e)for(var i in e)e[i]=t(e[i],n);return e}(t.data,e),t.attachments=void 0,t},e.removeBlobs=function(t,e){var n=0,i=t;!function t(u,c,h){if(!u)return u;if(s&&u instanceof Blob||a&&u instanceof File){n++;var f=new FileReader;f.onload=function(){h?h[c]=this.result:i=this.result,--n||e(i)},f.readAsArrayBuffer(u)}else if(r(u))for(var l=0;l<u.length;l++)t(u[l],l,u);else if("object"==typeof u&&!o(u))for(var p in u)t(u[p],p,u)}(i),n||e(i)}},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){for(var e,n=c(t),r=n[0],s=n[1],a=new i(function(t,e,n){return 3*(e+n)/4-n}(0,r,s)),u=0,h=s>0?r-4:r,f=0;f<h;f+=4)e=o[t.charCodeAt(f)]<<18|o[t.charCodeAt(f+1)]<<12|o[t.charCodeAt(f+2)]<<6|o[t.charCodeAt(f+3)],a[u++]=e>>16&255,a[u++]=e>>8&255,a[u++]=255&e;2===s&&(e=o[t.charCodeAt(f)]<<2|o[t.charCodeAt(f+1)]>>4,a[u++]=255&e);1===s&&(e=o[t.charCodeAt(f)]<<10|o[t.charCodeAt(f+1)]<<4|o[t.charCodeAt(f+2)]>>2,a[u++]=e>>8&255,a[u++]=255&e);return a},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,i=[],s=0,a=n-o;s<a;s+=16383)i.push(h(t,s,s+16383>a?a:s+16383));1===o?(e=t[n-1],i.push(r[e>>2]+r[e<<4&63]+"==")):2===o&&(e=(t[n-2]<<8)+t[n-1],i.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)r[a]=s[a],o[s.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function h(t,e,n){for(var o,i,s=[],a=e;a<n;a+=3)o=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,o){var i,s,a=8*o-r-1,u=(1<<a)-1,c=u>>1,h=-7,f=n?o-1:0,l=n?-1:1,p=t[e+f];for(f+=l,i=p&(1<<-h)-1,p>>=-h,h+=a;h>0;i=256*i+t[e+f],f+=l,h-=8);for(s=i&(1<<-h)-1,i>>=-h,h+=r;h>0;s=256*s+t[e+f],f+=l,h-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,r),i-=c}return(p?-1:1)*s*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var s,a,u,c=8*i-o-1,h=(1<<c)-1,f=h>>1,l=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:i-1,d=r?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+f>=1?l/u:l*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=h?(a=0,s=h):s+f>=1?(a=(e*u-1)*Math.pow(2,o),s+=f):(a=e*Math.pow(2,f-1)*Math.pow(2,o),s=0));o>=8;t[n+p]=255&a,p+=d,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;t[n+p]=255&s,p+=d,s/=256,c-=8);t[n+p-d]|=128*g}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){t.exports=n(39),t.exports.parser=n(1)},function(t,e,n){var r=n(16),o=n(0),i=n(5)("engine.io-client:socket"),s=n(20),a=n(1),u=n(11),c=n(3);function h(t,e){if(!(this instanceof h))return new h(t,e);e=e||{},t&&"object"==typeof t&&(e=t,t=null),t?(t=u(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=u(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.agent=e.agent||!1,this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.query=e.query||{},"string"==typeof this.query&&(this.query=c.decode(this.query)),this.upgrade=!1!==e.upgrade,this.path=(e.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!e.forceJSONP,this.jsonp=!1!==e.jsonp,this.forceBase64=!!e.forceBase64,this.enablesXDR=!!e.enablesXDR,this.withCredentials=!1!==e.withCredentials,this.timestampParam=e.timestampParam||"t",this.timestampRequests=e.timestampRequests,this.transports=e.transports||["polling","websocket"],this.transportOptions=e.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=e.policyPort||843,this.rememberUpgrade=e.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=e.onlyBinaryUpgrades,this.perMessageDeflate=!1!==e.perMessageDeflate&&(e.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=e.pfx||null,this.key=e.key||null,this.passphrase=e.passphrase||null,this.cert=e.cert||null,this.ca=e.ca||null,this.ciphers=e.ciphers||null,this.rejectUnauthorized=void 0===e.rejectUnauthorized||e.rejectUnauthorized,this.forceNode=!!e.forceNode,this.isReactNative="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase(),("undefined"==typeof self||this.isReactNative)&&(e.extraHeaders&&Object.keys(e.extraHeaders).length>0&&(this.extraHeaders=e.extraHeaders),e.localAddress&&(this.localAddress=e.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}t.exports=h,h.priorWebsocketSuccess=!1,o(h.prototype),h.protocol=a.protocol,h.Socket=h,h.Transport=n(10),h.transports=n(16),h.parser=n(1),h.prototype.createTransport=function(t){i('creating transport "%s"',t);var e=function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.query);e.EIO=a.protocol,e.transport=t;var n=this.transportOptions[t]||{};return this.id&&(e.sid=this.id),new r[t]({query:e,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,withCredentials:n.withCredentials||this.withCredentials,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0,isReactNative:this.isReactNative})},h.prototype.open=function(){var t;if(this.rememberUpgrade&&h.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length){var e=this;return void setTimeout(function(){e.emit("error","No transports available")},0)}t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)},h.prototype.setTransport=function(t){i("setting transport %s",t.name);var e=this;this.transport&&(i("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",function(){e.onDrain()}).on("packet",function(t){e.onPacket(t)}).on("error",function(t){e.onError(t)}).on("close",function(){e.onClose("transport close")})},h.prototype.probe=function(t){i('probing transport "%s"',t);var e=this.createTransport(t,{probe:1}),n=!1,r=this;function o(){if(r.onlyBinaryUpgrades){var o=!this.supportsBinary&&r.transport.supportsBinary;n=n||o}n||(i('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",function(o){if(!n)if("pong"===o.type&&"probe"===o.data){if(i('probe transport "%s" pong',t),r.upgrading=!0,r.emit("upgrading",e),!e)return;h.priorWebsocketSuccess="websocket"===e.name,i('pausing current transport "%s"',r.transport.name),r.transport.pause(function(){n||"closed"!==r.readyState&&(i("changing transport and sending upgrade packet"),l(),r.setTransport(e),e.send([{type:"upgrade"}]),r.emit("upgrade",e),e=null,r.upgrading=!1,r.flush())})}else{i('probe transport "%s" failed',t);var s=new Error("probe error");s.transport=e.name,r.emit("upgradeError",s)}}))}function s(){n||(n=!0,l(),e.close(),e=null)}function a(n){var o=new Error("probe error: "+n);o.transport=e.name,s(),i('probe transport "%s" failed because of error: %s',t,n),r.emit("upgradeError",o)}function u(){a("transport closed")}function c(){a("socket closed")}function f(t){e&&t.name!==e.name&&(i('"%s" works - aborting "%s"',t.name,e.name),s())}function l(){e.removeListener("open",o),e.removeListener("error",a),e.removeListener("close",u),r.removeListener("close",c),r.removeListener("upgrading",f)}h.priorWebsocketSuccess=!1,e.once("open",o),e.once("error",a),e.once("close",u),this.once("close",c),this.once("upgrading",f),e.open()},h.prototype.onOpen=function(){if(i("socket open"),this.readyState="open",h.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){i("starting upgrade probes");for(var t=0,e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}},h.prototype.onPacket=function(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(i('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else i('packet received with socket readyState "%s"',this.readyState)},h.prototype.onHandshake=function(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},h.prototype.onHeartbeat=function(t){clearTimeout(this.pingTimeoutTimer);var e=this;e.pingTimeoutTimer=setTimeout(function(){"closed"!==e.readyState&&e.onClose("ping timeout")},t||e.pingInterval+e.pingTimeout)},h.prototype.setPing=function(){var t=this;clearTimeout(t.pingIntervalTimer),t.pingIntervalTimer=setTimeout(function(){i("writing ping packet - expecting pong within %sms",t.pingTimeout),t.ping(),t.onHeartbeat(t.pingTimeout)},t.pingInterval)},h.prototype.ping=function(){var t=this;this.sendPacket("ping",function(){t.emit("ping")})},h.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},h.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(i("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},h.prototype.write=h.prototype.send=function(t,e,n){return this.sendPacket("message",t,e,n),this},h.prototype.sendPacket=function(t,e,n,r){if("function"==typeof e&&(r=e,e=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){(n=n||{}).compress=!1!==n.compress;var o={type:t,data:e,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},h.prototype.close=function(){if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var t=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?r():e()}):this.upgrading?r():e()}function e(){t.onClose("forced close"),i("socket closing - telling transport to close"),t.transport.close()}function n(){t.removeListener("upgrade",n),t.removeListener("upgradeError",n),e()}function r(){t.once("upgrade",n),t.once("upgradeError",n)}return this},h.prototype.onError=function(t){i("socket error %j",t),h.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)},h.prototype.onClose=function(t,e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){i('socket close with reason: "%s"',t);clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0}},h.prototype.filterUpgrades=function(t){for(var e=[],n=0,r=t.length;n<r;n++)~s(this.transports,t[n])&&e.push(t[n]);return e}},function(t,e){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},function(t,e,n){var r=n(9),o=n(17),i=n(0),s=n(4),a=n(5)("engine.io-client:polling-xhr");function u(){}function c(t){if(o.call(this,t),this.requestTimeout=t.requestTimeout,this.extraHeaders=t.extraHeaders,"undefined"!=typeof location){var e="https:"===location.protocol,n=location.port;n||(n=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||n!==t.port,this.xs=t.secure!==e}}function h(t){this.method=t.method||"GET",this.uri=t.uri,this.xd=!!t.xd,this.xs=!!t.xs,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.agent=t.agent,this.isBinary=t.isBinary,this.supportsBinary=t.supportsBinary,this.enablesXDR=t.enablesXDR,this.withCredentials=t.withCredentials,this.requestTimeout=t.requestTimeout,this.pfx=t.pfx,this.key=t.key,this.passphrase=t.passphrase,this.cert=t.cert,this.ca=t.ca,this.ciphers=t.ciphers,this.rejectUnauthorized=t.rejectUnauthorized,this.extraHeaders=t.extraHeaders,this.create()}if(t.exports=c,t.exports.Request=h,s(c,o),c.prototype.supportsBinary=!0,c.prototype.request=function(t){return(t=t||{}).uri=this.uri(),t.xd=this.xd,t.xs=this.xs,t.agent=this.agent||!1,t.supportsBinary=this.supportsBinary,t.enablesXDR=this.enablesXDR,t.withCredentials=this.withCredentials,t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized,t.requestTimeout=this.requestTimeout,t.extraHeaders=this.extraHeaders,new h(t)},c.prototype.doWrite=function(t,e){var n="string"!=typeof t&&void 0!==t,r=this.request({method:"POST",data:t,isBinary:n}),o=this;r.on("success",e),r.on("error",function(t){o.onError("xhr post error",t)}),this.sendXhr=r},c.prototype.doPoll=function(){a("xhr poll");var t=this.request(),e=this;t.on("data",function(t){e.onData(t)}),t.on("error",function(t){e.onError("xhr poll error",t)}),this.pollXhr=t},i(h.prototype),h.prototype.create=function(){var t={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};t.pfx=this.pfx,t.key=this.key,t.passphrase=this.passphrase,t.cert=this.cert,t.ca=this.ca,t.ciphers=this.ciphers,t.rejectUnauthorized=this.rejectUnauthorized;var e=this.xhr=new r(t),n=this;try{a("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.extraHeaders)for(var o in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&e.setRequestHeader(o,this.extraHeaders[o])}catch(t){}if("POST"===this.method)try{this.isBinary?e.setRequestHeader("Content-type","application/octet-stream"):e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.withCredentials),this.requestTimeout&&(e.timeout=this.requestTimeout),this.hasXDR()?(e.onload=function(){n.onLoad()},e.onerror=function(){n.onError(e.responseText)}):e.onreadystatechange=function(){if(2===e.readyState)try{var t=e.getResponseHeader("Content-Type");(n.supportsBinary&&"application/octet-stream"===t||"application/octet-stream; charset=UTF-8"===t)&&(e.responseType="arraybuffer")}catch(t){}4===e.readyState&&(200===e.status||1223===e.status?n.onLoad():setTimeout(function(){n.onError("number"==typeof e.status?e.status:0)},0))},a("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout(function(){n.onError(t)},0)}"undefined"!=typeof document&&(this.index=h.requestsCount++,h.requests[this.index]=this)},h.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},h.prototype.onData=function(t){this.emit("data",t),this.onSuccess()},h.prototype.onError=function(t){this.emit("error",t),this.cleanup(!0)},h.prototype.cleanup=function(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=u:this.xhr.onreadystatechange=u,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete h.requests[this.index],this.xhr=null}},h.prototype.onLoad=function(){var t;try{var e;try{e=this.xhr.getResponseHeader("Content-Type")}catch(t){}t=("application/octet-stream"===e||"application/octet-stream; charset=UTF-8"===e)&&this.xhr.response||this.xhr.responseText}catch(t){this.onError(t)}null!=t&&this.onData(t)},h.prototype.hasXDR=function(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR},h.prototype.abort=function(){this.cleanup()},h.requestsCount=0,h.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",l);else if("function"==typeof addEventListener){var f="onpagehide"in self?"pagehide":"unload";addEventListener(f,l,!1)}function l(){for(var t in h.requests)h.requests.hasOwnProperty(t)&&h.requests[t].abort()}},function(t,e){t.exports=Object.keys||function(t){var e=[],n=Object.prototype.hasOwnProperty;for(var r in t)n.call(t,r)&&e.push(r);return e}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){t.exports=function(t,e,n){var r=t.byteLength;if(e=e||0,n=n||r,t.slice)return t.slice(e,n);if(e<0&&(e+=r),n<0&&(n+=r),n>r&&(n=r),e>=r||e>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(t),i=new Uint8Array(n-e),s=e,a=0;s<n;s++,a++)i[a]=o[s];return i.buffer}},function(t,e){function n(){}t.exports=function(t,e,r){var o=!1;return r=r||n,i.count=t,0===t?e():i;function i(t,n){if(i.count<=0)throw new Error("after called too many times");--i.count,t?(o=!0,e(t),e=r):0!==i.count||o||e(null,n)}}},function(t,e){
/*! https://mths.be/utf8js v2.1.2 by @mathias */
var n,r,o,i=String.fromCharCode;function s(t){for(var e,n,r=[],o=0,i=t.length;o<i;)(e=t.charCodeAt(o++))>=55296&&e<=56319&&o<i?56320==(64512&(n=t.charCodeAt(o++)))?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),o--):r.push(e);return r}function a(t,e){if(t>=55296&&t<=57343){if(e)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function u(t,e){return i(t>>e&63|128)}function c(t,e){if(0==(4294967168&t))return i(t);var n="";return 0==(4294965248&t)?n=i(t>>6&31|192):0==(4294901760&t)?(a(t,e)||(t=65533),n=i(t>>12&15|224),n+=u(t,6)):0==(4292870144&t)&&(n=i(t>>18&7|240),n+=u(t,12),n+=u(t,6)),n+=i(63&t|128)}function h(){if(o>=r)throw Error("Invalid byte index");var t=255&n[o];if(o++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function f(t){var e,i;if(o>r)throw Error("Invalid byte index");if(o==r)return!1;if(e=255&n[o],o++,0==(128&e))return e;if(192==(224&e)){if((i=(31&e)<<6|h())>=128)return i;throw Error("Invalid continuation byte")}if(224==(240&e)){if((i=(15&e)<<12|h()<<6|h())>=2048)return a(i,t)?i:65533;throw Error("Invalid continuation byte")}if(240==(248&e)&&(i=(7&e)<<18|h()<<12|h()<<6|h())>=65536&&i<=1114111)return i;throw Error("Invalid UTF-8 detected")}t.exports={version:"2.1.2",encode:function(t,e){for(var n=!1!==(e=e||{}).strict,r=s(t),o=r.length,i=-1,a="";++i<o;)a+=c(r[i],n);return a},decode:function(t,e){var a=!1!==(e=e||{}).strict;n=s(t),r=n.length,o=0;for(var u,c=[];!1!==(u=f(a));)c.push(u);return function(t){for(var e,n=t.length,r=-1,o="";++r<n;)(e=t[r])>65535&&(o+=i((e-=65536)>>>10&1023|55296),e=56320|1023&e),o+=i(e);return o}(c)}}},function(t,e){!function(){"use strict";for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<t.length;r++)n[t.charCodeAt(r)]=r;e.encode=function(e){var n,r=new Uint8Array(e),o=r.length,i="";for(n=0;n<o;n+=3)i+=t[r[n]>>2],i+=t[(3&r[n])<<4|r[n+1]>>4],i+=t[(15&r[n+1])<<2|r[n+2]>>6],i+=t[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},e.decode=function(t){var e,r,o,i,s,a=.75*t.length,u=t.length,c=0;"="===t[t.length-1]&&(a--,"="===t[t.length-2]&&a--);var h=new ArrayBuffer(a),f=new Uint8Array(h);for(e=0;e<u;e+=4)r=n[t.charCodeAt(e)],o=n[t.charCodeAt(e+1)],i=n[t.charCodeAt(e+2)],s=n[t.charCodeAt(e+3)],f[c++]=r<<2|o>>4,f[c++]=(15&o)<<4|i>>2,f[c++]=(3&i)<<6|63&s;return h}}()},function(t,e){var n=void 0!==n?n:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder&&MozBlobBuilder,r=function(){try{return 2===new Blob(["hi"]).size}catch(t){return!1}}(),o=r&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(t){return!1}}(),i=n&&n.prototype.append&&n.prototype.getBlob;function s(t){return t.map(function(t){if(t.buffer instanceof ArrayBuffer){var e=t.buffer;if(t.byteLength!==e.byteLength){var n=new Uint8Array(t.byteLength);n.set(new Uint8Array(e,t.byteOffset,t.byteLength)),e=n.buffer}return e}return t})}function a(t,e){e=e||{};var r=new n;return s(t).forEach(function(t){r.append(t)}),e.type?r.getBlob(e.type):r.getBlob()}function u(t,e){return new Blob(s(t),e||{})}"undefined"!=typeof Blob&&(a.prototype=Blob.prototype,u.prototype=Blob.prototype),t.exports=r?o?Blob:u:i?a:void 0},function(t,e,n){t.exports=function(t){function e(t){let e=0;for(let n=0;n<t.length;n++)e=(e<<5)-e+t.charCodeAt(n),e|=0;return r.colors[Math.abs(e)%r.colors.length]}function r(t){let n;function s(...t){if(!s.enabled)return;const e=s,o=Number(new Date),i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o,t[0]=r.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,(n,o)=>{if("%%"===n)return n;a++;const i=r.formatters[o];if("function"==typeof i){const r=t[a];n=i.call(e,r),t.splice(a,1),a--}return n}),r.formatArgs.call(e,t),(e.log||r.log).apply(e,t)}return s.namespace=t,s.enabled=r.enabled(t),s.useColors=r.useColors(),s.color=e(t),s.destroy=o,s.extend=i,"function"==typeof r.init&&r.init(s),r.instances.push(s),s}function o(){const t=r.instances.indexOf(this);return-1!==t&&(r.instances.splice(t,1),!0)}function i(t,e){const n=r(this.namespace+(void 0===e?":":e)+t);return n.log=this.log,n}function s(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return r.debug=r,r.default=r,r.coerce=function(t){return t instanceof Error?t.stack||t.message:t},r.disable=function(){const t=[...r.names.map(s),...r.skips.map(s).map(t=>"-"+t)].join(",");return r.enable(""),t},r.enable=function(t){let e;r.save(t),r.names=[],r.skips=[];const n=("string"==typeof t?t:"").split(/[\s,]+/),o=n.length;for(e=0;e<o;e++)n[e]&&("-"===(t=n[e].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+t.substr(1)+"$")):r.names.push(new RegExp("^"+t+"$")));for(e=0;e<r.instances.length;e++){const t=r.instances[e];t.enabled=r.enabled(t.namespace)}},r.enabled=function(t){if("*"===t[t.length-1])return!0;let e,n;for(e=0,n=r.skips.length;e<n;e++)if(r.skips[e].test(t))return!1;for(e=0,n=r.names.length;e<n;e++)if(r.names[e].test(t))return!0;return!1},r.humanize=n(50),Object.keys(t).forEach(e=>{r[e]=t[e]}),r.instances=[],r.names=[],r.skips=[],r.formatters={},r.selectColor=e,r.enable(r.load()),r}},function(t,e){var n=1e3,r=60*n,o=60*r,i=24*o,s=7*i,a=365.25*i;function u(t,e,n,r){var o=e>=1.5*n;return Math.round(t/n)+" "+r+(o?"s":"")}t.exports=function(t,e){e=e||{};var c=typeof t;if("string"===c&&t.length>0)return function(t){if((t=String(t)).length>100)return;var e=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(!e)return;var u=parseFloat(e[1]);switch((e[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return u*a;case"weeks":case"week":case"w":return u*s;case"days":case"day":case"d":return u*i;case"hours":case"hour":case"hrs":case"hr":case"h":return u*o;case"minutes":case"minute":case"mins":case"min":case"m":return u*r;case"seconds":case"second":case"secs":case"sec":case"s":return u*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return u;default:return}}(t);if("number"===c&&isFinite(t))return e.long?function(t){var e=Math.abs(t);if(e>=i)return u(t,e,i,"day");if(e>=o)return u(t,e,o,"hour");if(e>=r)return u(t,e,r,"minute");if(e>=n)return u(t,e,n,"second");return t+" ms"}(t):function(t){var e=Math.abs(t);if(e>=i)return Math.round(t/i)+"d";if(e>=o)return Math.round(t/o)+"h";if(e>=r)return Math.round(t/r)+"m";if(e>=n)return Math.round(t/n)+"s";return t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},function(t,e,n){(function(e){var r=n(17),o=n(4);t.exports=h;var i,s=/\n/g,a=/\\n/g;function u(){}function c(){return"undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:{}}function h(t){if(r.call(this,t),this.query=this.query||{},!i){var e=c();i=e.___eio=e.___eio||[]}this.index=i.length;var n=this;i.push(function(t){n.onData(t)}),this.query.j=this.index,"function"==typeof addEventListener&&addEventListener("beforeunload",function(){n.script&&(n.script.onerror=u)},!1)}o(h,r),h.prototype.supportsBinary=!1,h.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),r.prototype.doClose.call(this)},h.prototype.doPoll=function(){var t=this,e=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),e.async=!0,e.src=this.uri(),e.onerror=function(e){t.onError("jsonp poll error",e)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(e,n):(document.head||document.body).appendChild(e),this.script=e,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)},100)},h.prototype.doWrite=function(t,e){var n=this;if(!this.form){var r,o=document.createElement("form"),i=document.createElement("textarea"),u=this.iframeId="eio_iframe_"+this.index;o.className="socketio",o.style.position="absolute",o.style.top="-1000px",o.style.left="-1000px",o.target=u,o.method="POST",o.setAttribute("accept-charset","utf-8"),i.name="d",o.appendChild(i),document.body.appendChild(o),this.form=o,this.area=i}function c(){h(),e()}function h(){if(n.iframe)try{n.form.removeChild(n.iframe)}catch(t){n.onError("jsonp polling iframe removal error",t)}try{var t='<iframe src="javascript:0" name="'+n.iframeId+'">';r=document.createElement(t)}catch(t){(r=document.createElement("iframe")).name=n.iframeId,r.src="javascript:0"}r.id=n.iframeId,n.form.appendChild(r),n.iframe=r}this.form.action=this.uri(),h(),t=t.replace(a,"\\\n"),this.area.value=t.replace(s,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===n.iframe.readyState&&c()}:this.iframe.onload=c}}).call(this,n(14))},function(t,e,n){(function(e){var r,o,i=n(10),s=n(1),a=n(3),u=n(4),c=n(19),h=n(5)("engine.io-client:websocket");if("undefined"!=typeof WebSocket?r=WebSocket:"undefined"!=typeof self&&(r=self.WebSocket||self.MozWebSocket),"undefined"==typeof window)try{o=n(53)}catch(t){}var f=r||o;function l(t){t&&t.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=t.perMessageDeflate,this.usingBrowserWebSocket=r&&!t.forceNode,this.protocols=t.protocols,this.usingBrowserWebSocket||(f=o),i.call(this,t)}t.exports=l,u(l,i),l.prototype.name="websocket",l.prototype.supportsBinary=!0,l.prototype.doOpen=function(){if(this.check()){var t=this.uri(),e=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket&&!this.isReactNative?e?new f(t,e):new f(t):new f(t,e,n)}catch(t){return this.emit("error",t)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},l.prototype.addEventListeners=function(){var t=this;this.ws.onopen=function(){t.onOpen()},this.ws.onclose=function(){t.onClose()},this.ws.onmessage=function(e){t.onData(e.data)},this.ws.onerror=function(e){t.onError("websocket error",e)}},l.prototype.write=function(t){var n=this;this.writable=!1;for(var r=t.length,o=0,i=r;o<i;o++)!function(t){s.encodePacket(t,n.supportsBinary,function(o){if(!n.usingBrowserWebSocket){var i={};if(t.options&&(i.compress=t.options.compress),n.perMessageDeflate)("string"==typeof o?e.byteLength(o):o.length)<n.perMessageDeflate.threshold&&(i.compress=!1)}try{n.usingBrowserWebSocket?n.ws.send(o):n.ws.send(o,i)}catch(t){h("websocket closed before onclose event")}--r||a()})}(t[o]);function a(){n.emit("flush"),setTimeout(function(){n.writable=!0,n.emit("drain")},0)}},l.prototype.onClose=function(){i.prototype.onClose.call(this)},l.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},l.prototype.uri=function(){var t=this.query||{},e=this.secure?"wss":"ws",n="";return this.port&&("wss"===e&&443!==Number(this.port)||"ws"===e&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(t[this.timestampParam]=c()),this.supportsBinary||(t.b64=1),(t=a.encode(t)).length&&(t="?"+t),e+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+t},l.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===l.prototype.name)}}).call(this,n(8).Buffer)},function(t,e){},function(t,e){t.exports=function(t,e){for(var n=[],r=(e=e||0)||0;r<t.length;r++)n[r-e]=t[r];return n}},function(t,e){function n(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=n,n.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(t){this.ms=t},n.prototype.setMax=function(t){this.max=t},n.prototype.setJitter=function(t){this.jitter=t}},function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"create",function(){return h}),n.d(r,"clone",function(){return f}),n.d(r,"copy",function(){return l}),n.d(r,"fromValues",function(){return p}),n.d(r,"set",function(){return d}),n.d(r,"identity",function(){return g}),n.d(r,"transpose",function(){return y}),n.d(r,"invert",function(){return m}),n.d(r,"adjoint",function(){return v}),n.d(r,"determinant",function(){return b}),n.d(r,"multiply",function(){return w}),n.d(r,"translate",function(){return C}),n.d(r,"scale",function(){return M}),n.d(r,"rotate",function(){return E}),n.d(r,"rotateX",function(){return A}),n.d(r,"rotateY",function(){return R}),n.d(r,"rotateZ",function(){return x}),n.d(r,"fromTranslation",function(){return F}),n.d(r,"fromScaling",function(){return T}),n.d(r,"fromRotation",function(){return P}),n.d(r,"fromXRotation",function(){return _}),n.d(r,"fromYRotation",function(){return k}),n.d(r,"fromZRotation",function(){return B}),n.d(r,"fromRotationTranslation",function(){return S}),n.d(r,"fromQuat2",function(){return L}),n.d(r,"getTranslation",function(){return U}),n.d(r,"getScaling",function(){return O}),n.d(r,"getRotation",function(){return D}),n.d(r,"fromRotationTranslationScale",function(){return N}),n.d(r,"fromRotationTranslationScaleOrigin",function(){return I}),n.d(r,"fromQuat",function(){return W}),n.d(r,"frustum",function(){return j}),n.d(r,"perspective",function(){return q}),n.d(r,"perspectiveFromFieldOfView",function(){return Y}),n.d(r,"ortho",function(){return G}),n.d(r,"lookAt",function(){return z}),n.d(r,"targetTo",function(){return V}),n.d(r,"str",function(){return H}),n.d(r,"frob",function(){return X}),n.d(r,"add",function(){return K}),n.d(r,"subtract",function(){return J}),n.d(r,"multiplyScalar",function(){return $}),n.d(r,"multiplyScalarAndAdd",function(){return Z}),n.d(r,"exactEquals",function(){return Q}),n.d(r,"equals",function(){return tt}),n.d(r,"mul",function(){return et}),n.d(r,"sub",function(){return nt});var o={};n.r(o),n.d(o,"create",function(){return rt}),n.d(o,"clone",function(){return ot}),n.d(o,"length",function(){return it}),n.d(o,"fromValues",function(){return st}),n.d(o,"copy",function(){return at}),n.d(o,"set",function(){return ut}),n.d(o,"add",function(){return ct}),n.d(o,"subtract",function(){return ht}),n.d(o,"multiply",function(){return ft}),n.d(o,"divide",function(){return lt}),n.d(o,"ceil",function(){return pt}),n.d(o,"floor",function(){return dt}),n.d(o,"min",function(){return gt}),n.d(o,"max",function(){return yt}),n.d(o,"round",function(){return mt}),n.d(o,"scale",function(){return vt}),n.d(o,"scaleAndAdd",function(){return bt}),n.d(o,"distance",function(){return wt}),n.d(o,"squaredDistance",function(){return Ct}),n.d(o,"squaredLength",function(){return Mt}),n.d(o,"negate",function(){return Et}),n.d(o,"inverse",function(){return At}),n.d(o,"normalize",function(){return Rt}),n.d(o,"dot",function(){return xt}),n.d(o,"cross",function(){return Ft}),n.d(o,"lerp",function(){return Tt}),n.d(o,"hermite",function(){return Pt}),n.d(o,"bezier",function(){return _t}),n.d(o,"random",function(){return kt}),n.d(o,"transformMat4",function(){return Bt}),n.d(o,"transformMat3",function(){return St}),n.d(o,"transformQuat",function(){return Lt}),n.d(o,"rotateX",function(){return Ut}),n.d(o,"rotateY",function(){return Ot}),n.d(o,"rotateZ",function(){return Dt}),n.d(o,"angle",function(){return Nt}),n.d(o,"zero",function(){return It}),n.d(o,"str",function(){return Wt}),n.d(o,"exactEquals",function(){return jt}),n.d(o,"equals",function(){return qt}),n.d(o,"sub",function(){return Gt}),n.d(o,"mul",function(){return zt}),n.d(o,"div",function(){return Vt}),n.d(o,"dist",function(){return Ht}),n.d(o,"sqrDist",function(){return Xt}),n.d(o,"len",function(){return Kt}),n.d(o,"sqrLen",function(){return Jt}),n.d(o,"forEach",function(){return $t});var i={};n.r(i),n.d(i,"create",function(){return te}),n.d(i,"identity",function(){return ee}),n.d(i,"setAxisAngle",function(){return ne}),n.d(i,"getAxisAngle",function(){return re}),n.d(i,"getAngle",function(){return oe}),n.d(i,"multiply",function(){return ie}),n.d(i,"rotateX",function(){return se}),n.d(i,"rotateY",function(){return ae}),n.d(i,"rotateZ",function(){return ue}),n.d(i,"calculateW",function(){return ce}),n.d(i,"exp",function(){return he}),n.d(i,"ln",function(){return fe}),n.d(i,"pow",function(){return le}),n.d(i,"slerp",function(){return pe}),n.d(i,"random",function(){return de}),n.d(i,"invert",function(){return ge}),n.d(i,"conjugate",function(){return ye}),n.d(i,"fromMat3",function(){return me}),n.d(i,"fromEuler",function(){return ve}),n.d(i,"str",function(){return be}),n.d(i,"clone",function(){return Fe}),n.d(i,"fromValues",function(){return Te}),n.d(i,"copy",function(){return Pe}),n.d(i,"set",function(){return _e}),n.d(i,"add",function(){return ke}),n.d(i,"mul",function(){return Be}),n.d(i,"scale",function(){return Se}),n.d(i,"dot",function(){return Le}),n.d(i,"lerp",function(){return Ue}),n.d(i,"length",function(){return Oe}),n.d(i,"len",function(){return De}),n.d(i,"squaredLength",function(){return Ne}),n.d(i,"sqrLen",function(){return Ie}),n.d(i,"normalize",function(){return We}),n.d(i,"exactEquals",function(){return je}),n.d(i,"equals",function(){return qe}),n.d(i,"rotationTo",function(){return Ye}),n.d(i,"sqlerp",function(){return Ge}),n.d(i,"setAxes",function(){return ze});var s={};n.r(s),n.d(s,"create",function(){return Ve}),n.d(s,"clone",function(){return He}),n.d(s,"fromValues",function(){return Xe}),n.d(s,"copy",function(){return Ke}),n.d(s,"set",function(){return Je}),n.d(s,"add",function(){return $e}),n.d(s,"subtract",function(){return Ze}),n.d(s,"multiply",function(){return Qe}),n.d(s,"divide",function(){return tn}),n.d(s,"ceil",function(){return en}),n.d(s,"floor",function(){return nn}),n.d(s,"min",function(){return rn}),n.d(s,"max",function(){return on}),n.d(s,"round",function(){return sn}),n.d(s,"scale",function(){return an}),n.d(s,"scaleAndAdd",function(){return un}),n.d(s,"distance",function(){return cn}),n.d(s,"squaredDistance",function(){return hn}),n.d(s,"length",function(){return fn}),n.d(s,"squaredLength",function(){return ln}),n.d(s,"negate",function(){return pn}),n.d(s,"inverse",function(){return dn}),n.d(s,"normalize",function(){return gn}),n.d(s,"dot",function(){return yn}),n.d(s,"cross",function(){return mn}),n.d(s,"lerp",function(){return vn}),n.d(s,"random",function(){return bn}),n.d(s,"transformMat2",function(){return wn}),n.d(s,"transformMat2d",function(){return Cn}),n.d(s,"transformMat3",function(){return Mn}),n.d(s,"transformMat4",function(){return En}),n.d(s,"rotate",function(){return An}),n.d(s,"angle",function(){return Rn}),n.d(s,"zero",function(){return xn}),n.d(s,"str",function(){return Fn}),n.d(s,"exactEquals",function(){return Tn}),n.d(s,"equals",function(){return Pn}),n.d(s,"len",function(){return _n}),n.d(s,"sub",function(){return kn}),n.d(s,"mul",function(){return Bn}),n.d(s,"div",function(){return Sn}),n.d(s,"dist",function(){return Ln}),n.d(s,"sqrDist",function(){return Un}),n.d(s,"sqrLen",function(){return On}),n.d(s,"forEach",function(){return Dn});var a=1e-6,u="undefined"!=typeof Float32Array?Float32Array:Array,c=Math.random;Math.PI;function h(){var t=new u(16);return u!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function f(t){var e=new u(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function l(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function p(t,e,n,r,o,i,s,a,c,h,f,l,p,d,g,y){var m=new u(16);return m[0]=t,m[1]=e,m[2]=n,m[3]=r,m[4]=o,m[5]=i,m[6]=s,m[7]=a,m[8]=c,m[9]=h,m[10]=f,m[11]=l,m[12]=p,m[13]=d,m[14]=g,m[15]=y,m}function d(t,e,n,r,o,i,s,a,u,c,h,f,l,p,d,g,y){return t[0]=e,t[1]=n,t[2]=r,t[3]=o,t[4]=i,t[5]=s,t[6]=a,t[7]=u,t[8]=c,t[9]=h,t[10]=f,t[11]=l,t[12]=p,t[13]=d,t[14]=g,t[15]=y,t}function g(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function y(t,e){if(t===e){var n=e[1],r=e[2],o=e[3],i=e[6],s=e[7],a=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=i,t[11]=e[14],t[12]=o,t[13]=s,t[14]=a}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function m(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],s=e[4],a=e[5],u=e[6],c=e[7],h=e[8],f=e[9],l=e[10],p=e[11],d=e[12],g=e[13],y=e[14],m=e[15],v=n*a-r*s,b=n*u-o*s,w=n*c-i*s,C=r*u-o*a,M=r*c-i*a,E=o*c-i*u,A=h*g-f*d,R=h*y-l*d,x=h*m-p*d,F=f*y-l*g,T=f*m-p*g,P=l*m-p*y,_=v*P-b*T+w*F+C*x-M*R+E*A;return _?(_=1/_,t[0]=(a*P-u*T+c*F)*_,t[1]=(o*T-r*P-i*F)*_,t[2]=(g*E-y*M+m*C)*_,t[3]=(l*M-f*E-p*C)*_,t[4]=(u*x-s*P-c*R)*_,t[5]=(n*P-o*x+i*R)*_,t[6]=(y*w-d*E-m*b)*_,t[7]=(h*E-l*w+p*b)*_,t[8]=(s*T-a*x+c*A)*_,t[9]=(r*x-n*T-i*A)*_,t[10]=(d*M-g*w+m*v)*_,t[11]=(f*w-h*M-p*v)*_,t[12]=(a*R-s*F-u*A)*_,t[13]=(n*F-r*R+o*A)*_,t[14]=(g*b-d*C-y*v)*_,t[15]=(h*C-f*b+l*v)*_,t):null}function v(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],s=e[4],a=e[5],u=e[6],c=e[7],h=e[8],f=e[9],l=e[10],p=e[11],d=e[12],g=e[13],y=e[14],m=e[15];return t[0]=a*(l*m-p*y)-f*(u*m-c*y)+g*(u*p-c*l),t[1]=-(r*(l*m-p*y)-f*(o*m-i*y)+g*(o*p-i*l)),t[2]=r*(u*m-c*y)-a*(o*m-i*y)+g*(o*c-i*u),t[3]=-(r*(u*p-c*l)-a*(o*p-i*l)+f*(o*c-i*u)),t[4]=-(s*(l*m-p*y)-h*(u*m-c*y)+d*(u*p-c*l)),t[5]=n*(l*m-p*y)-h*(o*m-i*y)+d*(o*p-i*l),t[6]=-(n*(u*m-c*y)-s*(o*m-i*y)+d*(o*c-i*u)),t[7]=n*(u*p-c*l)-s*(o*p-i*l)+h*(o*c-i*u),t[8]=s*(f*m-p*g)-h*(a*m-c*g)+d*(a*p-c*f),t[9]=-(n*(f*m-p*g)-h*(r*m-i*g)+d*(r*p-i*f)),t[10]=n*(a*m-c*g)-s*(r*m-i*g)+d*(r*c-i*a),t[11]=-(n*(a*p-c*f)-s*(r*p-i*f)+h*(r*c-i*a)),t[12]=-(s*(f*y-l*g)-h*(a*y-u*g)+d*(a*l-u*f)),t[13]=n*(f*y-l*g)-h*(r*y-o*g)+d*(r*l-o*f),t[14]=-(n*(a*y-u*g)-s*(r*y-o*g)+d*(r*u-o*a)),t[15]=n*(a*l-u*f)-s*(r*l-o*f)+h*(r*u-o*a),t}function b(t){var e=t[0],n=t[1],r=t[2],o=t[3],i=t[4],s=t[5],a=t[6],u=t[7],c=t[8],h=t[9],f=t[10],l=t[11],p=t[12],d=t[13],g=t[14],y=t[15];return(e*s-n*i)*(f*y-l*g)-(e*a-r*i)*(h*y-l*d)+(e*u-o*i)*(h*g-f*d)+(n*a-r*s)*(c*y-l*p)-(n*u-o*s)*(c*g-f*p)+(r*u-o*a)*(c*d-h*p)}function w(t,e,n){var r=e[0],o=e[1],i=e[2],s=e[3],a=e[4],u=e[5],c=e[6],h=e[7],f=e[8],l=e[9],p=e[10],d=e[11],g=e[12],y=e[13],m=e[14],v=e[15],b=n[0],w=n[1],C=n[2],M=n[3];return t[0]=b*r+w*a+C*f+M*g,t[1]=b*o+w*u+C*l+M*y,t[2]=b*i+w*c+C*p+M*m,t[3]=b*s+w*h+C*d+M*v,b=n[4],w=n[5],C=n[6],M=n[7],t[4]=b*r+w*a+C*f+M*g,t[5]=b*o+w*u+C*l+M*y,t[6]=b*i+w*c+C*p+M*m,t[7]=b*s+w*h+C*d+M*v,b=n[8],w=n[9],C=n[10],M=n[11],t[8]=b*r+w*a+C*f+M*g,t[9]=b*o+w*u+C*l+M*y,t[10]=b*i+w*c+C*p+M*m,t[11]=b*s+w*h+C*d+M*v,b=n[12],w=n[13],C=n[14],M=n[15],t[12]=b*r+w*a+C*f+M*g,t[13]=b*o+w*u+C*l+M*y,t[14]=b*i+w*c+C*p+M*m,t[15]=b*s+w*h+C*d+M*v,t}function C(t,e,n){var r,o,i,s,a,u,c,h,f,l,p,d,g=n[0],y=n[1],m=n[2];return e===t?(t[12]=e[0]*g+e[4]*y+e[8]*m+e[12],t[13]=e[1]*g+e[5]*y+e[9]*m+e[13],t[14]=e[2]*g+e[6]*y+e[10]*m+e[14],t[15]=e[3]*g+e[7]*y+e[11]*m+e[15]):(r=e[0],o=e[1],i=e[2],s=e[3],a=e[4],u=e[5],c=e[6],h=e[7],f=e[8],l=e[9],p=e[10],d=e[11],t[0]=r,t[1]=o,t[2]=i,t[3]=s,t[4]=a,t[5]=u,t[6]=c,t[7]=h,t[8]=f,t[9]=l,t[10]=p,t[11]=d,t[12]=r*g+a*y+f*m+e[12],t[13]=o*g+u*y+l*m+e[13],t[14]=i*g+c*y+p*m+e[14],t[15]=s*g+h*y+d*m+e[15]),t}function M(t,e,n){var r=n[0],o=n[1],i=n[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*o,t[5]=e[5]*o,t[6]=e[6]*o,t[7]=e[7]*o,t[8]=e[8]*i,t[9]=e[9]*i,t[10]=e[10]*i,t[11]=e[11]*i,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function E(t,e,n,r){var o,i,s,u,c,h,f,l,p,d,g,y,m,v,b,w,C,M,E,A,R,x,F,T,P=r[0],_=r[1],k=r[2],B=Math.hypot(P,_,k);return B<a?null:(P*=B=1/B,_*=B,k*=B,o=Math.sin(n),s=1-(i=Math.cos(n)),u=e[0],c=e[1],h=e[2],f=e[3],l=e[4],p=e[5],d=e[6],g=e[7],y=e[8],m=e[9],v=e[10],b=e[11],w=P*P*s+i,C=_*P*s+k*o,M=k*P*s-_*o,E=P*_*s-k*o,A=_*_*s+i,R=k*_*s+P*o,x=P*k*s+_*o,F=_*k*s-P*o,T=k*k*s+i,t[0]=u*w+l*C+y*M,t[1]=c*w+p*C+m*M,t[2]=h*w+d*C+v*M,t[3]=f*w+g*C+b*M,t[4]=u*E+l*A+y*R,t[5]=c*E+p*A+m*R,t[6]=h*E+d*A+v*R,t[7]=f*E+g*A+b*R,t[8]=u*x+l*F+y*T,t[9]=c*x+p*F+m*T,t[10]=h*x+d*F+v*T,t[11]=f*x+g*F+b*T,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function A(t,e,n){var r=Math.sin(n),o=Math.cos(n),i=e[4],s=e[5],a=e[6],u=e[7],c=e[8],h=e[9],f=e[10],l=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=i*o+c*r,t[5]=s*o+h*r,t[6]=a*o+f*r,t[7]=u*o+l*r,t[8]=c*o-i*r,t[9]=h*o-s*r,t[10]=f*o-a*r,t[11]=l*o-u*r,t}function R(t,e,n){var r=Math.sin(n),o=Math.cos(n),i=e[0],s=e[1],a=e[2],u=e[3],c=e[8],h=e[9],f=e[10],l=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=i*o-c*r,t[1]=s*o-h*r,t[2]=a*o-f*r,t[3]=u*o-l*r,t[8]=i*r+c*o,t[9]=s*r+h*o,t[10]=a*r+f*o,t[11]=u*r+l*o,t}function x(t,e,n){var r=Math.sin(n),o=Math.cos(n),i=e[0],s=e[1],a=e[2],u=e[3],c=e[4],h=e[5],f=e[6],l=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=i*o+c*r,t[1]=s*o+h*r,t[2]=a*o+f*r,t[3]=u*o+l*r,t[4]=c*o-i*r,t[5]=h*o-s*r,t[6]=f*o-a*r,t[7]=l*o-u*r,t}function F(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function T(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function P(t,e,n){var r,o,i,s=n[0],u=n[1],c=n[2],h=Math.hypot(s,u,c);return h<a?null:(s*=h=1/h,u*=h,c*=h,r=Math.sin(e),i=1-(o=Math.cos(e)),t[0]=s*s*i+o,t[1]=u*s*i+c*r,t[2]=c*s*i-u*r,t[3]=0,t[4]=s*u*i-c*r,t[5]=u*u*i+o,t[6]=c*u*i+s*r,t[7]=0,t[8]=s*c*i+u*r,t[9]=u*c*i-s*r,t[10]=c*c*i+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function _(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function k(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function B(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function S(t,e,n){var r=e[0],o=e[1],i=e[2],s=e[3],a=r+r,u=o+o,c=i+i,h=r*a,f=r*u,l=r*c,p=o*u,d=o*c,g=i*c,y=s*a,m=s*u,v=s*c;return t[0]=1-(p+g),t[1]=f+v,t[2]=l-m,t[3]=0,t[4]=f-v,t[5]=1-(h+g),t[6]=d+y,t[7]=0,t[8]=l+m,t[9]=d-y,t[10]=1-(h+p),t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function L(t,e){var n=new u(3),r=-e[0],o=-e[1],i=-e[2],s=e[3],a=e[4],c=e[5],h=e[6],f=e[7],l=r*r+o*o+i*i+s*s;return l>0?(n[0]=2*(a*s+f*r+c*i-h*o)/l,n[1]=2*(c*s+f*o+h*r-a*i)/l,n[2]=2*(h*s+f*i+a*o-c*r)/l):(n[0]=2*(a*s+f*r+c*i-h*o),n[1]=2*(c*s+f*o+h*r-a*i),n[2]=2*(h*s+f*i+a*o-c*r)),S(t,e,n),t}function U(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function O(t,e){var n=e[0],r=e[1],o=e[2],i=e[4],s=e[5],a=e[6],u=e[8],c=e[9],h=e[10];return t[0]=Math.hypot(n,r,o),t[1]=Math.hypot(i,s,a),t[2]=Math.hypot(u,c,h),t}function D(t,e){var n=new u(3);O(n,e);var r=1/n[0],o=1/n[1],i=1/n[2],s=e[0]*r,a=e[1]*o,c=e[2]*i,h=e[4]*r,f=e[5]*o,l=e[6]*i,p=e[8]*r,d=e[9]*o,g=e[10]*i,y=s+f+g,m=0;return y>0?(m=2*Math.sqrt(y+1),t[3]=.25*m,t[0]=(l-d)/m,t[1]=(p-c)/m,t[2]=(a-h)/m):s>f&&s>g?(m=2*Math.sqrt(1+s-f-g),t[3]=(l-d)/m,t[0]=.25*m,t[1]=(a+h)/m,t[2]=(p+c)/m):f>g?(m=2*Math.sqrt(1+f-s-g),t[3]=(p-c)/m,t[0]=(a+h)/m,t[1]=.25*m,t[2]=(l+d)/m):(m=2*Math.sqrt(1+g-s-f),t[3]=(a-h)/m,t[0]=(p+c)/m,t[1]=(l+d)/m,t[2]=.25*m),t}function N(t,e,n,r){var o=e[0],i=e[1],s=e[2],a=e[3],u=o+o,c=i+i,h=s+s,f=o*u,l=o*c,p=o*h,d=i*c,g=i*h,y=s*h,m=a*u,v=a*c,b=a*h,w=r[0],C=r[1],M=r[2];return t[0]=(1-(d+y))*w,t[1]=(l+b)*w,t[2]=(p-v)*w,t[3]=0,t[4]=(l-b)*C,t[5]=(1-(f+y))*C,t[6]=(g+m)*C,t[7]=0,t[8]=(p+v)*M,t[9]=(g-m)*M,t[10]=(1-(f+d))*M,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function I(t,e,n,r,o){var i=e[0],s=e[1],a=e[2],u=e[3],c=i+i,h=s+s,f=a+a,l=i*c,p=i*h,d=i*f,g=s*h,y=s*f,m=a*f,v=u*c,b=u*h,w=u*f,C=r[0],M=r[1],E=r[2],A=o[0],R=o[1],x=o[2],F=(1-(g+m))*C,T=(p+w)*C,P=(d-b)*C,_=(p-w)*M,k=(1-(l+m))*M,B=(y+v)*M,S=(d+b)*E,L=(y-v)*E,U=(1-(l+g))*E;return t[0]=F,t[1]=T,t[2]=P,t[3]=0,t[4]=_,t[5]=k,t[6]=B,t[7]=0,t[8]=S,t[9]=L,t[10]=U,t[11]=0,t[12]=n[0]+A-(F*A+_*R+S*x),t[13]=n[1]+R-(T*A+k*R+L*x),t[14]=n[2]+x-(P*A+B*R+U*x),t[15]=1,t}function W(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],s=n+n,a=r+r,u=o+o,c=n*s,h=r*s,f=r*a,l=o*s,p=o*a,d=o*u,g=i*s,y=i*a,m=i*u;return t[0]=1-f-d,t[1]=h+m,t[2]=l-y,t[3]=0,t[4]=h-m,t[5]=1-c-d,t[6]=p+g,t[7]=0,t[8]=l+y,t[9]=p-g,t[10]=1-c-f,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function j(t,e,n,r,o,i,s){var a=1/(n-e),u=1/(o-r),c=1/(i-s);return t[0]=2*i*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*i*u,t[6]=0,t[7]=0,t[8]=(n+e)*a,t[9]=(o+r)*u,t[10]=(s+i)*c,t[11]=-1,t[12]=0,t[13]=0,t[14]=s*i*2*c,t[15]=0,t}function q(t,e,n,r,o){var i,s=1/Math.tan(e/2);return t[0]=s/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0?(i=1/(r-o),t[10]=(o+r)*i,t[14]=2*o*r*i):(t[10]=-1,t[14]=-2*r),t}function Y(t,e,n,r){var o=Math.tan(e.upDegrees*Math.PI/180),i=Math.tan(e.downDegrees*Math.PI/180),s=Math.tan(e.leftDegrees*Math.PI/180),a=Math.tan(e.rightDegrees*Math.PI/180),u=2/(s+a),c=2/(o+i);return t[0]=u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=c,t[6]=0,t[7]=0,t[8]=-(s-a)*u*.5,t[9]=(o-i)*c*.5,t[10]=r/(n-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*n/(n-r),t[15]=0,t}function G(t,e,n,r,o,i,s){var a=1/(e-n),u=1/(r-o),c=1/(i-s);return t[0]=-2*a,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*u,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*c,t[11]=0,t[12]=(e+n)*a,t[13]=(o+r)*u,t[14]=(s+i)*c,t[15]=1,t}function z(t,e,n,r){var o,i,s,u,c,h,f,l,p,d,y=e[0],m=e[1],v=e[2],b=r[0],w=r[1],C=r[2],M=n[0],E=n[1],A=n[2];return Math.abs(y-M)<a&&Math.abs(m-E)<a&&Math.abs(v-A)<a?g(t):(f=y-M,l=m-E,p=v-A,o=w*(p*=d=1/Math.hypot(f,l,p))-C*(l*=d),i=C*(f*=d)-b*p,s=b*l-w*f,(d=Math.hypot(o,i,s))?(o*=d=1/d,i*=d,s*=d):(o=0,i=0,s=0),u=l*s-p*i,c=p*o-f*s,h=f*i-l*o,(d=Math.hypot(u,c,h))?(u*=d=1/d,c*=d,h*=d):(u=0,c=0,h=0),t[0]=o,t[1]=u,t[2]=f,t[3]=0,t[4]=i,t[5]=c,t[6]=l,t[7]=0,t[8]=s,t[9]=h,t[10]=p,t[11]=0,t[12]=-(o*y+i*m+s*v),t[13]=-(u*y+c*m+h*v),t[14]=-(f*y+l*m+p*v),t[15]=1,t)}function V(t,e,n,r){var o=e[0],i=e[1],s=e[2],a=r[0],u=r[1],c=r[2],h=o-n[0],f=i-n[1],l=s-n[2],p=h*h+f*f+l*l;p>0&&(h*=p=1/Math.sqrt(p),f*=p,l*=p);var d=u*l-c*f,g=c*h-a*l,y=a*f-u*h;return(p=d*d+g*g+y*y)>0&&(d*=p=1/Math.sqrt(p),g*=p,y*=p),t[0]=d,t[1]=g,t[2]=y,t[3]=0,t[4]=f*y-l*g,t[5]=l*d-h*y,t[6]=h*g-f*d,t[7]=0,t[8]=h,t[9]=f,t[10]=l,t[11]=0,t[12]=o,t[13]=i,t[14]=s,t[15]=1,t}function H(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function X(t){return Math.hypot(t[0],t[1],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function K(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t[9]=e[9]+n[9],t[10]=e[10]+n[10],t[11]=e[11]+n[11],t[12]=e[12]+n[12],t[13]=e[13]+n[13],t[14]=e[14]+n[14],t[15]=e[15]+n[15],t}function J(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t[9]=e[9]-n[9],t[10]=e[10]-n[10],t[11]=e[11]-n[11],t[12]=e[12]-n[12],t[13]=e[13]-n[13],t[14]=e[14]-n[14],t[15]=e[15]-n[15],t}function $(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12]*n,t[13]=e[13]*n,t[14]=e[14]*n,t[15]=e[15]*n,t}function Z(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t[4]=e[4]+n[4]*r,t[5]=e[5]+n[5]*r,t[6]=e[6]+n[6]*r,t[7]=e[7]+n[7]*r,t[8]=e[8]+n[8]*r,t[9]=e[9]+n[9]*r,t[10]=e[10]+n[10]*r,t[11]=e[11]+n[11]*r,t[12]=e[12]+n[12]*r,t[13]=e[13]+n[13]*r,t[14]=e[14]+n[14]*r,t[15]=e[15]+n[15]*r,t}function Q(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function tt(t,e){var n=t[0],r=t[1],o=t[2],i=t[3],s=t[4],u=t[5],c=t[6],h=t[7],f=t[8],l=t[9],p=t[10],d=t[11],g=t[12],y=t[13],m=t[14],v=t[15],b=e[0],w=e[1],C=e[2],M=e[3],E=e[4],A=e[5],R=e[6],x=e[7],F=e[8],T=e[9],P=e[10],_=e[11],k=e[12],B=e[13],S=e[14],L=e[15];return Math.abs(n-b)<=a*Math.max(1,Math.abs(n),Math.abs(b))&&Math.abs(r-w)<=a*Math.max(1,Math.abs(r),Math.abs(w))&&Math.abs(o-C)<=a*Math.max(1,Math.abs(o),Math.abs(C))&&Math.abs(i-M)<=a*Math.max(1,Math.abs(i),Math.abs(M))&&Math.abs(s-E)<=a*Math.max(1,Math.abs(s),Math.abs(E))&&Math.abs(u-A)<=a*Math.max(1,Math.abs(u),Math.abs(A))&&Math.abs(c-R)<=a*Math.max(1,Math.abs(c),Math.abs(R))&&Math.abs(h-x)<=a*Math.max(1,Math.abs(h),Math.abs(x))&&Math.abs(f-F)<=a*Math.max(1,Math.abs(f),Math.abs(F))&&Math.abs(l-T)<=a*Math.max(1,Math.abs(l),Math.abs(T))&&Math.abs(p-P)<=a*Math.max(1,Math.abs(p),Math.abs(P))&&Math.abs(d-_)<=a*Math.max(1,Math.abs(d),Math.abs(_))&&Math.abs(g-k)<=a*Math.max(1,Math.abs(g),Math.abs(k))&&Math.abs(y-B)<=a*Math.max(1,Math.abs(y),Math.abs(B))&&Math.abs(m-S)<=a*Math.max(1,Math.abs(m),Math.abs(S))&&Math.abs(v-L)<=a*Math.max(1,Math.abs(v),Math.abs(L))}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var et=w,nt=J;function rt(){var t=new u(3);return u!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t}function ot(t){var e=new u(3);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e}function it(t){var e=t[0],n=t[1],r=t[2];return Math.hypot(e,n,r)}function st(t,e,n){var r=new u(3);return r[0]=t,r[1]=e,r[2]=n,r}function at(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t}function ut(t,e,n,r){return t[0]=e,t[1]=n,t[2]=r,t}function ct(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t}function ht(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t}function ft(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t[2]=e[2]*n[2],t}function lt(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t[2]=e[2]/n[2],t}function pt(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t[2]=Math.ceil(e[2]),t}function dt(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t[2]=Math.floor(e[2]),t}function gt(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t[2]=Math.min(e[2],n[2]),t}function yt(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t[2]=Math.max(e[2],n[2]),t}function mt(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t[2]=Math.round(e[2]),t}function vt(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t}function bt(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t}function wt(t,e){var n=e[0]-t[0],r=e[1]-t[1],o=e[2]-t[2];return Math.hypot(n,r,o)}function Ct(t,e){var n=e[0]-t[0],r=e[1]-t[1],o=e[2]-t[2];return n*n+r*r+o*o}function Mt(t){var e=t[0],n=t[1],r=t[2];return e*e+n*n+r*r}function Et(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t}function At(t,e){return t[0]=1/e[0],t[1]=1/e[1],t[2]=1/e[2],t}function Rt(t,e){var n=e[0],r=e[1],o=e[2],i=n*n+r*r+o*o;return i>0&&(i=1/Math.sqrt(i)),t[0]=e[0]*i,t[1]=e[1]*i,t[2]=e[2]*i,t}function xt(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Ft(t,e,n){var r=e[0],o=e[1],i=e[2],s=n[0],a=n[1],u=n[2];return t[0]=o*u-i*a,t[1]=i*s-r*u,t[2]=r*a-o*s,t}function Tt(t,e,n,r){var o=e[0],i=e[1],s=e[2];return t[0]=o+r*(n[0]-o),t[1]=i+r*(n[1]-i),t[2]=s+r*(n[2]-s),t}function Pt(t,e,n,r,o,i){var s=i*i,a=s*(2*i-3)+1,u=s*(i-2)+i,c=s*(i-1),h=s*(3-2*i);return t[0]=e[0]*a+n[0]*u+r[0]*c+o[0]*h,t[1]=e[1]*a+n[1]*u+r[1]*c+o[1]*h,t[2]=e[2]*a+n[2]*u+r[2]*c+o[2]*h,t}function _t(t,e,n,r,o,i){var s=1-i,a=s*s,u=i*i,c=a*s,h=3*i*a,f=3*u*s,l=u*i;return t[0]=e[0]*c+n[0]*h+r[0]*f+o[0]*l,t[1]=e[1]*c+n[1]*h+r[1]*f+o[1]*l,t[2]=e[2]*c+n[2]*h+r[2]*f+o[2]*l,t}function kt(t,e){e=e||1;var n=2*c()*Math.PI,r=2*c()-1,o=Math.sqrt(1-r*r)*e;return t[0]=Math.cos(n)*o,t[1]=Math.sin(n)*o,t[2]=r*e,t}function Bt(t,e,n){var r=e[0],o=e[1],i=e[2],s=n[3]*r+n[7]*o+n[11]*i+n[15];return s=s||1,t[0]=(n[0]*r+n[4]*o+n[8]*i+n[12])/s,t[1]=(n[1]*r+n[5]*o+n[9]*i+n[13])/s,t[2]=(n[2]*r+n[6]*o+n[10]*i+n[14])/s,t}function St(t,e,n){var r=e[0],o=e[1],i=e[2];return t[0]=r*n[0]+o*n[3]+i*n[6],t[1]=r*n[1]+o*n[4]+i*n[7],t[2]=r*n[2]+o*n[5]+i*n[8],t}function Lt(t,e,n){var r=n[0],o=n[1],i=n[2],s=n[3],a=e[0],u=e[1],c=e[2],h=o*c-i*u,f=i*a-r*c,l=r*u-o*a,p=o*l-i*f,d=i*h-r*l,g=r*f-o*h,y=2*s;return h*=y,f*=y,l*=y,p*=2,d*=2,g*=2,t[0]=a+h+p,t[1]=u+f+d,t[2]=c+l+g,t}function Ut(t,e,n,r){var o=[],i=[];return o[0]=e[0]-n[0],o[1]=e[1]-n[1],o[2]=e[2]-n[2],i[0]=o[0],i[1]=o[1]*Math.cos(r)-o[2]*Math.sin(r),i[2]=o[1]*Math.sin(r)+o[2]*Math.cos(r),t[0]=i[0]+n[0],t[1]=i[1]+n[1],t[2]=i[2]+n[2],t}function Ot(t,e,n,r){var o=[],i=[];return o[0]=e[0]-n[0],o[1]=e[1]-n[1],o[2]=e[2]-n[2],i[0]=o[2]*Math.sin(r)+o[0]*Math.cos(r),i[1]=o[1],i[2]=o[2]*Math.cos(r)-o[0]*Math.sin(r),t[0]=i[0]+n[0],t[1]=i[1]+n[1],t[2]=i[2]+n[2],t}function Dt(t,e,n,r){var o=[],i=[];return o[0]=e[0]-n[0],o[1]=e[1]-n[1],o[2]=e[2]-n[2],i[0]=o[0]*Math.cos(r)-o[1]*Math.sin(r),i[1]=o[0]*Math.sin(r)+o[1]*Math.cos(r),i[2]=o[2],t[0]=i[0]+n[0],t[1]=i[1]+n[1],t[2]=i[2]+n[2],t}function Nt(t,e){var n=st(t[0],t[1],t[2]),r=st(e[0],e[1],e[2]);Rt(n,n),Rt(r,r);var o=xt(n,r);return o>1?0:o<-1?Math.PI:Math.acos(o)}function It(t){return t[0]=0,t[1]=0,t[2]=0,t}function Wt(t){return"vec3("+t[0]+", "+t[1]+", "+t[2]+")"}function jt(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]}function qt(t,e){var n=t[0],r=t[1],o=t[2],i=e[0],s=e[1],u=e[2];return Math.abs(n-i)<=a*Math.max(1,Math.abs(n),Math.abs(i))&&Math.abs(r-s)<=a*Math.max(1,Math.abs(r),Math.abs(s))&&Math.abs(o-u)<=a*Math.max(1,Math.abs(o),Math.abs(u))}var Yt,Gt=ht,zt=ft,Vt=lt,Ht=wt,Xt=Ct,Kt=it,Jt=Mt,$t=(Yt=rt(),function(t,e,n,r,o,i){var s,a;for(e||(e=3),n||(n=0),a=r?Math.min(r*e+n,t.length):t.length,s=n;s<a;s+=e)Yt[0]=t[s],Yt[1]=t[s+1],Yt[2]=t[s+2],o(Yt,Yt,i),t[s]=Yt[0],t[s+1]=Yt[1],t[s+2]=Yt[2];return t});function Zt(t){var e=t[0],n=t[1],r=t[2],o=t[3];return Math.hypot(e,n,r,o)}function Qt(t){var e=t[0],n=t[1],r=t[2],o=t[3];return e*e+n*n+r*r+o*o}!function(){var t,e=(t=new u(4),u!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0,t[3]=0),t)}();function te(){var t=new u(4);return u!=Float32Array&&(t[0]=0,t[1]=0,t[2]=0),t[3]=1,t}function ee(t){return t[0]=0,t[1]=0,t[2]=0,t[3]=1,t}function ne(t,e,n){n*=.5;var r=Math.sin(n);return t[0]=r*e[0],t[1]=r*e[1],t[2]=r*e[2],t[3]=Math.cos(n),t}function re(t,e){var n=2*Math.acos(e[3]),r=Math.sin(n/2);return r>a?(t[0]=e[0]/r,t[1]=e[1]/r,t[2]=e[2]/r):(t[0]=1,t[1]=0,t[2]=0),n}function oe(t,e){var n=Le(t,e);return Math.acos(2*n*n-1)}function ie(t,e,n){var r=e[0],o=e[1],i=e[2],s=e[3],a=n[0],u=n[1],c=n[2],h=n[3];return t[0]=r*h+s*a+o*c-i*u,t[1]=o*h+s*u+i*a-r*c,t[2]=i*h+s*c+r*u-o*a,t[3]=s*h-r*a-o*u-i*c,t}function se(t,e,n){n*=.5;var r=e[0],o=e[1],i=e[2],s=e[3],a=Math.sin(n),u=Math.cos(n);return t[0]=r*u+s*a,t[1]=o*u+i*a,t[2]=i*u-o*a,t[3]=s*u-r*a,t}function ae(t,e,n){n*=.5;var r=e[0],o=e[1],i=e[2],s=e[3],a=Math.sin(n),u=Math.cos(n);return t[0]=r*u-i*a,t[1]=o*u+s*a,t[2]=i*u+r*a,t[3]=s*u-o*a,t}function ue(t,e,n){n*=.5;var r=e[0],o=e[1],i=e[2],s=e[3],a=Math.sin(n),u=Math.cos(n);return t[0]=r*u+o*a,t[1]=o*u-r*a,t[2]=i*u+s*a,t[3]=s*u-i*a,t}function ce(t,e){var n=e[0],r=e[1],o=e[2];return t[0]=n,t[1]=r,t[2]=o,t[3]=Math.sqrt(Math.abs(1-n*n-r*r-o*o)),t}function he(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],s=Math.sqrt(n*n+r*r+o*o),a=Math.exp(i),u=s>0?a*Math.sin(s)/s:0;return t[0]=n*u,t[1]=r*u,t[2]=o*u,t[3]=a*Math.cos(s),t}function fe(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],s=Math.sqrt(n*n+r*r+o*o),a=s>0?Math.atan2(s,i)/s:0;return t[0]=n*a,t[1]=r*a,t[2]=o*a,t[3]=.5*Math.log(n*n+r*r+o*o+i*i),t}function le(t,e,n){return fe(t,e),Se(t,t,n),he(t,t),t}function pe(t,e,n,r){var o,i,s,u,c,h=e[0],f=e[1],l=e[2],p=e[3],d=n[0],g=n[1],y=n[2],m=n[3];return(i=h*d+f*g+l*y+p*m)<0&&(i=-i,d=-d,g=-g,y=-y,m=-m),1-i>a?(o=Math.acos(i),s=Math.sin(o),u=Math.sin((1-r)*o)/s,c=Math.sin(r*o)/s):(u=1-r,c=r),t[0]=u*h+c*d,t[1]=u*f+c*g,t[2]=u*l+c*y,t[3]=u*p+c*m,t}function de(t){var e=c(),n=c(),r=c(),o=Math.sqrt(1-e),i=Math.sqrt(e);return t[0]=o*Math.sin(2*Math.PI*n),t[1]=o*Math.cos(2*Math.PI*n),t[2]=i*Math.sin(2*Math.PI*r),t[3]=i*Math.cos(2*Math.PI*r),t}function ge(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],s=n*n+r*r+o*o+i*i,a=s?1/s:0;return t[0]=-n*a,t[1]=-r*a,t[2]=-o*a,t[3]=i*a,t}function ye(t,e){return t[0]=-e[0],t[1]=-e[1],t[2]=-e[2],t[3]=e[3],t}function me(t,e){var n,r=e[0]+e[4]+e[8];if(r>0)n=Math.sqrt(r+1),t[3]=.5*n,n=.5/n,t[0]=(e[5]-e[7])*n,t[1]=(e[6]-e[2])*n,t[2]=(e[1]-e[3])*n;else{var o=0;e[4]>e[0]&&(o=1),e[8]>e[3*o+o]&&(o=2);var i=(o+1)%3,s=(o+2)%3;n=Math.sqrt(e[3*o+o]-e[3*i+i]-e[3*s+s]+1),t[o]=.5*n,n=.5/n,t[3]=(e[3*i+s]-e[3*s+i])*n,t[i]=(e[3*i+o]+e[3*o+i])*n,t[s]=(e[3*s+o]+e[3*o+s])*n}return t}function ve(t,e,n,r){var o=.5*Math.PI/180;e*=o,n*=o,r*=o;var i=Math.sin(e),s=Math.cos(e),a=Math.sin(n),u=Math.cos(n),c=Math.sin(r),h=Math.cos(r);return t[0]=i*u*h-s*a*c,t[1]=s*a*h+i*u*c,t[2]=s*u*c-i*a*h,t[3]=s*u*h+i*a*c,t}function be(t){return"quat("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+")"}var we,Ce,Me,Ee,Ae,Re,xe,Fe=function(t){var e=new u(4);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},Te=function(t,e,n,r){var o=new u(4);return o[0]=t,o[1]=e,o[2]=n,o[3]=r,o},Pe=function(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},_e=function(t,e,n,r,o){return t[0]=e,t[1]=n,t[2]=r,t[3]=o,t},ke=function(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t},Be=ie,Se=function(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t},Le=function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]+t[3]*e[3]},Ue=function(t,e,n,r){var o=e[0],i=e[1],s=e[2],a=e[3];return t[0]=o+r*(n[0]-o),t[1]=i+r*(n[1]-i),t[2]=s+r*(n[2]-s),t[3]=a+r*(n[3]-a),t},Oe=Zt,De=Oe,Ne=Qt,Ie=Ne,We=function(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],s=n*n+r*r+o*o+i*i;return s>0&&(s=1/Math.sqrt(s)),t[0]=n*s,t[1]=r*s,t[2]=o*s,t[3]=i*s,t},je=function(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]},qe=function(t,e){var n=t[0],r=t[1],o=t[2],i=t[3],s=e[0],u=e[1],c=e[2],h=e[3];return Math.abs(n-s)<=a*Math.max(1,Math.abs(n),Math.abs(s))&&Math.abs(r-u)<=a*Math.max(1,Math.abs(r),Math.abs(u))&&Math.abs(o-c)<=a*Math.max(1,Math.abs(o),Math.abs(c))&&Math.abs(i-h)<=a*Math.max(1,Math.abs(i),Math.abs(h))},Ye=(we=rt(),Ce=st(1,0,0),Me=st(0,1,0),function(t,e,n){var r=xt(e,n);return r<-.999999?(Ft(we,Ce,e),Kt(we)<1e-6&&Ft(we,Me,e),Rt(we,we),ne(t,we,Math.PI),t):r>.999999?(t[0]=0,t[1]=0,t[2]=0,t[3]=1,t):(Ft(we,e,n),t[0]=we[0],t[1]=we[1],t[2]=we[2],t[3]=1+r,We(t,t))}),Ge=(Ee=te(),Ae=te(),function(t,e,n,r,o,i){return pe(Ee,e,o,i),pe(Ae,n,r,i),pe(t,Ee,Ae,2*i*(1-i)),t}),ze=(Re=new u(9),u!=Float32Array&&(Re[1]=0,Re[2]=0,Re[3]=0,Re[5]=0,Re[6]=0,Re[7]=0),Re[0]=1,Re[4]=1,Re[8]=1,xe=Re,function(t,e,n,r){return xe[0]=n[0],xe[3]=n[1],xe[6]=n[2],xe[1]=r[0],xe[4]=r[1],xe[7]=r[2],xe[2]=-e[0],xe[5]=-e[1],xe[8]=-e[2],We(t,me(t,xe))});function Ve(){var t=new u(2);return u!=Float32Array&&(t[0]=0,t[1]=0),t}function He(t){var e=new u(2);return e[0]=t[0],e[1]=t[1],e}function Xe(t,e){var n=new u(2);return n[0]=t,n[1]=e,n}function Ke(t,e){return t[0]=e[0],t[1]=e[1],t}function Je(t,e,n){return t[0]=e,t[1]=n,t}function $e(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t}function Ze(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t}function Qe(t,e,n){return t[0]=e[0]*n[0],t[1]=e[1]*n[1],t}function tn(t,e,n){return t[0]=e[0]/n[0],t[1]=e[1]/n[1],t}function en(t,e){return t[0]=Math.ceil(e[0]),t[1]=Math.ceil(e[1]),t}function nn(t,e){return t[0]=Math.floor(e[0]),t[1]=Math.floor(e[1]),t}function rn(t,e,n){return t[0]=Math.min(e[0],n[0]),t[1]=Math.min(e[1],n[1]),t}function on(t,e,n){return t[0]=Math.max(e[0],n[0]),t[1]=Math.max(e[1],n[1]),t}function sn(t,e){return t[0]=Math.round(e[0]),t[1]=Math.round(e[1]),t}function an(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t}function un(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t}function cn(t,e){var n=e[0]-t[0],r=e[1]-t[1];return Math.hypot(n,r)}function hn(t,e){var n=e[0]-t[0],r=e[1]-t[1];return n*n+r*r}function fn(t){var e=t[0],n=t[1];return Math.hypot(e,n)}function ln(t){var e=t[0],n=t[1];return e*e+n*n}function pn(t,e){return t[0]=-e[0],t[1]=-e[1],t}function dn(t,e){return t[0]=1/e[0],t[1]=1/e[1],t}function gn(t,e){var n=e[0],r=e[1],o=n*n+r*r;return o>0&&(o=1/Math.sqrt(o)),t[0]=e[0]*o,t[1]=e[1]*o,t}function yn(t,e){return t[0]*e[0]+t[1]*e[1]}function mn(t,e,n){var r=e[0]*n[1]-e[1]*n[0];return t[0]=t[1]=0,t[2]=r,t}function vn(t,e,n,r){var o=e[0],i=e[1];return t[0]=o+r*(n[0]-o),t[1]=i+r*(n[1]-i),t}function bn(t,e){e=e||1;var n=2*c()*Math.PI;return t[0]=Math.cos(n)*e,t[1]=Math.sin(n)*e,t}function wn(t,e,n){var r=e[0],o=e[1];return t[0]=n[0]*r+n[2]*o,t[1]=n[1]*r+n[3]*o,t}function Cn(t,e,n){var r=e[0],o=e[1];return t[0]=n[0]*r+n[2]*o+n[4],t[1]=n[1]*r+n[3]*o+n[5],t}function Mn(t,e,n){var r=e[0],o=e[1];return t[0]=n[0]*r+n[3]*o+n[6],t[1]=n[1]*r+n[4]*o+n[7],t}function En(t,e,n){var r=e[0],o=e[1];return t[0]=n[0]*r+n[4]*o+n[12],t[1]=n[1]*r+n[5]*o+n[13],t}function An(t,e,n,r){var o=e[0]-n[0],i=e[1]-n[1],s=Math.sin(r),a=Math.cos(r);return t[0]=o*a-i*s+n[0],t[1]=o*s+i*a+n[1],t}function Rn(t,e){var n=t[0],r=t[1],o=e[0],i=e[1],s=n*n+r*r;s>0&&(s=1/Math.sqrt(s));var a=o*o+i*i;a>0&&(a=1/Math.sqrt(a));var u=(n*o+r*i)*s*a;return u>1?0:u<-1?Math.PI:Math.acos(u)}function xn(t){return t[0]=0,t[1]=0,t}function Fn(t){return"vec2("+t[0]+", "+t[1]+")"}function Tn(t,e){return t[0]===e[0]&&t[1]===e[1]}function Pn(t,e){var n=t[0],r=t[1],o=e[0],i=e[1];return Math.abs(n-o)<=a*Math.max(1,Math.abs(n),Math.abs(o))&&Math.abs(r-i)<=a*Math.max(1,Math.abs(r),Math.abs(i))}var _n=fn,kn=Ze,Bn=Qe,Sn=tn,Ln=cn,Un=hn,On=ln,Dn=function(){var t=Ve();return function(e,n,r,o,i,s){var a,u;for(n||(n=2),r||(r=0),u=o?Math.min(o*n+r,e.length):e.length,a=r;a<u;a+=n)t[0]=e[a],t[1]=e[a+1],i(t,t,s),e[a]=t[0],e[a+1]=t[1];return e}}(),Nn=n(24),In=new(function(){function t(){}return t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.log.apply(console,t)},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.warn.apply(console,t)},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];console.error.apply(console,t)},t}());function Wn(t,e){var n=t.indexOf(e);return n>=0&&(t.splice(n,1),!0)}var jn=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{u(r.next(t))}catch(t){i(t)}}function a(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,a)}u((r=r.apply(t,e||[])).next())})},qn=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},Yn=function(){function t(){this.cleanList=new Array}return t.prototype.wrapPromise=function(t){return jn(this,void 0,void 0,function(){var e,n;return qn(this,function(r){switch(r.label){case 0:return e=!1,this.remember(function(){e=!0}),[4,t];case 1:return n=r.sent(),e?[2,new Promise(function(){})]:[2,n]}})})},t.prototype.remember=function(){for(var t=this,e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(1===e.length)return this.rememberOne(e[0]);var r=e.map(function(e){return t.rememberOne(e)});return function(){var t=r.slice();r.length=0,t.forEach(function(t){t()})}},t.prototype.rememberOne=function(t){var e=this,n={clean:t};return this.cleanList.push(n),function(){Wn(e.cleanList,n)&&t()}},t.prototype.clean=function(){var t=this.cleanList.slice();this.cleanList.length=0,t.forEach(function(t){(0,t.clean)()})},t}(),Gn=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{u(r.next(t))}catch(t){i(t)}}function a(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,a)}u((r=r.apply(t,e||[])).next())})},zn=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},Vn=function(){function t(){this.actions=new Array,this.running=!1}return t.prototype.queue=function(t){this.actions.push(t),this.ensureRunning()},t.prototype.ensureRunning=function(){return Gn(this,void 0,void 0,function(){return zn(this,function(t){switch(t.label){case 0:if(this.running)return[3,4];this.running=!0,t.label=1;case 1:return this.actions.length>0?[4,this.actions.shift()()]:[3,3];case 2:return t.sent(),[3,1];case 3:this.running=!1,t.label=4;case 4:return[2]}})})},t}();function Hn(t){return Object.values(t)}function Xn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];for(var n=0,r=t;n<r.length;n++){var o=r[n];if(void 0!==o)return o}}var Kn,Jn=function(){function t(t,e,n,o){this.gl=t,this.material=e,this.modelMatrix=r.create(),this.position=s.fromValues(0,0),this.scale=s.fromValues(1,1),this.rotationZDeg=0;var i=this.gl.createBuffer();if(!i)throw new Error("Failed to create buffer");if(this.buffer=i,this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,this.buffer),this.gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER,new Float32Array(n),o),n.length%this.material.itemSize!=0)throw new Error("Unexpected array size");this.numItems=n.length/this.material.itemSize}return t.prototype.shouldBeRendered=function(){return!0},t.prototype.draw=function(e,n){void 0===e&&(e=t.mat4Identity),void 0===n&&(n=t.mat4Identity),this.shouldBeRendered()&&(this.material.use(),this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,this.buffer),this.material.setupAttribPointers(),this.material.updateMatrices(e,n,this.modelMatrix),this.gl.drawArrays(WebGLRenderingContext.TRIANGLE_STRIP,0,this.numItems))},t.prototype.getWorldTransform=function(){return this.modelMatrix},t.prototype.getInverseWorldTransform=function(){var t=r.invert(r.create(),this.modelMatrix);if(!t)throw new Error("Failed to get inverse world transform");return t},t.prototype.getRotationZDeg=function(){return this.rotationZDeg},t.prototype.setPosition=function(t,e){this.position[0]=t,this.position[1]=Xn(e,t),this.updateModelMatrix()},t.prototype.setRotation=function(t){this.rotationZDeg=t,this.updateModelMatrix()},t.prototype.setScale=function(t,e){this.scale[0]=t,this.scale[1]=Xn(e,t),this.updateModelMatrix()},t.prototype.updateModelMatrix=function(){r.fromRotationTranslationScale(this.modelMatrix,i.fromEuler(i.create(),0,0,this.rotationZDeg),o.fromValues(this.position[0],this.position[1],0),o.fromValues(this.scale[0],this.scale[1],1))},t.mat4Identity=r.create(),t}(),$n=(Kn=function(t,e){return(Kn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}Kn(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),Zn=function(t){function e(e,n,r,o,i){var s=t.call(this,e,n,o,i)||this;return s.material=n,s.texture=r,s}return $n(e,t),e.prototype.draw=function(t,e){void 0===t&&(t=Jn.mat4Identity),void 0===e&&(e=Jn.mat4Identity),this.shouldBeRendered()&&(this.material.texture=this.texture,this.material.use(),this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,this.buffer),this.material.setupAttribPointers(),this.material.updateMatrices(t,e,this.modelMatrix),this.gl.drawArrays(WebGLRenderingContext.TRIANGLE_STRIP,0,this.numItems))},e}(Jn);function Qn(t){return 0==(t&t-1)}var tr=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),er=function(t){function e(e,n,r,o,i,s,a){var u=t.call(this,n,r,null,c(1,1).concat(c(.5,1),c(1,0),c(.5,0),c(.5,0),c(0,0),c(.5,1),c(0,1)),WebGLRenderingContext.DYNAMIC_DRAW)||this;function c(t,e){return[t,e,0,t,1-e]}return u.debugName=e,u.createRenderTarget=o,u.height=i,u.visible=!1,u.connectedPortal=void 0,u.renderTargetsInUse=Object.create(null),u.renderTargetsPool=new Array,u.setPosition(a[0],a[1]),u.setRotation(s),u}return tr(e,t),e.linkPortals=function(t,e){t.connectedPortal=e,e.connectedPortal=t},e.prototype.setTexture=function(t){this.texture=this.renderTargetsInUse[t].texture},e.prototype.getRenderTarget=function(t){var e=null;return e=this.renderTargetsPool.length>0?this.renderTargetsPool.pop():this.createRenderTarget.call(null),this.renderTargetsInUse[t]=e,e},e.prototype.releaseAllRenderTargets=function(){var t;(t=this.renderTargetsPool).push.apply(t,Object.values(this.renderTargetsInUse)),this.renderTargetsInUse=Object.create(null)},e.prototype.updateVisibility=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return this.setViewPoint.apply(this,t),this.shouldBeRendered()},e.prototype.setViewPoint=function(t,e,n,r,i,a,u){var c=this.getWorldTransform(),h=this.getInverseWorldTransform(),f=o.fromValues(t[0],t[1],0);if(this.visible=o.transformMat4(o.create(),f,h)[0]<0,this.visible){var l=o.fromValues(0,.5*this.height,0),p=o.fromValues(0,-.5*this.height,0),d=o.transformMat4(o.create(),l,c),g=o.transformMat4(o.create(),p,c),y=_(f,d),m=_(f,g),v=o.transformMat4(o.create(),y,h),b=o.transformMat4(o.create(),m,h),w=o.add(o.create(),y,o.fromValues(i,0,0)),C=o.add(o.create(),m,o.fromValues(i,0,0)),M=o.transformMat4(o.create(),w,c),E=o.transformMat4(o.create(),C,c),A=1/n,R=A*(i/a),x=s.fromValues(0,0),F=function(t){var n=s.fromValues(t[0]-e[0],t[1]-e[1]);return s.rotate(n,n,x,r/180*Math.PI),[.5+n[0]/R,.5+n[1]/A]},T=P(w,M).concat(P(v,y),P(C,E),P(b,m),P(b,m),P(p,g),P(v,y),P(l,d));return this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,this.buffer),this.gl.bufferData(WebGLRenderingContext.ARRAY_BUFFER,new Float32Array(T),WebGLRenderingContext.DYNAMIC_DRAW),void this.gl.bindBuffer(WebGLRenderingContext.ARRAY_BUFFER,null)}function P(t,e){return[t[0],t[1],0].concat(F(e))}function _(t,e,n){void 0===n&&(n=10);var r=o.create();return o.sub(r,e,t),o.normalize(r,r),o.scale(r,r,n),o.add(r,e,r),r}},e.prototype.shouldBeRendered=function(){return t.prototype.shouldBeRendered.call(this)&&Boolean(this.connectedPortal)&&this.visible},e.prototype.teleported=function(t){if(!this.connectedPortal)throw new Error("Missing connected portal");var e=s.clone(t),n=this.getInverseWorldTransform();return s.transformMat4(e,e,n),e[0]=-e[0],e[1]=-e[1],s.transformMat4(e,e,this.connectedPortal.getWorldTransform()),e},e.prototype.wasCrossed=function(t,e){var n,r,o,i,a,u,c,h,f,l,p,d,g,y,m,v,b=this.getInverseWorldTransform(),w=s.fromValues(0,.5*this.height),C=s.fromValues(0,-.5*this.height),M=s.transformMat4(s.create(),t,b),E=s.transformMat4(s.create(),e,b);return M[0]<0&&E[0]>=0&&(r=E,o=w,i=C,a=(n=M)[0],u=n[1],c=r[0],h=r[1],f=o[0],l=o[1],p=c-a,d=h-u,g=i[0]-f,y=i[1]-l,v=(g*(u-l)-y*(a-f))/(-g*d+p*y),(m=(-d*(a-f)+p*(u-l))/(-g*d+p*y))>=0&&m<=1&&v>=0&&v<=1)},e.prototype.teleport=function(t){var e=this.teleported(t);t[0]=e[0],t[1]=e[1]},e.prototype.teleportCamera=function(t,e,n){return this.connectedPortal?(this.teleport(t),{tilt:e,zoom:n}):{tilt:e,zoom:n}},e}(Zn);function nr(t){return new Promise(function(e,n){var r=new Image;r.onload=function(){e(r)},r.onerror=function(t){n(t)},r.src=t})}function rr(t,e,n){var r=t.createShader(n);if(!r)throw new Error("Failed to create shader");if(t.shaderSource(r,e),t.compileShader(r),!t.getShaderParameter(r,WebGLRenderingContext.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(r)||"(Shader info log not available)");return r}function or(t){if(t===WebGLRenderingContext.FLOAT)return 4;throw new Error("Unsupported type")}function ir(t){var e=t.canvas;return[e.clientWidth,e.clientHeight]}var sr,ar,ur=function(){function t(t){this.evaluate=t,this.cached=null,this.evaluated=!1}return t.prototype.getValue=function(){return this.evaluated||(this.evaluated=!0,this.cached=this.evaluate.call(null)),this.cached},t}(),cr=function(){function t(t,e){var n=this;this.gl=t,this.shaders=e,this.attributes=Object.create(null),this.uniforms=Object.create(null);var r=this.gl.createProgram();if(!r)throw new Error("Failed to create program");if(this.program=r,e.forEach(function(t){n.gl.attachShader(r,t.shader)}),this.gl.linkProgram(r),!this.gl.getProgramParameter(r,WebGLRenderingContext.LINK_STATUS))throw new Error("Failed to link program")}return t.prototype.use=function(){var t=this;this.gl.useProgram(this.program),this.shaders.forEach(function(e){e.attributes.forEach(function(e){t.attributes[e]=t.gl.getAttribLocation(t.program,e),t.gl.enableVertexAttribArray(t.attributes[e])}),e.uniforms.forEach(function(e){var n=t.gl.getUniformLocation(t.program,e);null!==n?t.uniforms[e]=n:In.warn('Failed to get location of uniform "'+e+'"')})})},t}();!function(t){t.VertexPosition="aVertexPosition"}(sr||(sr={})),function(t){t.ModelViewMatrix="uMVMatrix",t.ProjectionMatrix="uPMatrix"}(ar||(ar={}));var hr,fr,lr=function(){function t(e){this.attributes=Hn(sr),this.uniforms=Hn(ar),this.source="\n    attribute vec3 "+sr.VertexPosition+";\n\n    uniform mat4 "+ar.ModelViewMatrix+";\n    uniform mat4 "+ar.ProjectionMatrix+";\n\n    void main(void) {\n      gl_Position = (\n        "+ar.ProjectionMatrix+" *\n        "+ar.ModelViewMatrix+" *\n        vec4("+sr.VertexPosition+", 1.0)\n      );\n    }\n  ",this.shader=rr(e,this.source,t.type)}return t.type=WebGLRenderingContext.VERTEX_SHADER,t}(),pr=function(){function t(e){this.attributes=[],this.uniforms=[],this.source="\n    precision mediump float;\n\n    void main(void) {\n        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n  ",this.shader=rr(e,this.source,t.type)}return t.type=WebGLRenderingContext.FRAGMENT_SHADER,t}(),dr=function(){function t(t){this.gl=t,this.tempModelViewMatrix=r.create(),this.itemSize=3,this.program=new cr(this.gl,[new lr(this.gl),new pr(this.gl)])}return t.prototype.use=function(){this.program.use()},t.prototype.setupAttribPointers=function(){this.gl.vertexAttribPointer(this.program.attributes[sr.VertexPosition],this.itemSize,WebGLRenderingContext.FLOAT,!1,0,0)},t.prototype.updateMatrices=function(t,e,n){this.gl.uniformMatrix4fv(this.program.uniforms[ar.ProjectionMatrix],!1,t);var o=this.tempModelViewMatrix;r.identity(o),r.mul(o,e,n),this.gl.uniformMatrix4fv(this.program.uniforms[ar.ModelViewMatrix],!1,o)},t}();!function(t){t.VertexPosition="aVertexPosition",t.TextureCoord="aTextureCoord"}(hr||(hr={})),function(t){t.ModelViewMatrix="uMVMatrix",t.ProjectionMatrix="uPMatrix"}(fr||(fr={}));var gr,yr=function(){function t(e){this.attributes=Hn(hr),this.uniforms=Hn(fr),this.source="\n    attribute vec3 "+hr.VertexPosition+";\n    attribute vec2 "+hr.TextureCoord+";\n\n    uniform mat4 "+fr.ModelViewMatrix+";\n    uniform mat4 "+fr.ProjectionMatrix+";\n\n    varying highp vec2 vTextureCoord;\n\n    void main(void) {\n      gl_Position = (\n        "+fr.ProjectionMatrix+" *\n        "+fr.ModelViewMatrix+" *\n        vec4("+hr.VertexPosition+", 1.0)\n      );\n      vTextureCoord = aTextureCoord;\n    }\n  ",this.shader=rr(e,this.source,t.type)}return t.type=WebGLRenderingContext.VERTEX_SHADER,t}();(gr||(gr={})).Sampler="uSampler";var mr,vr=function(){function t(e){this.attributes=[],this.uniforms=Hn(gr),this.source="\n    precision mediump float;\n\n    varying highp vec2 vTextureCoord;\n\n    uniform sampler2D "+gr.Sampler+";\n\n    void main(void) {\n        gl_FragColor = texture2D("+gr.Sampler+", vTextureCoord);\n    }\n  ",this.shader=rr(e,this.source,t.type)}return t.type=WebGLRenderingContext.FRAGMENT_SHADER,t}(),br=function(){function t(t,e){this.gl=t,this.tempModelViewMatrix=r.create(),this.itemSize=5,this.texture=null,this.program=new cr(this.gl,[new yr(this.gl),new vr(this.gl)]),this.texture=e||null}return t.prototype.use=function(){if(this.program.use(),!this.texture)throw new Error("Unable to use material - texture is not set");this.gl.activeTexture(WebGLRenderingContext.TEXTURE0),this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D,this.texture),this.gl.uniform1i(this.program.uniforms[gr.Sampler],0)},t.prototype.setupAttribPointers=function(){this.gl.vertexAttribPointer(this.program.attributes[hr.VertexPosition],3,WebGLRenderingContext.FLOAT,!1,this.itemSize*or(WebGLRenderingContext.FLOAT),0),this.gl.vertexAttribPointer(this.program.attributes[hr.TextureCoord],2,WebGLRenderingContext.FLOAT,!1,this.itemSize*or(WebGLRenderingContext.FLOAT),3*or(WebGLRenderingContext.FLOAT))},t.prototype.updateMatrices=function(t,e,n){this.gl.uniformMatrix4fv(this.program.uniforms[fr.ProjectionMatrix],!1,t);var o=this.tempModelViewMatrix;r.identity(o),r.mul(o,e,n),this.gl.uniformMatrix4fv(this.program.uniforms[fr.ModelViewMatrix],!1,o)},t}(),wr=function(){function t(t,e,n){this.gl=t,this.viewportWidth=320,this.viewportHeight=240,this.perspectiveFovY=45,this.orthoHeightY=1,this.near=.1,this.far=100,this.x=0,this.y=0,this.zoom=1,this.viewMatrix=r.create(),this.projectionMatrix=r.create(),this.updateSize(e,n)}return t.prototype.updateViewportAndProjection=function(t,e,n){r.identity(this.viewMatrix),r.rotateZ(this.viewMatrix,this.viewMatrix,n/180*Math.PI),r.translate(this.viewMatrix,this.viewMatrix,o.fromValues(-t[0],-t[1],-10)),this.zoom=e,this.gl.viewport(0,0,this.viewportWidth,this.viewportHeight);var i=this.viewportWidth/this.viewportHeight,s=this.orthoHeightY/this.zoom,a=s*i;r.ortho(this.projectionMatrix,.5*-a,.5*a,.5*-s,.5*s,this.near,this.far)},t.prototype.updateSize=function(t,e){this.viewportWidth=t,this.viewportHeight=e},t}(),Cr=function(){function t(t,e,n){void 0===n&&(n=!1),this.gl=t,this.params={level:0,border:0,internalFormat:WebGLRenderingContext.RGBA,srcFormat:WebGLRenderingContext.RGBA,srcType:WebGLRenderingContext.UNSIGNED_BYTE};var r=this.gl.createTexture();if(!r)throw new Error("Failed to create texture");this.texture=r,this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D,this.texture);var o=e.image||null;if(o)this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D,this.params.level,this.params.internalFormat,this.params.srcFormat,this.params.srcType,o);else{var i=e;this.resize(i.width,i.height)}o&&Qn(o.width)&&Qn(o.height)?this.gl.generateMipmap(WebGLRenderingContext.TEXTURE_2D):this.turnOffMipmapAndSetWrapping()}return t.prototype.resize=function(t,e){this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D,this.params.level,this.params.internalFormat,t,e,this.params.border,this.params.srcFormat,this.params.srcType,null)},t.prototype.turnOffMipmapAndSetWrapping=function(){this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D,WebGLRenderingContext.TEXTURE_MIN_FILTER,WebGLRenderingContext.LINEAR),this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D,WebGLRenderingContext.TEXTURE_WRAP_S,WebGLRenderingContext.CLAMP_TO_EDGE),this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D,WebGLRenderingContext.TEXTURE_WRAP_T,WebGLRenderingContext.CLAMP_TO_EDGE)},t}(),Mr=function(){function t(t,e,n,r,o){void 0===r&&(r=!0),void 0===o&&(o=!1),this.gl=t,this.width=e,this.height=n,this.useDepth=r,this.useStencil=o,this.renderbuffer=null,this.targetTexture=new Cr(this.gl,{width:this.width,height:this.height}),this.texture=this.targetTexture.texture;var i=this.gl.createFramebuffer();if(!i)throw new Error("Failed to create framebuffer");this.framebuffer=i,this.bind();this.gl.framebufferTexture2D(WebGLRenderingContext.FRAMEBUFFER,WebGLRenderingContext.COLOR_ATTACHMENT0,WebGLRenderingContext.TEXTURE_2D,this.targetTexture.texture,0),this.useDepth&&(this.renderbuffer=this.gl.createRenderbuffer(),this.gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER,this.renderbuffer),this.useStencil?(this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER,WebGLRenderingContext.DEPTH_STENCIL,this.width,this.height),this.gl.framebufferRenderbuffer(WebGLRenderingContext.FRAMEBUFFER,WebGLRenderingContext.DEPTH_STENCIL_ATTACHMENT,WebGLRenderingContext.RENDERBUFFER,this.renderbuffer)):(this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER,WebGLRenderingContext.DEPTH_COMPONENT16,this.width,this.height),this.gl.framebufferRenderbuffer(WebGLRenderingContext.FRAMEBUFFER,WebGLRenderingContext.DEPTH_ATTACHMENT,WebGLRenderingContext.RENDERBUFFER,this.renderbuffer))),this.unbind()}return t.prototype.bind=function(){this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER,this.framebuffer),this.gl.viewport(0,0,this.width,this.height)},t.prototype.unbind=function(){this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER,null)},t.prototype.resize=function(t,e){this.width=t,this.height=e,this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D,this.targetTexture.texture),this.targetTexture.resize(this.width,this.height),this.renderbuffer&&(this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER,this.framebuffer),this.gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER,this.renderbuffer),this.useStencil?this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER,WebGLRenderingContext.DEPTH_STENCIL,this.width,this.height):this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER,WebGLRenderingContext.DEPTH_COMPONENT16,this.width,this.height),this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER,null))},t}(),Er=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{u(r.next(t))}catch(t){i(t)}}function a(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,a)}u((r=r.apply(t,e||[])).next())})},Ar=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},Rr=function(){function t(t){var e,n=this;this.gl=t,this.renderTargetsToResize=[],this.renderTargetStack=[],e=ir(this.gl),this.gl.canvas.width=e[0],this.gl.canvas.height=e[1],this.materials={unlitBlack:new dr(this.gl),unlitTextured:new br(this.gl)},this.postProcessRenderTarget=new Mr(this.gl,this.gl.canvas.width,this.gl.canvas.height,!1),this.postProcessingModel=new Zn(this.gl,this.materials.unlitTextured,this.postProcessRenderTarget.texture,[1,1,0,1,1,-1,1,0,0,1,1,-1,0,1,0,-1,-1,0,0,0],WebGLRenderingContext.STATIC_DRAW),this.gl.clearColor(1,1,1,1),this.camera=new wr(this.gl,this.gl.canvas.width,this.gl.canvas.height),window.addEventListener("resize",function(){n.updateSize()})}return t.prototype.enterRenderTarget=function(t){this.renderTargetStack.length>0&&this.renderTargetStack[this.renderTargetStack.length-1].unbind();this.renderTargetStack.push(t),t.bind()},t.prototype.exitRenderTarget=function(){var t=this.renderTargetStack.pop();(t&&t.unbind(),this.renderTargetStack.length>0)&&this.renderTargetStack[this.renderTargetStack.length-1].bind()},t.prototype.createPortal=function(t,e,n,r){var o=this;return new er(t,this.gl,this.materials.unlitTextured,function(){var t=new Mr(o.gl,o.gl.canvas.width,o.gl.canvas.height,!1);return o.renderTargetsToResize.push(t),t},e,n,r)},t.prototype.updateSize=function(){var t=ir(this.gl),e=t[0],n=t[1];this.gl.canvas.width=e,this.gl.canvas.height=n,this.camera.updateSize(e,n),this.postProcessRenderTarget.resize(e,n),this.renderTargetsToResize.forEach(function(t){t.resize(e,n)})},t.prototype.render=function(t,e,n,r,o,a,u,c,h,f){var l=this;void 0===e&&(e=void 0),void 0===a&&(a=0),void 0===h&&(h=[]),void 0===f&&(f=[]);var p=Xn(u,this.gl.canvas.width),d=Xn(c,this.gl.canvas.height),g=new ur(function(){var t=1/o,e=t*(p/d);i.fromEuler(i.create(),0,0,a);return[n(-1,-1),n(1,-1),n(1,1),n(-1,1)];function n(n,o){var i=s.fromValues(r[0]+.5*n*e,r[1]+.5*o*t);return s.rotate(i,i,r,a/180*Math.PI),i}}),y=h.length>=3?[]:t.filter(function(t){if(!(t instanceof er))return!1;var e=t;return 0===h.length&&e.releaseAllRenderTargets(),e.updateVisibility(n,r,o,a,p,d,g)});y.forEach(function(i,s){var u=h.concat([s]);i.connectedPortal;l.enterRenderTarget(i.getRenderTarget(u.join("-")));var c=i.teleported(r),p=o,d=i.teleported(n),g=a;l.render(t,e,d,c,p,g,void 0,void 0,u,f),l.exitRenderTarget()}),this.enterRenderTarget(this.postProcessRenderTarget),this.camera.updateViewportAndProjection(r,o,a),this.gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);var m=function(t){t.draw(l.camera.projectionMatrix,l.camera.viewMatrix)};t.forEach(function(t){t instanceof er||t!==e&&m(t)}),y.forEach(function(t,e){t.setViewPoint(n,r,o,a,p,d,g),t.setTexture(h.concat([e]).join("-")),m(t)}),e&&m(e),this.exitRenderTarget(),this.gl.viewport(0,0,this.gl.canvas.width,this.gl.canvas.height),this.gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT),this.postProcessingModel.draw()},t.prototype.loadTexture=function(t){return Er(this,void 0,void 0,function(){var e;return Ar(this,function(n){switch(n.label){case 0:return[4,nr(t)];case 1:return e=n.sent(),[2,new Cr(this.gl,{image:e}).texture]}})})},t}(),xr=function(){function t(t){this.creator=t,this.map=Object.create(null)}return t.prototype.get=function(t){return Object.hasOwnProperty.call(this.map,t)||(this.map[t]=this.creator()),this.map[t]},t.prototype.clear=function(){this.map=Object.create(null)},t}(),Fr=function(){function t(){var t=this;this.listeners=new xr(function(){return[]}),this.pressedKeys=[],this.handleKeyDown=function(e){var n,r,o=e.keyCode;n=t.pressedKeys,r=o,n.includes(r)||n.push(r)},this.handleKeyUp=function(e){var n=e.keyCode;Wn(t.pressedKeys,n)},this.addEventListeners()}return t.prototype.destroy=function(){this.removeEventListeners(),this.pressedKeys.length=0,this.listeners.clear()},t.prototype.addEventListeners=function(){window.addEventListener("keydown",this.handleKeyDown),window.addEventListener("keyup",this.handleKeyUp)},t.prototype.removeEventListeners=function(){window.removeEventListener("keydown",this.handleKeyDown),window.removeEventListener("keyup",this.handleKeyUp)},t.prototype.whilePressed=function(t,e){var n={action:e},r=this.listeners.get(t);return r.push(n),function(){Wn(r,n)}},t.prototype.update=function(t){var e=this;this.pressedKeys.forEach(function(n){e.listeners.get(n).forEach(function(e){(0,e.action)(t)})})},t.KEY_W=87,t.KEY_A=65,t.KEY_S=83,t.KEY_D=68,t.KEY_ARROW_UP=38,t.KEY_ARROW_LEFT=37,t.KEY_ARROW_DOWN=40,t.KEY_ARROW_RIGHT=39,t.KEY_NUM7=36,t.KEY_NUM9=33,t.KEY_NUM_MINUS=109,t.KEY_NUM_PLUS=107,t}(),Tr=function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{u(r.next(t))}catch(t){i(t)}}function a(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,a)}u((r=r.apply(t,e||[])).next())})},Pr=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};function _r(t,e){return Tr(this,void 0,void 0,function(){function n(){!function(t){t.remember(b.whilePressed(Fr.KEY_ARROW_UP,function(t){d[1]+=w*t}),b.whilePressed(Fr.KEY_ARROW_LEFT,function(t){d[0]-=w*t}),b.whilePressed(Fr.KEY_ARROW_DOWN,function(t){d[1]-=w*t}),b.whilePressed(Fr.KEY_ARROW_RIGHT,function(t){d[0]+=w*t}),b.whilePressed(Fr.KEY_NUM_MINUS,function(t){p-=C*t}),b.whilePressed(Fr.KEY_NUM_PLUS,function(t){p+=C*t}),b.whilePressed(Fr.KEY_NUM7,function(t){l+=M*t}),b.whilePressed(Fr.KEY_NUM9,function(t){l-=M*t}),b.whilePressed(Fr.KEY_W,function(t){g[1]+=w*t}),b.whilePressed(Fr.KEY_A,function(t){g[0]-=w*t}),b.whilePressed(Fr.KEY_S,function(t){g[1]-=w*t}),b.whilePressed(Fr.KEY_D,function(t){g[0]+=w*t}))}(a),A=performance.now()-1e3/60,a.remember(function(){null!==E&&(cancelAnimationFrame(E),E=null)}),i(performance.now())}function r(){a.clean()}function o(e){return Tr(this,void 0,void 0,function(){function n(e){return e?new Zn(t.gl,t.materials.unlitTextured,e,[.5,.5,0,1,0,-.5,.5,0,0,0,.5,-.5,0,1,1,-.5,-.5,0,0,1],WebGLRenderingContext.STATIC_DRAW):new Jn(t.gl,t.materials.unlitBlack,[.5,.5,0,-.5,.5,0,.5,-.5,0,-.5,-.5,0],WebGLRenderingContext.STATIC_DRAW)}function r(){return new Jn(t.gl,t.materials.unlitBlack,[.3,.5,0,-.3,.5,0,.3,.3,0,-.3,.3,0,-.3,.3,0,-.3,-.5,0,-.1,.3,0,-.1,-.5,0,-.1,-.5,0,-.1,-.1,0,-.1,-.1,0,.1,-.1,0,-.1,.1,0,.1,.1,0],WebGLRenderingContext.STATIC_DRAW)}function o(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=t.createPortal.apply(t,e);return u.push(r),r}var i,s,a,u,c,h,f,l,p,d;return Pr(this,function(g){switch(g.label){case 0:return[4,e.wrapPromise(t.loadTexture("gfx/debug_512x512.png"))];case 1:return i=g.sent(),s=[],(a=n(i)).setScale(10,10),s.push(a),1,u=[],(c=r()).setPosition(10,0),s.push(c),h=o("A",1,0,[1.5,0]),f=o("B",1,180,[-1.5,0]),er.linkPortals(h,f),s.push(h),s.push(f),(l=r()).setPosition(0,-10),s.push(l),p=o("C",1,-90,[0,-2]),d=o("D",1,90,[0,-9]),er.linkPortals(p,d),s.push(p),s.push(d),e.remember(function(){}),[2,{spawnPlayer:function(){var t=n();return s.push(t),t},removePlayer:function(t){Wn(s,t)},allModels:s,portals:u,update:function(t,e){c.setRotation(36*e/1e3)}}]}})})}function i(e){var n=(e-A)/1e3;A=e;var r=s.clone(g);b.update(n);for(var o=0,a=h.portals;o<a.length;o++){var u=a[o];if(u.wasCrossed(r,g)){u.teleport(r),u.teleport(g);var c=u.teleportCamera(d,l,p);l=c.tilt,p=c.zoom;break}}f.setPosition(g[0],g[1]),h.update(n,e),t.render(h.allModels,f,g,d,p,l),E=requestAnimationFrame(i)}var a,u,c,h,f,l,p,d,g,y,m,v,b,w,C,M,E,A;return Pr(this,function(t){switch(t.label){case 0:return a=new Yn,u=Object.create(null),e&&(c=e.id,e.on(mr.InPlayersList,function(t){var e=Object.keys(u),n=Object.keys(t),r=n.filter(function(t){return!e.includes(t)});e.filter(function(t){return!n.includes(t)}).forEach(function(t){if(t!==c&&t in u){var e=u[t];h.removePlayer(e),delete u[t]}}),r.forEach(function(t){t!==c&&(u[t]=h.spawnPlayer())}),Object.keys(n).forEach(function(e){e!==c&&e in u&&u[e].setPosition(t[e][0],t[e][1])})}),e.on(mr.InStatusUpdate,function(t){Object.keys(t).forEach(function(e){e!==c&&e in u&&u[e].setPosition(t[e][0],t[e][1])})}),e.emit(mr.OutGetPlayersList),a.remember(function(){})),[4,o(a)];case 1:return h=t.sent(),f=h.spawnPlayer(),l=0,p=.1,d=s.fromValues(0,0),g=s.fromValues(0,0),e&&(u[e.id]=f,y=null,m=null,v=setInterval(function(){var t=g[0],n=g[1];y===t&&m===n||(y=t,m=n,e.emit(mr.OutStatusUpdate,Number(t.toFixed(3)),Number(n.toFixed(3))))},200),a.remember(function(){clearInterval(v)})),b=new Fr,a.remember(function(){b.destroy()}),w=3.33,C=.25,M=180,E=null,A=0,n(),[2,{destroy:r}]}})})}function kr(t){In.error(t)}!function(t){t.InPlayersList="playersList",t.OutGetPlayersList="getPlayersList",t.OutStatusUpdate="statusUpdate",t.InStatusUpdate="statusUpdate"}(mr||(mr={})),function(){var t=(e="mainCanvas",document.getElementById(e));var e;if(!t)return kr("Failed to find canvas");var n=t.getContext("webgl");if(!n)return kr("Failed to get WebGL context");var r=null;try{r=new Rr(n)}catch(t){In.error("Failed to create renderer",{error:t})}if(!r)return;var o=null,i=new Vn;function s(t){var e=this;i.queue(function(){return Tr(e,void 0,void 0,function(){return Pr(this,function(e){switch(e.label){case 0:return o&&o.destroy(),o=null,[4,t()];case 1:return o=e.sent(),[2]}})})})}s(function(){return _r(r)}),a=function(t){In.log("Welcome, "+t);var e=Nn("https://elite-lillipilli.glitch.me/");e.on("connect",function(){In.log("connected"),s(function(){return _r(r,e)})}),e.on("event",function(t){In.log(t)}),e.on("customPong",function(t){In.log("Received pong")}),e.on("disconnect",function(){In.log("disconnected")})},u=document.createElement("input"),u.setAttribute("type","button"),u.setAttribute("value","Go multiplayer"),u.setAttribute("style",["position: absolute","left: 1em","top: 1em"].join("; ")),u.addEventListener("click",function(){var t=function(t,e,n){var r=localStorage.getItem(t);if(r)return r;var o=e();return o?(localStorage.setItem(t,o.result),o.result):n}("name",function(){var t=prompt("Enter desired nickname:");return t?{result:t}:null},"noname");u.remove(),a(t)}),document.body.appendChild(u);var a,u}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,